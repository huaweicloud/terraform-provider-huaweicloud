// Generated by PMS #457
package smn

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSmnTopicSubscriptions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmnTopicSubscriptionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"topic_urn": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the topic URN.`,
			},
			"subscriptions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The subscription list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"remark": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The subscription remark.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The subscription status.`,
						},
						"filter_polices": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The subscription filter polices.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The filter policy name.`,
									},
									"string_equals": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The string array for exact match.`,
									},
								},
							},
						},
						"topic_urn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The topic URN.`,
						},
						"protocol": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The subscription protocol.`,
						},
						"subscription_urn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The subscription URN.`,
						},
						"owner": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The subscription owner.`,
						},
						"endpoint": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The subscriptions endpoint.`,
						},
					},
				},
			},
		},
	}
}

type TopicSubscriptionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTopicSubscriptionsDSWrapper(d *schema.ResourceData, meta interface{}) *TopicSubscriptionsDSWrapper {
	return &TopicSubscriptionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmnTopicSubscriptionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTopicSubscriptionsDSWrapper(d, meta)
	lisSubByTopRst, err := wrapper.ListSubscriptionsByTopic()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSubscriptionsByTopicToSchema(lisSubByTopRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMN GET /v2/{project_id}/notifications/topics/{topic_urn}/subscriptions
func (w *TopicSubscriptionsDSWrapper) ListSubscriptionsByTopic() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "smn")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/notifications/topics/{topic_urn}/subscriptions"
	uri = strings.ReplaceAll(uri, "{topic_urn}", w.Get("topic_urn").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("subscriptions", "offset", "limit", 100).
		Request().
		Result()
}

func (w *TopicSubscriptionsDSWrapper) listSubscriptionsByTopicToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("subscriptions", schemas.SliceToList(body.Get("subscriptions"),
			func(subscriptions gjson.Result) any {
				return map[string]any{
					"remark": subscriptions.Get("remark").Value(),
					"status": subscriptions.Get("status").Value(),
					"filter_polices": schemas.SliceToList(subscriptions.Get("filter_polices"),
						func(filterPolices gjson.Result) any {
							return map[string]any{
								"name":          filterPolices.Get("name").Value(),
								"string_equals": schemas.SliceToStrList(filterPolices.Get("string_equals")),
							}
						},
					),
					"topic_urn":        subscriptions.Get("topic_urn").Value(),
					"protocol":         subscriptions.Get("protocol").Value(),
					"subscription_urn": subscriptions.Get("subscription_urn").Value(),
					"owner":            subscriptions.Get("owner").Value(),
					"endpoint":         subscriptions.Get("endpoint").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
