// Generated by PMS #447
package smn

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSmnLogtanks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmnLogtanksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"topic_urn": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the topic URN.`,
			},
			"logtanks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The cloud logs.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the cloud log.`,
						},
						"log_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The LTS log group ID.`,
						},
						"log_stream_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The LTS log stream ID.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
					},
				},
			},
		},
	}
}

type LogtanksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newLogtanksDSWrapper(d *schema.ResourceData, meta interface{}) *LogtanksDSWrapper {
	return &LogtanksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmnLogtanksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newLogtanksDSWrapper(d, meta)
	listLogtankRst, err := wrapper.ListLogtank()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listLogtankToSchema(listLogtankRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMN GET /v2/{project_id}/notifications/topics/{topic_urn}/logtanks
func (w *LogtanksDSWrapper) ListLogtank() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "smn")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/notifications/topics/{topic_urn}/logtanks"
	uri = strings.ReplaceAll(uri, "{topic_urn}", w.Get("topic_urn").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *LogtanksDSWrapper) listLogtankToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("logtanks", schemas.SliceToList(body.Get("logtanks"),
			func(logtanks gjson.Result) any {
				return map[string]any{
					"id":            logtanks.Get("id").Value(),
					"log_group_id":  logtanks.Get("log_group_id").Value(),
					"log_stream_id": logtanks.Get("log_stream_id").Value(),
					"created_at":    logtanks.Get("create_time").Value(),
					"updated_at":    logtanks.Get("update_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
