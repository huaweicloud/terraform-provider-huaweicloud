// Generated by PMS #504
package codeartsdeploy

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCodeartsDeployEnvironments() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCodeartsDeployEnvironmentsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the project ID.`,
			},
			"application_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the application ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the environment name.`,
			},
			"environments": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the environment lists.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the environment ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the environment name.`,
						},
						"os_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the operating system.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the created time.`,
						},
						"created_by": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the creator information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"user_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the user ID.`,
									},
									"user_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the user name.`,
									},
								},
							},
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the environment description.`,
						},
						"deploy_type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the deployment type.`,
						},
						"instance_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of hosts in the environment.`,
						},
						"permission": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the user permission.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"can_delete": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether the user has the deletion permission.`,
									},
									"can_deploy": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether the user has the deploy permission.`,
									},
									"can_edit": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether the user has the edit permission.`,
									},
									"can_manage": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether the user has the management permission.`,
									},
									"can_view": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether the user has the view permission.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type EnvironmentsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newEnvironmentsDSWrapper(d *schema.ResourceData, meta interface{}) *EnvironmentsDSWrapper {
	return &EnvironmentsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCodeartsDeployEnvironmentsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newEnvironmentsDSWrapper(d, meta)
	listEnvironmentsRst, err := wrapper.ListEnvironments()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listEnvironmentsToSchema(listEnvironmentsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API CodeArtsDeploy GET /v1/applications/{application_id}/environments
func (w *EnvironmentsDSWrapper) ListEnvironments() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "codearts_deploy")
	if err != nil {
		return nil, err
	}

	uri := "/v1/applications/{application_id}/environments"
	uri = strings.ReplaceAll(uri, "{application_id}", w.Get("application_id").(string))
	params := map[string]any{
		"project_id": w.Get("project_id"),
		"name":       w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		PageSizePager("result", "page_index", "page_size", 0).
		Request().
		Result()
}

func (w *EnvironmentsDSWrapper) listEnvironmentsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("environments", schemas.SliceToList(body.Get("result"),
			func(environments gjson.Result) any {
				return map[string]any{
					"id":         environments.Get("id").Value(),
					"name":       environments.Get("name").Value(),
					"os_type":    environments.Get("os").Value(),
					"created_at": environments.Get("created_time").Value(),
					"created_by": schemas.SliceToList(environments.Get("created_by"),
						func(createdBy gjson.Result) any {
							return map[string]any{
								"user_id":   createdBy.Get("user_id").Value(),
								"user_name": createdBy.Get("user_name").Value(),
							}
						},
					),
					"description":    environments.Get("description").Value(),
					"deploy_type":    environments.Get("deploy_type").Value(),
					"instance_count": environments.Get("instance_count").Value(),
					"permission": schemas.SliceToList(environments.Get("permission"),
						func(permission gjson.Result) any {
							return map[string]any{
								"can_delete": permission.Get("can_delete").Value(),
								"can_deploy": permission.Get("can_deploy").Value(),
								"can_edit":   permission.Get("can_edit").Value(),
								"can_manage": permission.Get("can_manage").Value(),
								"can_view":   permission.Get("can_view").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
