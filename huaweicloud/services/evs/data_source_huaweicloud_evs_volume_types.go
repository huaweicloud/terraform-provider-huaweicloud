// Generated by PMS #251
package evs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceEvsVolumeTypes() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEvsVolumeTypesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"types": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of volume types.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The volume type ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The volume type name.`,
						},
						"extra_specs": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The volume type flavor.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"available_availability_zones": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The list of availability zones where the volume type is supported.`,
									},
									"sold_out_availability_zones": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The list of availability zones where the volume type has been sold out.`,
									},
								},
							},
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The volume type description.`,
						},
					},
				},
			},
		},
	}
}

type VolumeTypesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newVolumeTypesDSWrapper(d *schema.ResourceData, meta interface{}) *VolumeTypesDSWrapper {
	return &VolumeTypesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEvsVolumeTypesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newVolumeTypesDSWrapper(d, meta)
	cinLisVolTypRst, err := wrapper.CinderListVolumeTypes()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.cinderListVolumeTypesToSchema(cinLisVolTypRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API EVS GET /v2/{project_id}/types
func (w *VolumeTypesDSWrapper) CinderListVolumeTypes() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "evs")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/types"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OkCode(200).
		Request().
		Result()
}

func (w *VolumeTypesDSWrapper) cinderListVolumeTypesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("types", schemas.SliceToList(body.Get("volume_types"),
			func(types gjson.Result) any {
				return map[string]any{
					"id":   types.Get("id").Value(),
					"name": types.Get("name").Value(),
					"extra_specs": schemas.SliceToList(types.Get("extra_specs"),
						func(extraSpecs gjson.Result) any {
							return map[string]any{
								"available_availability_zones": extraSpecs.Get("RESKEY:availability_zones").Value(),
								"sold_out_availability_zones":  extraSpecs.Get("os-vendor-extended:sold_out_availability_zones").Value(),
							}
						},
					),
					"description": types.Get("description").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
