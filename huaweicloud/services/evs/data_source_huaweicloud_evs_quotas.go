// Generated by PMS #588
package evs

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEvsQuotas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEvsQuotasRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"usage": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies whether to query quota details. Only value **True** is supported currently.`,
			},
			"quota_set": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The returned quota information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"backups": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of backups.`,
							Elem:        evsQuotasSubSchema(),
						},
						"snapshots_ssd": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of snapshots for ultra-high I/O disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"volumes_gpssd": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of general purpose SSD disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"volumes": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"snapshots_sata": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of snapshots for common I/O disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"gigabytes_sata": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The capacity (GiB) for common I/O disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"volumes_sata": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of common I/O disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"snapshots_sas": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of snapshots for high I/O disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"volumes_ssd": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of ultra-high I/O disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"backup_gigabytes": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The backup size, in GiB.`,
							Elem:        evsQuotasSubSchema(),
						},
						"gigabytes": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The total capacity, in GiB.`,
							Elem:        evsQuotasSubSchema(),
						},
						"gigabytes_sas": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The capacity (GiB) for high I/O disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"volumes_sas": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of high I/O disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"gigabytes_ssd": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The capacity (GiB) for ultra-high I/O disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"gigabytes_gpssd": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The capacity (GiB) for general purpose SSD disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"snapshots_gpssd": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of snapshots for general purpose SSD disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"per_volume_gigabytes": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The capacity quota of a disk.`,
							Elem:        evsQuotasSubSchema(),
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project ID.`,
						},
						"snapshots": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of snapshots.`,
							Elem:        evsQuotasSubSchema(),
						},
						"volumes_essd": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of extreme SSD disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"gigabytes_essd": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The capacity (GiB) for extreme SSD disks.`,
							Elem:        evsQuotasSubSchema(),
						},
						"snapshots_essd": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The number of snapshots for extreme SSD disks.`,
							Elem:        evsQuotasSubSchema(),
						},
					},
				},
			},
		},
	}
}

func evsQuotasSubSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"in_use": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The used quota.`,
			},
			"limit": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The maximum quota.`,
			},
			"reserved": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The reserved field.`,
			},
		},
	}
}

type QuotasDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newQuotasDSWrapper(d *schema.ResourceData, meta interface{}) *QuotasDSWrapper {
	return &QuotasDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEvsQuotasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newQuotasDSWrapper(d, meta)
	cinderListQuotasRst, err := wrapper.CinderListQuotas()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.cinderListQuotasToSchema(cinderListQuotasRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API EVS GET /v2/{project_id}/os-quota-sets/{target_project_id}
func (w *QuotasDSWrapper) CinderListQuotas() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "evs")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/os-quota-sets/{target_project_id}"
	uri = strings.ReplaceAll(uri, "{target_project_id}", client.ProjectID)
	params := map[string]any{
		"usage": w.Get("usage"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *QuotasDSWrapper) cinderListQuotasToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("quota_set", schemas.ObjectToList(body.Get("quota_set"),
			func(quotaSet gjson.Result) any {
				return map[string]any{
					"backups": schemas.SliceToList(quotaSet.Get("backups"),
						func(backups gjson.Result) any {
							return map[string]any{
								"in_use":   backups.Get("in_use").Value(),
								"limit":    backups.Get("limit").Value(),
								"reserved": backups.Get("reserved").Value(),
							}
						},
					),
					"snapshots_ssd": schemas.SliceToList(quotaSet.Get("snapshots_SSD"),
						func(snapshotsSsd gjson.Result) any {
							return map[string]any{
								"in_use":   snapshotsSsd.Get("in_use").Value(),
								"limit":    snapshotsSsd.Get("limit").Value(),
								"reserved": snapshotsSsd.Get("reserved").Value(),
							}
						},
					),
					"volumes_gpssd": schemas.SliceToList(quotaSet.Get("volumes_GPSSD"),
						func(volumesGpssd gjson.Result) any {
							return map[string]any{
								"in_use":   volumesGpssd.Get("in_use").Value(),
								"limit":    volumesGpssd.Get("limit").Value(),
								"reserved": volumesGpssd.Get("reserved").Value(),
							}
						},
					),
					"volumes": schemas.SliceToList(quotaSet.Get("volumes"),
						func(volumes gjson.Result) any {
							return map[string]any{
								"in_use":   volumes.Get("in_use").Value(),
								"limit":    volumes.Get("limit").Value(),
								"reserved": volumes.Get("reserved").Value(),
							}
						},
					),
					"snapshots_sata": schemas.SliceToList(quotaSet.Get("snapshots_SATA"),
						func(snapshotsSata gjson.Result) any {
							return map[string]any{
								"in_use":   snapshotsSata.Get("in_use").Value(),
								"limit":    snapshotsSata.Get("limit").Value(),
								"reserved": snapshotsSata.Get("reserved").Value(),
							}
						},
					),
					"gigabytes_sata": schemas.SliceToList(quotaSet.Get("gigabytes_SATA"),
						func(gigabytesSata gjson.Result) any {
							return map[string]any{
								"in_use":   gigabytesSata.Get("in_use").Value(),
								"limit":    gigabytesSata.Get("limit").Value(),
								"reserved": gigabytesSata.Get("reserved").Value(),
							}
						},
					),
					"volumes_sata": schemas.SliceToList(quotaSet.Get("volumes_SATA"),
						func(volumesSata gjson.Result) any {
							return map[string]any{
								"in_use":   volumesSata.Get("in_use").Value(),
								"limit":    volumesSata.Get("limit").Value(),
								"reserved": volumesSata.Get("reserved").Value(),
							}
						},
					),
					"snapshots_sas": schemas.SliceToList(quotaSet.Get("snapshots_SAS"),
						func(snapshotsSas gjson.Result) any {
							return map[string]any{
								"in_use":   snapshotsSas.Get("in_use").Value(),
								"limit":    snapshotsSas.Get("limit").Value(),
								"reserved": snapshotsSas.Get("reserved").Value(),
							}
						},
					),
					"volumes_ssd": schemas.SliceToList(quotaSet.Get("volumes_SSD"),
						func(volumesSsd gjson.Result) any {
							return map[string]any{
								"in_use":   volumesSsd.Get("in_use").Value(),
								"limit":    volumesSsd.Get("limit").Value(),
								"reserved": volumesSsd.Get("reserved").Value(),
							}
						},
					),
					"backup_gigabytes": schemas.SliceToList(quotaSet.Get("backup_gigabytes"),
						func(backupGigabytes gjson.Result) any {
							return map[string]any{
								"in_use":   backupGigabytes.Get("in_use").Value(),
								"limit":    backupGigabytes.Get("limit").Value(),
								"reserved": backupGigabytes.Get("reserved").Value(),
							}
						},
					),
					"gigabytes": schemas.SliceToList(quotaSet.Get("gigabytes"),
						func(gigabytes gjson.Result) any {
							return map[string]any{
								"in_use":   gigabytes.Get("in_use").Value(),
								"limit":    gigabytes.Get("limit").Value(),
								"reserved": gigabytes.Get("reserved").Value(),
							}
						},
					),
					"gigabytes_sas": schemas.SliceToList(quotaSet.Get("gigabytes_SAS"),
						func(gigabytesSas gjson.Result) any {
							return map[string]any{
								"in_use":   gigabytesSas.Get("in_use").Value(),
								"limit":    gigabytesSas.Get("limit").Value(),
								"reserved": gigabytesSas.Get("reserved").Value(),
							}
						},
					),
					"volumes_sas": schemas.SliceToList(quotaSet.Get("volumes_SAS"),
						func(volumesSas gjson.Result) any {
							return map[string]any{
								"in_use":   volumesSas.Get("in_use").Value(),
								"limit":    volumesSas.Get("limit").Value(),
								"reserved": volumesSas.Get("reserved").Value(),
							}
						},
					),
					"gigabytes_ssd": schemas.SliceToList(quotaSet.Get("gigabytes_SSD"),
						func(gigabytesSsd gjson.Result) any {
							return map[string]any{
								"in_use":   gigabytesSsd.Get("in_use").Value(),
								"limit":    gigabytesSsd.Get("limit").Value(),
								"reserved": gigabytesSsd.Get("reserved").Value(),
							}
						},
					),
					"gigabytes_gpssd": schemas.SliceToList(quotaSet.Get("gigabytes_GPSSD"),
						func(gigabytesGpssd gjson.Result) any {
							return map[string]any{
								"in_use":   gigabytesGpssd.Get("in_use").Value(),
								"limit":    gigabytesGpssd.Get("limit").Value(),
								"reserved": gigabytesGpssd.Get("reserved").Value(),
							}
						},
					),
					"snapshots_gpssd": schemas.SliceToList(quotaSet.Get("snapshots_GPSSD"),
						func(snapshotsGpssd gjson.Result) any {
							return map[string]any{
								"in_use":   snapshotsGpssd.Get("in_use").Value(),
								"limit":    snapshotsGpssd.Get("limit").Value(),
								"reserved": snapshotsGpssd.Get("reserved").Value(),
							}
						},
					),
					"per_volume_gigabytes": schemas.SliceToList(quotaSet.Get("per_volume_gigabytes"),
						func(perVolumeGigabytes gjson.Result) any {
							return map[string]any{
								"in_use":   perVolumeGigabytes.Get("in_use").Value(),
								"limit":    perVolumeGigabytes.Get("limit").Value(),
								"reserved": perVolumeGigabytes.Get("reserved").Value(),
							}
						},
					),
					"id": quotaSet.Get("id").Value(),
					"snapshots": schemas.SliceToList(quotaSet.Get("snapshots"),
						func(snapshots gjson.Result) any {
							return map[string]any{
								"in_use":   snapshots.Get("in_use").Value(),
								"limit":    snapshots.Get("limit").Value(),
								"reserved": snapshots.Get("reserved").Value(),
							}
						},
					),
					"volumes_essd": schemas.SliceToList(quotaSet.Get("volumes_ESSD"),
						func(volumesEssd gjson.Result) any {
							return map[string]any{
								"in_use":   volumesEssd.Get("in_use").Value(),
								"limit":    volumesEssd.Get("limit").Value(),
								"reserved": volumesEssd.Get("reserved").Value(),
							}
						},
					),
					"gigabytes_essd": schemas.SliceToList(quotaSet.Get("gigabytes_ESSD"),
						func(gigabytesEssd gjson.Result) any {
							return map[string]any{
								"in_use":   gigabytesEssd.Get("in_use").Value(),
								"limit":    gigabytesEssd.Get("limit").Value(),
								"reserved": gigabytesEssd.Get("reserved").Value(),
							}
						},
					),
					"snapshots_essd": schemas.SliceToList(quotaSet.Get("snapshots_ESSD"),
						func(snapshotsEssd gjson.Result) any {
							return map[string]any{
								"in_use":   snapshotsEssd.Get("in_use").Value(),
								"limit":    snapshotsEssd.Get("limit").Value(),
								"reserved": snapshotsEssd.Get("reserved").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
