package hss

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/services/acceptance"
)

func TestAccDataSourceVulnerabilityHosts_basic(t *testing.T) {
	var (
		dataSource = "data.huaweicloud_hss_vulnerability_hosts.test"
		dc         = acceptance.InitDataSourceCheck(dataSource)
	)

	resource.ParallelTest(t, resource.TestCase{
		PreCheck: func() {
			acceptance.TestAccPreCheck(t)
			// This test case requires setting a host ID with host protection enabled.
			acceptance.TestAccPreCheckHSSHostProtectionHostId(t)
			acceptance.TestAccPreCheckHSSVulnerabilityId(t)
		},
		ProviderFactories: acceptance.TestAccProviderFactories,
		Steps: []resource.TestStep{

			{
				Config: testAccDataSourceVulnerabilityHosts_basic(),
				Check: resource.ComposeTestCheckFunc(
					dc.CheckResourceExists(),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.#"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.host_id"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.host_name"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.severity_level"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.agent_id"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.version"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.status"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.repair_cmd"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.private_ip"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.os_type"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.asset_value"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.is_affect_business"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.first_scan_time"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.scan_time"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.support_restore"),
					resource.TestCheckResourceAttrSet(dataSource, "data_list.0.repair_priority"),

					resource.TestCheckOutput("is_status_filter_useful", "true"),
					resource.TestCheckOutput("is_asset_value_filter_useful", "true"),
					resource.TestCheckOutput("is_handle_status_filter_useful", "true"),
					resource.TestCheckOutput("is_severity_level_filter_useful", "true"),
					resource.TestCheckOutput("is_repair_priority_filter_useful", "true"),
					resource.TestCheckOutput("is_eps_filter_useful", "true"),
				),
			},
		},
	})
}

func testAccDataSourceVulnerabilityHosts_basic() string {
	return fmt.Sprintf(`
data "huaweicloud_hss_vulnerability_hosts" "test" {
  vul_id = "%[1]s"
  type   = "linux_vul"
}

locals {
  status = data.huaweicloud_hss_vulnerability_hosts.test.data_list[0].status
}	

data "huaweicloud_hss_vulnerability_hosts" "status_filter" {
  vul_id  = "%[1]s"
  type    = "linux_vul"
  status  = local.status
}

output "is_status_filter_useful" {
  value = length(data.huaweicloud_hss_vulnerability_hosts.status_filter.data_list) > 0 && alltrue(
    [for v in data.huaweicloud_hss_vulnerability_hosts.status_filter.data_list[*].status : v == local.status]
  )
}

locals {
  asset_value = data.huaweicloud_hss_vulnerability_hosts.test.data_list[0].asset_value
}

data "huaweicloud_hss_vulnerability_hosts" "asset_value_filter" {
  vul_id      = "%[1]s"
  type        = "linux_vul"
  asset_value = local.asset_value
}

output "is_asset_value_filter_useful" {
  value = length(data.huaweicloud_hss_vulnerability_hosts.asset_value_filter.data_list) > 0 && alltrue(
    [for v in data.huaweicloud_hss_vulnerability_hosts.asset_value_filter.data_list[*].asset_value : v == local.asset_value]
  )
}

data "huaweicloud_hss_vulnerability_hosts" "handle_status_filter" {
  vul_id        = "%[1]s"
  type          = "linux_vul"
  handle_status = "unhandled"
}

output "is_handle_status_filter_useful" {
  value = length(data.huaweicloud_hss_vulnerability_hosts.handle_status_filter.data_list) > 0
}

locals {
  severity_level = data.huaweicloud_hss_vulnerability_hosts.test.data_list[0].severity_level
}

data "huaweicloud_hss_vulnerability_hosts" "severity_level_filter" {
  vul_id         = "%[1]s"
  type           = "linux_vul"
  severity_level = local.severity_level
}

output "is_severity_level_filter_useful" {
  value = length(data.huaweicloud_hss_vulnerability_hosts.severity_level_filter.data_list) > 0 && alltrue(
    [for v in data.huaweicloud_hss_vulnerability_hosts.severity_level_filter.data_list[*].severity_level : v == local.severity_level]
  )
}

locals {
  repair_priority = data.huaweicloud_hss_vulnerability_hosts.test.data_list[0].repair_priority
}

data "huaweicloud_hss_vulnerability_hosts" "repair_priority_filter" {
  vul_id          = "%[1]s"
  type            = "linux_vul"
  repair_priority = local.repair_priority
}

output "is_repair_priority_filter_useful" {
  value = length(data.huaweicloud_hss_vulnerability_hosts.repair_priority_filter.data_list) > 0 && alltrue(
    [for v in data.huaweicloud_hss_vulnerability_hosts.repair_priority_filter.data_list[*].repair_priority : v == local.repair_priority]
  )
}

data "huaweicloud_hss_vulnerability_hosts" "eps_filter" {
  vul_id                = "%[1]s"
  type                  = "linux_vul"
  enterprise_project_id = "all_granted_eps"
}

output "is_eps_filter_useful" {
  value = length(data.huaweicloud_hss_vulnerability_hosts.eps_filter.data_list) > 0
}
`, acceptance.HW_HSS_VUL_ID)
}
