// Generated by PMS #590
package cce

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCceAddons() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCceAddonsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the cluster to which the add-on instance belongs.`,
			},
			"items": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The add-on instance list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"metadata": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The metadata of the add-on instance.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"uid": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The add-on instance ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The add-on instance name.`,
									},
									"alias": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The add-on instance alias.`,
									},
									"labels": {
										Type:        schema.TypeMap,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The add-on labels in key/value pairs.`,
									},
									"annotations": {
										Type:        schema.TypeMap,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The add-on annotations in the format of key/value pairs.`,
									},
									"update_timestamp": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The update time.`,
									},
									"creation_timestamp": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The creation time.`,
									},
								},
							},
						},
						"spec": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The detailed description of the add-on instance.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"addon_template_labels": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The labels of the add-on template.`,
									},
									"description": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The add-on description.`,
									},
									"values": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The add-on installation parameters.`,
									},
									"cluster_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The cluster ID.`,
									},
									"version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The add-on version.`,
									},
									"addon_template_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The add-on name.`,
									},
									"addon_template_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The add-on type.`,
									},
									"addon_template_logo": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The URL for obtaining the add-on template logo.`,
									},
								},
							},
						},
						"status": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The add-on instance status.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"current_version": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The information about the current add-on version.`,
										Elem:        itemsStatusCurrentVersionElem(),
									},
									"is_rollbackable": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Whether the add-on version can be rolled back to the source version.`,
									},
									"previous_version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The add-on version before upgrade or rollback`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The statuses of add-on instances.`,
									},
									"_reason": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The cause of the add-on installation failure.`,
									},
									"message": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The installation error details.`,
									},
									"target_versions": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The versions to which the current add-on version can be upgraded.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// itemsStatusCurrentVersionElem
// The Elem of "items.status.current_version"
func itemsStatusCurrentVersionElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"input": {
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `The add-on installation parameters.`,
			},
			"stable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether the add-on version is a stable release.`,
			},
			"translate": {
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `The translation information used by the GUI.`,
			},
			"support_versions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The cluster versions that support the add-on.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cluster_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster type that supports the add-on.`,
						},
						"cluster_version": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The cluster versions that support the add-on. The value is a regular expression.`,
						},
						"category": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The current support version category.`,
						},
					},
				},
			},
			"creation_timestamp": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The creation time.`,
			},
			"update_timestamp": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The update time.`,
			},
			"version": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The add-on version.`,
			},
		},
	}
}

type AddonsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAddonsDSWrapper(d *schema.ResourceData, meta interface{}) *AddonsDSWrapper {
	return &AddonsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCceAddonsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAddonsDSWrapper(d, meta)
	lisAddInsRst, err := wrapper.ListAddonInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAddonInstancesToSchema(lisAddInsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CCE GET /api/v3/addons
func (w *AddonsDSWrapper) ListAddonInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cce")
	if err != nil {
		return nil, err
	}

	uri := "/api/v3/addons"
	params := map[string]any{
		"cluster_id": w.Get("cluster_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *AddonsDSWrapper) listAddonInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("items", schemas.SliceToList(body.Get("items"),
			func(items gjson.Result) any {
				return map[string]any{
					"metadata": schemas.SliceToList(items.Get("metadata"),
						func(metadata gjson.Result) any {
							return map[string]any{
								"uid":                metadata.Get("uid").Value(),
								"name":               metadata.Get("name").Value(),
								"alias":              metadata.Get("alias").Value(),
								"labels":             schemas.MapToStrMap(metadata.Get("labels")),
								"annotations":        schemas.MapToStrMap(metadata.Get("annotations")),
								"update_timestamp":   metadata.Get("updateTimestamp").Value(),
								"creation_timestamp": metadata.Get("creationTimestamp").Value(),
							}
						},
					),
					"spec": schemas.SliceToList(items.Get("spec"),
						func(spec gjson.Result) any {
							return map[string]any{
								"addon_template_labels": schemas.SliceToStrList(spec.Get("addonTemplateLabels")),
								"description":           spec.Get("description").Value(),
								"values":                schemas.SliceToStrList(spec.Get("values")),
								"cluster_id":            spec.Get("clusterID").Value(),
								"version":               spec.Get("version").Value(),
								"addon_template_name":   spec.Get("addonTemplateName").Value(),
								"addon_template_type":   spec.Get("addonTemplateType").Value(),
								"addon_template_logo":   spec.Get("addonTemplateLogo").Value(),
							}
						},
					),
					"status": schemas.SliceToList(items.Get("status"),
						func(status gjson.Result) any {
							return map[string]any{
								"current_version":  w.setIteStaCurVersion(status),
								"is_rollbackable":  status.Get("isRollbackable").Value(),
								"previous_version": status.Get("previousVersion").Value(),
								"status":           status.Get("status").Value(),
								"_reason":          status.Get("Reason").Value(),
								"message":          status.Get("message").Value(),
								"target_versions":  schemas.SliceToStrList(status.Get("targetVersions")),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AddonsDSWrapper) setIteStaCurVersion(status gjson.Result) any {
	return schemas.SliceToList(status.Get("currentVersion"), func(currentVersion gjson.Result) any {
		return map[string]any{
			"input":     schemas.SliceToStrList(currentVersion.Get("input")),
			"stable":    currentVersion.Get("stable").Value(),
			"translate": schemas.SliceToStrList(currentVersion.Get("translate")),
			"support_versions": schemas.SliceToList(currentVersion.Get("supportVersions"),
				func(supportVersions gjson.Result) any {
					return map[string]any{
						"cluster_type":    supportVersions.Get("clusterType").Value(),
						"cluster_version": schemas.SliceToStrList(supportVersions.Get("clusterVersion")),
						"category":        schemas.SliceToStrList(supportVersions.Get("category")),
					}
				},
			),
			"creation_timestamp": currentVersion.Get("creationTimestamp").Value(),
			"update_timestamp":   currentVersion.Get("updateTimestamp").Value(),
			"version":            currentVersion.Get("version").Value(),
		}
	})
}
