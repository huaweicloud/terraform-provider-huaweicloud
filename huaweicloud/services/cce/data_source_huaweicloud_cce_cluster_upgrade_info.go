// Generated by PMS #779
package cce

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCceClusterUpgradeInfo() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCceClusterUpgradeInfoRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the cluster ID.`,
			},
			"metadata": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Basic information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"annotations": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Resource annotations.`,
						},
						"creation_timestamp": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Creation time`,
						},
						"labels": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Resource tags.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Resource name.`,
						},
						"uid": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Unique ID identifier.`,
						},
						"update_timestamp": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Update time.`,
						},
					},
				},
			},
			"spec": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Upgrade configuration related information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"last_upgrade_info": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Last cluster upgrade information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"completion_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Upgrade task end time.`,
									},
									"phase": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Upgrade task status.`,
									},
									"progress": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Upgrade task progress.`,
									},
								},
							},
						},
						"upgrade_feature_gates": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Cluster upgrade feature flags.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"support_upgrade_page_v4": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Whether the cluster upgrade console supports V4 version.`,
									},
								},
							},
						},
						"version_info": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Version information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"patch": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Patch version number, e.g. r0`,
									},
									"release": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Formal version number, e.g. v1.19.10`,
									},
									"suggest_patch": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Recommended target patch version for upgrade, e.g. r0`,
									},
									"target_versions": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Target versions for upgrade.`,
									},
								},
							},
						},
					},
				},
			},
			"status": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Upgrade status information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"completion_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Upgrade task end time.`,
						},
						"phase": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Upgrade task status.`,
						},
						"progress": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Upgrade task progress.`,
						},
					},
				},
			},
		},
	}
}

type ClusterUpgradeInfoDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newClusterUpgradeInfoDSWrapper(d *schema.ResourceData, meta interface{}) *ClusterUpgradeInfoDSWrapper {
	return &ClusterUpgradeInfoDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCceClusterUpgradeInfoRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newClusterUpgradeInfoDSWrapper(d, meta)
	shoCluUpgInfRst, err := wrapper.ShowClusterUpgradeInfo()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showClusterUpgradeInfoToSchema(shoCluUpgInfRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CCE GET /api/v3/projects/{project_id}/clusters/{cluster_id}/upgradeinfo
func (w *ClusterUpgradeInfoDSWrapper) ShowClusterUpgradeInfo() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cce")
	if err != nil {
		return nil, err
	}

	uri := "/api/v3/projects/{project_id}/clusters/{cluster_id}/upgradeinfo"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *ClusterUpgradeInfoDSWrapper) showClusterUpgradeInfoToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("metadata", schemas.ObjectToList(body.Get("metadata"),
			func(metadata gjson.Result) any {
				return map[string]any{
					"annotations":        metadata.Get("annotations").Value(),
					"creation_timestamp": metadata.Get("creationTimestamp").Value(),
					"labels":             metadata.Get("labels").Value(),
					"name":               metadata.Get("name").Value(),
					"uid":                metadata.Get("uid").Value(),
					"update_timestamp":   metadata.Get("updateTimestamp").Value(),
				}
			},
		)),
		d.Set("spec", schemas.ObjectToList(body.Get("spec"),
			func(spec gjson.Result) any {
				return map[string]any{
					"last_upgrade_info": schemas.SliceToList(spec.Get("lastUpgradeInfo"),
						func(lastUpgradeInfo gjson.Result) any {
							return map[string]any{
								"completion_time": lastUpgradeInfo.Get("completionTime").Value(),
								"phase":           lastUpgradeInfo.Get("phase").Value(),
								"progress":        lastUpgradeInfo.Get("progress").Value(),
							}
						},
					),
					"upgrade_feature_gates": schemas.SliceToList(spec.Get("upgradeFeatureGates"),
						func(upgradeFeatureGates gjson.Result) any {
							return map[string]any{
								"support_upgrade_page_v4": upgradeFeatureGates.Get("supportUpgradePageV4").Value(),
							}
						},
					),
					"version_info": schemas.SliceToList(spec.Get("versionInfo"),
						func(versionInfo gjson.Result) any {
							return map[string]any{
								"patch":           versionInfo.Get("patch").Value(),
								"release":         versionInfo.Get("release").Value(),
								"suggest_patch":   versionInfo.Get("suggestPatch").Value(),
								"target_versions": schemas.SliceToStrList(versionInfo.Get("targetVersions")),
							}
						},
					),
				}
			},
		)),
		d.Set("status", schemas.ObjectToList(body.Get("status"),
			func(status gjson.Result) any {
				return map[string]any{
					"completion_time": status.Get("completionTime").Value(),
					"phase":           status.Get("phase").Value(),
					"progress":        status.Get("progress").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
