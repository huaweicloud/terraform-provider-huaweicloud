// Generated by PMS #893
package vpn

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceVpnGatewayRouteTables() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpnGatewayRouteTablesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"vgw_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies a VPN gateway ID.`,
			},
			"is_include_nexthop_resource": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Specifies whether to include the nexthop resource.`,
			},
			"routing_table": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the route table of a specified VPN gateway.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"destination": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the destination address of a route.`,
						},
						"nexthop": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the next-hop IP address.`,
						},
						"outbound_interface_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the IP address of the outbound interface.`,
						},
						"origin": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the origin of a BGP route.`,
						},
						"as_path": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the AS path of a BGP route.`,
						},
						"med": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the MED value of a BGP route.`,
						},
						"nexthop_resource": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the next hop resource of a route.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the next-hop resource ID, which is in UUID format.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the next-hop resource type.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type GatewayRouteTablesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newGatewayRouteTablesDSWrapper(d *schema.ResourceData, meta interface{}) *GatewayRouteTablesDSWrapper {
	return &GatewayRouteTablesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpnGatewayRouteTablesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newGatewayRouteTablesDSWrapper(d, meta)
	shoVpnGatRouTabRst, err := wrapper.ShowVpnGatewayRoutingTable()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.showVpnGatewayRoutingTableToSchema(shoVpnGatRouTabRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API VPN GET /v5/{project_id}/vpn-gateways/{vgw_id}/routing-table
func (w *GatewayRouteTablesDSWrapper) ShowVpnGatewayRoutingTable() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpn")
	if err != nil {
		return nil, err
	}

	uri := "/v5/{project_id}/vpn-gateways/{vgw_id}/routing-table"
	uri = strings.ReplaceAll(uri, "{vgw_id}", w.Get("vgw_id").(string))
	params := map[string]any{
		"is_include_nexthop_resource": w.Get("is_include_nexthop_resource"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("routing_table", "offset", "limit", 0).
		Request().
		Result()
}

func (w *GatewayRouteTablesDSWrapper) showVpnGatewayRoutingTableToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("routing_table", schemas.SliceToList(body.Get("routing_table"),
			func(routingTable gjson.Result) any {
				return map[string]any{
					"destination":           routingTable.Get("destination").Value(),
					"nexthop":               routingTable.Get("nexthop").Value(),
					"outbound_interface_ip": routingTable.Get("outbound_interface_ip").Value(),
					"origin":                routingTable.Get("origin").Value(),
					"as_path":               routingTable.Get("as_path").Value(),
					"med":                   routingTable.Get("med").Value(),
					"nexthop_resource": schemas.SliceToList(routingTable.Get("nexthop_resource"),
						func(nexthopResource gjson.Result) any {
							return map[string]any{
								"id":   nexthopResource.Get("id").Value(),
								"type": nexthopResource.Get("type").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
