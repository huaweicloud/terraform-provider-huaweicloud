// Generated by PMS #369
package vpn

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceVpnP2cGatewayAvailabilityZones() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpnP2cGatewayAvailabilityZonesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"flavor": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies a flavor. The value can be **Professional1**.`,
			},
			"availability_zones": {
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `The list of availability zones.`,
			},
		},
	}
}

type P2cGatewayAvailabilityZonesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newP2cGatewayAvailabilityZonesDSWrapper(d *schema.ResourceData, meta interface{}) *P2cGatewayAvailabilityZonesDSWrapper {
	return &P2cGatewayAvailabilityZonesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpnP2cGatewayAvailabilityZonesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newP2cGatewayAvailabilityZonesDSWrapper(d, meta)
	lisP2cVgwAvaZonRst, err := wrapper.ListP2cVgwAvailabilityZones()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listP2cVgwAvailabilityZonesToSchema(lisP2cVgwAvaZonRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API VPN GET /v5/{project_id}/p2c-vpn-gateways/availability-zones
func (w *P2cGatewayAvailabilityZonesDSWrapper) ListP2cVgwAvailabilityZones() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpn")
	if err != nil {
		return nil, err
	}

	uri := "/v5/{project_id}/p2c-vpn-gateways/availability-zones"
	params := map[string]any{
		"flavor": w.Get("flavor"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *P2cGatewayAvailabilityZonesDSWrapper) listP2cVgwAvailabilityZonesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("availability_zones", body.Get("availability_zones").Value()),
	)
	return mErr.ErrorOrNil()
}
