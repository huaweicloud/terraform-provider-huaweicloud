// Generated by PMS #367
package vpn

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceVpnP2cGateways() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpnP2cGatewaysRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"p2c_vpn_gateways": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The VPN P2C gateway List.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of a VPN P2C gateway.`,
						},
						"flavor": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The specification of a VPN P2C gateway.`,
						},
						"frozen_effect": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Whether a VPN P2C gateway can be deleted after being frozen.`,
						},
						"connect_subnet": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the VPC subnet used by a VPN P2C gateway.`,
						},
						"eip": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The EIP information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The EIP ID.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The EIP type.`,
									},
									"ip_address": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `A public IPv4 address.`,
									},
									"charge_mode": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The billing mode of EIP bandwidth.`,
									},
									"share_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The bandwidth share type.`,
									},
									"ip_version": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The EIP version.`,
									},
									"ip_billing_info": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The EIP order information.`,
									},
									"bandwidth_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The bandwidth ID.`,
									},
									"bandwidth_size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The bandwidth size.`,
									},
									"bandwidth_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The bandwidth name.`,
									},
									"bandwidth_billing_info": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The bandwidth order information.`,
									},
								},
							},
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID.`,
						},
						"tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The tag list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The tag key.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The tag value.`,
									},
								},
							},
						},
						"availability_zone_ids": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The list of availability zone ID.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"current_connection_number": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of current client connections.`,
						},
						"order_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The order ID.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a VPN P2C gateway.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of a VPN P2C gateway.`,
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the VPC to which a VPN P2C gateway connects.`,
						},
						"max_connection_number": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The maximum number of concurrent client connections.`,
						},
					},
				},
			},
		},
	}
}

type P2cGatewaysDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newVpnP2cGatewaysDSWrapper(d *schema.ResourceData, meta interface{}) *P2cGatewaysDSWrapper {
	return &P2cGatewaysDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpnP2cGatewaysRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newVpnP2cGatewaysDSWrapper(d, meta)
	listP2cVgwsRst, err := wrapper.ListP2cVgws()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listP2cVgwsToSchema(listP2cVgwsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API VPN GET /v5/{project_id}/p2c-vpn-gateways
func (w *P2cGatewaysDSWrapper) ListP2cVgws() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpn")
	if err != nil {
		return nil, err
	}

	uri := "/v5/{project_id}/p2c-vpn-gateways"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *P2cGatewaysDSWrapper) listP2cVgwsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("p2c_vpn_gateways", schemas.SliceToList(body.Get("p2c_vpn_gateways"),
			func(p2cVpnGateways gjson.Result) any {
				return map[string]any{
					"id":                    p2cVpnGateways.Get("id").Value(),
					"name":                  p2cVpnGateways.Get("name").Value(),
					"status":                p2cVpnGateways.Get("status").Value(),
					"vpc_id":                p2cVpnGateways.Get("vpc_id").Value(),
					"connect_subnet":        p2cVpnGateways.Get("connect_subnet").Value(),
					"flavor":                p2cVpnGateways.Get("flavor").Value(),
					"availability_zone_ids": schemas.SliceToStrList(p2cVpnGateways.Get("availability_zone_ids")),
					"eip": schemas.SliceToList(p2cVpnGateways.Get("eip"),
						func(eip gjson.Result) any {
							return map[string]any{
								"id":                     eip.Get("id").Value(),
								"type":                   eip.Get("type").Value(),
								"ip_address":             eip.Get("ip_address").Value(),
								"charge_mode":            eip.Get("charge_mode").Value(),
								"share_type":             eip.Get("share_type").Value(),
								"ip_version":             eip.Get("ip_version").Value(),
								"ip_billing_info":        eip.Get("ip_billing_info").Value(),
								"bandwidth_id":           eip.Get("bandwidth_id").Value(),
								"bandwidth_size":         eip.Get("bandwidth_size").Value(),
								"bandwidth_name":         eip.Get("bandwidth_name").Value(),
								"bandwidth_billing_info": eip.Get("bandwidth_billing_info").Value(),
							}
						},
					),
					"current_connection_number": p2cVpnGateways.Get("current_connection_number").Value(),
					"max_connection_number":     p2cVpnGateways.Get("max_connection_number").Value(),
					"enterprise_project_id":     p2cVpnGateways.Get("enterprise_project_id").Value(),
					"tags": schemas.SliceToList(p2cVpnGateways.Get("tags"),
						func(tags gjson.Result) any {
							return map[string]any{
								"key":   tags.Get("key").Value(),
								"value": tags.Get("value").Value(),
							}
						},
					),
					"order_id":      p2cVpnGateways.Get("order_id").Value(),
					"frozen_effect": p2cVpnGateways.Get("frozen_effect").Value(),
					"created_at":    p2cVpnGateways.Get("created_at").Value(),
					"updated_at":    p2cVpnGateways.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
