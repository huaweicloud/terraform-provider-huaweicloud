// Generated by PMS #371
package vpn

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceVpnServers() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpnServersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"vpn_servers": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The VPN server list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"p2c_vgw_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a P2C VPN gateway.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The server ID.`,
						},
						"client_auth_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The client authentication mode.`,
						},
						"tunnel_protocol": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `A tunnel protocol.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The server status.`,
						},
						"local_subnets": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The local CIDR block list.`,
						},
						"server_certificate": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The server certificate information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The server certificate ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The server certificate name.`,
									},
									"serial_number": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The serial number of the server certificate.`,
									},
									"expiration_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The expiration time of the server certificate.`,
									},
									"signature_algorithm": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The signature algorithm of the server certificate.`,
									},
									"issuer": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The issuer of the server certificate.`,
									},
									"subject": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The subject of the server certificate.`,
									},
								},
							},
						},
						"client_ca_certificates": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The client CA certificate information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The client CA certificate ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the client CA certificate.`,
									},
									"issuer": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The issuer of the client CA certificate.`,
									},
									"signature_algorithm": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The signature algorithm of the client CA certificate.`,
									},
									"subject": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The subject of the client CA certificate.`,
									},
									"serial_number": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The serial number of the client CA certificate.`,
									},
									"expiration_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The expiration time of the client CA certificate.`,
									},
									"created_at": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The creation time of the client CA certificate.`,
									},
									"updated_at": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The update time of the client CA certificate.`,
									},
								},
							},
						},
						"ssl_options": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The SSL options information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"protocol": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The protocol.`,
									},
									"port": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The port.`,
									},
									"is_compressed": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Whether compression is enabled.`,
									},
									"encryption_algorithm": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The encryption algorithm.`,
									},
									"authentication_algorithm": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The authentication algorithm.`,
									},
								},
							},
						},
						"client_cidr": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The client CIDR block.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
					},
				},
			},
		},
	}
}

type ServersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newServersDSWrapper(d *schema.ResourceData, meta interface{}) *ServersDSWrapper {
	return &ServersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpnServersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newServersDSWrapper(d, meta)
	lisVpnSerByProRst, err := wrapper.ListVpnServersByProject()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listVpnServersByProjectToSchema(lisVpnSerByProRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API VPN GET /v5/{project_id}/vpn-servers
func (w *ServersDSWrapper) ListVpnServersByProject() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpn")
	if err != nil {
		return nil, err
	}

	uri := "/v5/{project_id}/vpn-servers"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *ServersDSWrapper) listVpnServersByProjectToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("vpn_servers", schemas.SliceToList(body.Get("vpn_servers"),
			func(vpnServers gjson.Result) any {
				return map[string]any{
					"p2c_vgw_id":       vpnServers.Get("p2c_vgw_id").Value(),
					"id":               vpnServers.Get("id").Value(),
					"client_auth_type": vpnServers.Get("client_auth_type").Value(),
					"tunnel_protocol":  vpnServers.Get("tunnel_protocol").Value(),
					"status":           vpnServers.Get("status").Value(),
					"local_subnets":    schemas.SliceToStrList(vpnServers.Get("local_subnets")),
					"server_certificate": schemas.SliceToList(vpnServers.Get("server_certificate"),
						func(serverCertificate gjson.Result) any {
							return map[string]any{
								"id":                  serverCertificate.Get("id").Value(),
								"name":                serverCertificate.Get("name").Value(),
								"serial_number":       serverCertificate.Get("serial_number").Value(),
								"expiration_time":     serverCertificate.Get("expiration_time").Value(),
								"signature_algorithm": serverCertificate.Get("signature_algorithm").Value(),
								"issuer":              serverCertificate.Get("issuer").Value(),
								"subject":             serverCertificate.Get("subject").Value(),
							}
						},
					),
					"client_ca_certificates": schemas.SliceToList(vpnServers.Get("client_ca_certificates"),
						func(clientCaCertificates gjson.Result) any {
							return map[string]any{
								"id":                  clientCaCertificates.Get("id").Value(),
								"name":                clientCaCertificates.Get("name").Value(),
								"issuer":              clientCaCertificates.Get("issuer").Value(),
								"signature_algorithm": clientCaCertificates.Get("signature_algorithm").Value(),
								"subject":             clientCaCertificates.Get("subject").Value(),
								"serial_number":       clientCaCertificates.Get("serial_number").Value(),
								"expiration_time":     clientCaCertificates.Get("expiration_time").Value(),
								"created_at":          clientCaCertificates.Get("created_at").Value(),
								"updated_at":          clientCaCertificates.Get("updated_at").Value(),
							}
						},
					),
					"ssl_options": schemas.SliceToList(vpnServers.Get("ssl_options"),
						func(sslOptions gjson.Result) any {
							return map[string]any{
								"protocol":                 sslOptions.Get("protocol").Value(),
								"port":                     sslOptions.Get("port").Value(),
								"is_compressed":            sslOptions.Get("is_compressed").Value(),
								"encryption_algorithm":     sslOptions.Get("encryption_algorithm").Value(),
								"authentication_algorithm": sslOptions.Get("authentication_algorithm").Value(),
							}
						},
					),
					"client_cidr": vpnServers.Get("client_cidr").Value(),
					"created_at":  vpnServers.Get("created_at").Value(),
					"updated_at":  vpnServers.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
