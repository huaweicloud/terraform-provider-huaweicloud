// Generated by PMS #409
package vpn

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceVpnP2cGatewayConnections() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpnP2cGatewayConnectionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"p2c_gateway_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of a P2C VPN gateway instance.`,
			},
			"connections": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The connection list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"connection_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The connection ID.`,
						},
						"client_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The IP address of a client.`,
						},
						"client_user_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The username of a client.`,
						},
						"inbound_packets": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of inbound packets.`,
						},
						"inbound_bytes": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of inbound bytes.`,
						},
						"outbound_packets": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of outbound packets.`,
						},
						"outbound_bytes": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of outbound bytes.`,
						},
						"client_virtual_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The virtual IP address of a client.`,
						},
						"connection_established_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a connection is established.`,
						},
						"timestamp": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The timestamp.`,
						},
					},
				},
			},
		},
	}
}

type P2cGatewayConnectionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newP2cGatewayConnectionsDSWrapper(d *schema.ResourceData, meta interface{}) *P2cGatewayConnectionsDSWrapper {
	return &P2cGatewayConnectionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpnP2cGatewayConnectionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newP2cGatewayConnectionsDSWrapper(d, meta)
	lisP2cVgwConRst, err := wrapper.ListP2cVgwConnections()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listP2cVgwConnectionsToSchema(lisP2cVgwConRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API VPN GET /v5/{project_id}/p2c-vpn-gateways/{p2c_vgw_id}/connections
func (w *P2cGatewayConnectionsDSWrapper) ListP2cVgwConnections() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpn")
	if err != nil {
		return nil, err
	}

	uri := "/v5/{project_id}/p2c-vpn-gateways/{p2c_vgw_id}/connections"
	uri = strings.ReplaceAll(uri, "{p2c_vgw_id}", w.Get("p2c_gateway_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("connections", "offset", "limit", 100).
		Request().
		Result()
}

func (w *P2cGatewayConnectionsDSWrapper) listP2cVgwConnectionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("connections", schemas.SliceToList(body.Get("connections"),
			func(connections gjson.Result) any {
				return map[string]any{
					"connection_id":               connections.Get("connection_id").Value(),
					"client_ip":                   connections.Get("client_ip").Value(),
					"client_user_name":            connections.Get("client_user_name").Value(),
					"inbound_packets":             connections.Get("inbound_packets").Value(),
					"inbound_bytes":               connections.Get("inbound_bytes").Value(),
					"outbound_packets":            connections.Get("outbound_packets").Value(),
					"outbound_bytes":              connections.Get("outbound_bytes").Value(),
					"client_virtual_ip":           connections.Get("client_virtual_ip").Value(),
					"connection_established_time": connections.Get("connection_established_time").Value(),
					"timestamp":                   connections.Get("timestamp").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
