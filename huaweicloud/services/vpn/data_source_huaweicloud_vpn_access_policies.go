// Generated by PMS #392
package vpn

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceVpnAccessPolicies() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpnAccessPoliciesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"vpn_server_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of a VPN server.`,
			},
			"access_policies": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The VPN access policy list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of an access policy.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of an access policy.`,
						},
						"dest_ip_cidrs": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The destination CIDR block list.`,
						},
						"user_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the associated user group.`,
						},
						"user_group_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the associated user group.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The access policy description.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
					},
				},
			},
		},
	}
}

type AccessPoliciesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAccessPoliciesDSWrapper(d *schema.ResourceData, meta interface{}) *AccessPoliciesDSWrapper {
	return &AccessPoliciesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpnAccessPoliciesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAccessPoliciesDSWrapper(d, meta)
	lisVpnAccPolRst, err := wrapper.ListVpnAccessPolicies()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listVpnAccessPoliciesToSchema(lisVpnAccPolRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API VPN GET /v5/{project_id}/p2c-vpn-gateways/vpn-servers/{vpn_server_id}/access-policies
func (w *AccessPoliciesDSWrapper) ListVpnAccessPolicies() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpn")
	if err != nil {
		return nil, err
	}

	uri := "/v5/{project_id}/p2c-vpn-gateways/vpn-servers/{vpn_server_id}/access-policies"
	uri = strings.ReplaceAll(uri, "{vpn_server_id}", w.Get("vpn_server_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		MarkerPager("access_policies", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *AccessPoliciesDSWrapper) listVpnAccessPoliciesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("access_policies", schemas.SliceToList(body.Get("access_policies"),
			func(accessPolicies gjson.Result) any {
				return map[string]any{
					"id":              accessPolicies.Get("id").Value(),
					"name":            accessPolicies.Get("name").Value(),
					"dest_ip_cidrs":   schemas.SliceToStrList(accessPolicies.Get("dest_ip_cidrs")),
					"user_group_id":   accessPolicies.Get("user_group_id").Value(),
					"user_group_name": accessPolicies.Get("user_group_name").Value(),
					"description":     accessPolicies.Get("description").Value(),
					"created_at":      accessPolicies.Get("created_at").Value(),
					"updated_at":      accessPolicies.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
