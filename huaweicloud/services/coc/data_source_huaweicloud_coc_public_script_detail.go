// Generated by PMS #783
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCocPublicScriptDetail() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocPublicScriptDetailRead,

		Schema: map[string]*schema.Schema{
			"script_uuid": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the public script UUID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the script name.`,
			},
			"description": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the script description.`,
			},
			"type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the script type.`,
			},
			"content": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the script content.`,
			},
			"script_params": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the script input parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"param_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the parameter name.`,
						},
						"param_value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the parameter value.`,
						},
						"param_description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the parameter description.`,
						},
						"param_order": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the order of parameters.`,
						},
						"sensitive": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether it is a sensitive parameter.`,
						},
					},
				},
			},
			"gmt_created": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the creation time.`,
			},
			"properties": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the script attachment property.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"risk_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the risk level.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the script version number.`,
						},
					},
				},
			},
		},
	}
}

type PublicScriptDetailDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPublicScriptDetailDSWrapper(d *schema.ResourceData, meta interface{}) *PublicScriptDetailDSWrapper {
	return &PublicScriptDetailDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocPublicScriptDetailRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPublicScriptDetailDSWrapper(d, meta)
	getPublicScriptRst, err := wrapper.GetPublicScript()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.getPublicScriptToSchema(getPublicScriptRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/job/public-scripts/{script_uuid}
func (w *PublicScriptDetailDSWrapper) GetPublicScript() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/job/public-scripts/{script_uuid}"
	uri = strings.ReplaceAll(uri, "{script_uuid}", w.Get("script_uuid").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *PublicScriptDetailDSWrapper) getPublicScriptToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("name", body.Get("data.name").Value()),
		d.Set("description", body.Get("data.description").Value()),
		d.Set("type", body.Get("data.type").Value()),
		d.Set("content", body.Get("data.content").Value()),
		d.Set("script_params", schemas.SliceToList(body.Get("data.script_params"),
			func(scriptParams gjson.Result) any {
				return map[string]any{
					"param_name":        scriptParams.Get("param_name").Value(),
					"param_value":       scriptParams.Get("param_value").Value(),
					"param_description": scriptParams.Get("param_description").Value(),
					"param_order":       scriptParams.Get("param_order").Value(),
					"sensitive":         scriptParams.Get("sensitive").Value(),
				}
			},
		)),
		d.Set("gmt_created", body.Get("data.gmt_created").Value()),
		d.Set("properties", schemas.ObjectToList(body.Get("data.properties"),
			func(properties gjson.Result) any {
				return map[string]any{
					"risk_level": properties.Get("risk_level").Value(),
					"version":    properties.Get("version").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
