// Generated by PMS #951
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocChangeSubTickets() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocChangeSubTicketsRead,

		Schema: map[string]*schema.Schema{
			"ticket_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the work order type. The value can be **change**.`,
			},
			"ticket_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the change order ticket id.`,
			},
			"type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the resource type.`,
			},
			"tickets": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the work order details.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"ep_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
						"resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource ID.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource type.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource name.`,
						},
						"cloud_service_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the cloud service name.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the tenant ID.`,
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region ID.`,
						},
						"hosting_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host ID.`,
						},
						"properties_json": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource attribute information.`,
						},
						"tags_json": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource tag information.`,
						},
						"is_deleted": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the change order has been deleted.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the change ticket ID.`,
						},
						"main_ticket_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the primary key ID of the change work order.`,
						},
						"parent_ticket_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the parent work order ID.`,
						},
						"ticket_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the change order work ID.`,
						},
						"real_ticket_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the change order number.`,
						},
						"ticket_path": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the change order work order path.`,
						},
						"target_value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region information of the change order sub-order.`,
						},
						"target_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the change order sub-document type.`,
						},
						"create_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the change order creation time.`,
						},
						"update_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the change order update time.`,
						},
						"creator": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the change order creator.`,
						},
						"operator": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the change order operator.`,
						},
					},
				},
			},
		},
	}
}

type ChangeSubTicketsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newChangeSubTicketsDSWrapper(d *schema.ResourceData, meta interface{}) *ChangeSubTicketsDSWrapper {
	return &ChangeSubTicketsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocChangeSubTicketsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newChangeSubTicketsDSWrapper(d, meta)
	listSubTicketsRst, err := wrapper.ListSubTickets()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSubTicketsToSchema(listSubTicketsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/{ticket_type}/tickets/{ticket_id}/list-sub-tickets
func (w *ChangeSubTicketsDSWrapper) ListSubTickets() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{ticket_type}/tickets/{ticket_id}/list-sub-tickets"
	uri = strings.ReplaceAll(uri, "{ticket_type}", w.Get("ticket_type").(string))
	uri = strings.ReplaceAll(uri, "{ticket_id}", w.Get("ticket_id").(string))
	params := map[string]any{
		"type":  w.Get("type"),
		"limit": 100,
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("data.tickets", "data.tickets[-1].id", "marker").
		Request().
		Result()
}

func (w *ChangeSubTicketsDSWrapper) listSubTicketsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("tickets", schemas.SliceToList(body.Get("data.tickets"),
			func(tickets gjson.Result) any {
				return map[string]any{
					"ep_id":              tickets.Get("ep_id").Value(),
					"resource_id":        tickets.Get("resource_id").Value(),
					"type":               tickets.Get("type").Value(),
					"name":               tickets.Get("name").Value(),
					"cloud_service_name": tickets.Get("provider").Value(),
					"domain_id":          tickets.Get("domain_id").Value(),
					"region_id":          tickets.Get("region_id").Value(),
					"hosting_id":         tickets.Get("hosting_id").Value(),
					"properties_json":    tickets.Get("properties_json").Value(),
					"tags_json":          tickets.Get("tags_json").Value(),
					"is_deleted":         tickets.Get("is_deleted").Value(),
					"id":                 tickets.Get("id").Value(),
					"main_ticket_id":     tickets.Get("main_ticket_id").Value(),
					"parent_ticket_id":   tickets.Get("parent_ticket_id").Value(),
					"ticket_id":          tickets.Get("ticket_id").Value(),
					"real_ticket_id":     tickets.Get("real_ticket_id").Value(),
					"ticket_path":        tickets.Get("ticket_path").Value(),
					"target_value":       tickets.Get("target_value").Value(),
					"target_type":        tickets.Get("target_type").Value(),
					"create_time":        tickets.Get("create_time").Value(),
					"update_time":        tickets.Get("update_time").Value(),
					"creator":            tickets.Get("creator").Value(),
					"operator":           tickets.Get("operator").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
