// Generated by PMS #662
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocResources() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocResourcesRead,

		Schema: map[string]*schema.Schema{
			"cloud_service_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the cloud service name.`,
			},
			"type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the resource type name.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud resource name.`,
			},
			"ep_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the project ID.`,
			},
			"region_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region ID.`,
			},
			"az_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the availability zone ID.`,
			},
			"ip_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the IP type.`,
			},
			"ip": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud resource IP.`,
			},
			"ip_list": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the cloud resource IP list.`,
			},
			"resource_id_list": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the resource ID list.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource status.`,
			},
			"agent_state": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the unified agent status.`,
			},
			"image_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the image name.`,
			},
			"os_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud resource operating system type.`,
			},
			"tag": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the tags for cloud resources. The format of the tag is **key.value**.`,
			},
			"tag_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the tag key of the cloud resource.`,
			},
			"group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the group ID of the cloud resource.`,
			},
			"component_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the component ID of the cloud resource.`,
			},
			"application_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the application ID of the cloud resource.`,
			},
			"cce_cluster_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the CCE cluster ID.`,
			},
			"vpc_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the virtual private cloud ID.`,
			},
			"is_delegated": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Specifies whether the resource is delegated.`,
			},
			"operable": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether the user defined resource can operate the instance.`,
			},
			"is_collected": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Specifies whether it is a favorite.`,
			},
			"flavor_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud resource specification name.`,
			},
			"charging_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the billing type for the cloud server.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the resource list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource ID assigned by the CMDB.`,
						},
						"resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource name.`,
						},
						"ep_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the project ID in OpenStack.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the tenant ID.`,
						},
						"cloud_service_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the cloud service name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource type.`,
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region ID.`,
						},
						"tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the resource tags.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the key of the tag.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the value of the tag.`,
									},
								},
							},
						},
						"properties": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the resource properties.`,
						},
						"ingest_properties": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the ingest attributes of the resource.`,
						},
						"agent_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID assigned by unified agent.`,
						},
						"agent_state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the unified agent status.`,
						},
						"is_delegated": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the resource is delegated.`,
						},
						"operable": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates whether the user defined resource can operate the instance.`,
						},
					},
				},
			},
		},
	}
}

type ResourcesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newsDSWrapper(d *schema.ResourceData, meta interface{}) *ResourcesDSWrapper {
	return &ResourcesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocResourcesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newsDSWrapper(d, meta)
	listResourceRst, err := wrapper.ListResource()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listResourceToSchema(listResourceRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/resources
func (w *ResourcesDSWrapper) ListResource() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resources"
	params := map[string]any{
		"provider":         w.Get("cloud_service_name"),
		"type":             w.Get("type"),
		"resource_id_list": w.ListToArray("resource_id_list"),
		"name":             w.Get("name"),
		"region_id":        w.Get("region_id"),
		"az_id":            w.Get("az_id"),
		"ip_type":          w.Get("ip_type"),
		"ip":               w.Get("ip"),
		"ip_list":          w.Get("ip_list"),
		"status":           w.Get("status"),
		"agent_state":      w.Get("agent_state"),
		"image_name":       w.Get("image_name"),
		"os_type":          w.Get("os_type"),
		"tag":              w.Get("tag"),
		"tag_key":          w.Get("tag_key"),
		"group_id":         w.Get("group_id"),
		"component_id":     w.Get("component_id"),
		"application_id":   w.Get("application_id"),
		"cce_cluster_id":   w.Get("cce_cluster_id"),
		"vpc_id":           w.Get("vpc_id"),
		"ep_id":            w.Get("ep_id"),
		"is_delegated":     w.Get("is_delegated"),
		"project_id":       w.Get("project_id"),
		"operable":         w.Get("operable"),
		"is_collected":     w.Get("is_collected"),
		"flavor_name":      w.Get("flavor_name"),
		"charging_mode":    w.Get("charging_mode"),
		"limit":            100,
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("data", "data[-1].id", "marker").
		Request().
		Result()
}

func (w *ResourcesDSWrapper) listResourceToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"id":                 data.Get("id").Value(),
					"resource_id":        data.Get("resource_id").Value(),
					"name":               data.Get("name").Value(),
					"ep_id":              data.Get("ep_id").Value(),
					"project_id":         data.Get("project_id").Value(),
					"domain_id":          data.Get("domain_id").Value(),
					"cloud_service_name": data.Get("provider").Value(),
					"type":               data.Get("type").Value(),
					"region_id":          data.Get("region_id").Value(),
					"tags": schemas.SliceToList(data.Get("tags"),
						func(tags gjson.Result) any {
							return map[string]any{
								"key":   tags.Get("key").Value(),
								"value": tags.Get("value").Value(),
							}
						},
					),
					"properties":        schemas.MapToStrMap(data.Get("properties")),
					"ingest_properties": schemas.MapToStrMap(data.Get("ingest_properties")),
					"agent_id":          data.Get("agent_id").Value(),
					"agent_state":       data.Get("agent_state").Value(),
					"is_delegated":      data.Get("is_delegated").Value(),
					"operable":          data.Get("operable").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
