// Generated by PMS #938
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCocDiagnosisTaskSummary() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocDiagnosisTaskSummaryRead,

		Schema: map[string]*schema.Schema{
			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the diagnostic task ID.`,
			},
			"status": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the work order execution status.`,
			},
			"region": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the region where the diagnosed instance is located.`,
			},
			"start_time": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the start time.`,
			},
			"instance_summary": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of summary information about the diagnosed instance.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the diagnosed instance.`,
						},
						"instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the instance being diagnosed.`,
						},
						"progress": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the execution progress of the diagnostic task.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the execution status of the diagnostic task.`,
						},
						"normal_item_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of normal diagnostic items of the instance.`,
						},
						"abnormal_item_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of abnormal diagnosis items of the instance.`,
						},
					},
				},
			},
		},
	}
}

type DiagnosisTaskSummaryDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDiagnosisTaskSummaryDSWrapper(d *schema.ResourceData, meta interface{}) *DiagnosisTaskSummaryDSWrapper {
	return &DiagnosisTaskSummaryDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocDiagnosisTaskSummaryRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDiagnosisTaskSummaryDSWrapper(d, meta)
	shoDiaSumRst, err := wrapper.ShowDiagnosisSummary()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showDiagnosisSummaryToSchema(shoDiaSumRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/diagnosis/tasks/{task_id}/summary
func (w *DiagnosisTaskSummaryDSWrapper) ShowDiagnosisSummary() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/diagnosis/tasks/{task_id}/summary"
	uri = strings.ReplaceAll(uri, "{task_id}", w.Get("task_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *DiagnosisTaskSummaryDSWrapper) showDiagnosisSummaryToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("status", body.Get("status").Value()),
		d.Set("region", body.Get("region").Value()),
		d.Set("start_time", body.Get("start_time").Value()),
		d.Set("instance_summary", schemas.SliceToList(body.Get("instance_summary"),
			func(instanceSummary gjson.Result) any {
				return map[string]any{
					"instance_id":       instanceSummary.Get("instance_id").Value(),
					"instance_name":     instanceSummary.Get("instance_name").Value(),
					"progress":          instanceSummary.Get("progress").Value(),
					"status":            instanceSummary.Get("status").Value(),
					"normal_item_num":   instanceSummary.Get("normal_item_num").Value(),
					"abnormal_item_num": instanceSummary.Get("abnormal_item_num").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
