// Generated by PMS #638
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCocScriptOrderBatches() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocScriptOrderBatchesRead,

		Schema: map[string]*schema.Schema{
			"execute_uuid": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the execution ID of a script order.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the batch list of script orders.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"batch_index": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the batch index.`,
						},
						"total_instances": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of instance nodes in the batch.`,
						},
						"rotation_strategy": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates suspension and resumption policy.`,
						},
						"properties": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the batch label.`,
						},
					},
				},
			},
		},
	}
}

type ScriptOrderBatchesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newScriptOrderBatchesDSWrapper(d *schema.ResourceData, meta interface{}) *ScriptOrderBatchesDSWrapper {
	return &ScriptOrderBatchesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocScriptOrderBatchesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newScriptOrderBatchesDSWrapper(d, meta)
	lisScrJobBatRst, err := wrapper.ListScriptJobBatches()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listScriptJobBatchesToSchema(lisScrJobBatRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/job/script/orders/{execute_uuid}/batches
func (w *ScriptOrderBatchesDSWrapper) ListScriptJobBatches() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/job/script/orders/{execute_uuid}/batches"
	uri = strings.ReplaceAll(uri, "{execute_uuid}", w.Get("execute_uuid").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *ScriptOrderBatchesDSWrapper) listScriptJobBatchesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"batch_index":       data.Get("batch_index").Value(),
					"total_instances":   data.Get("total_instances").Value(),
					"rotation_strategy": data.Get("rotation_strategy").Value(),
					"properties":        data.Get("properties").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
