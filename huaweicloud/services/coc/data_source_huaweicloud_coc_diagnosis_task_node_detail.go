// Generated by PMS #939
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocDiagnosisTaskNodeDetail() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocDiagnosisTaskNodeDetailRead,

		Schema: map[string]*schema.Schema{
			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the diagnostic work order ID.`,
			},
			"code": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the diagnostic step code.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the instance being diagnosed.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the diagnosis step name.`,
			},
			"name_zh": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the Chinese name of the diagnostic step.`,
			},
			"status": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the execution status of the diagnostic task.`,
			},
			"diagnosis_record_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the primary key ID of the diagnosis step.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the start time of the diagnostic step.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the end time of the diagnostic step.`,
			},
			"message": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the diagnostic step execution logging is performed.`,
			},
			"diagnostic_task_node_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the diagnostic task node ID.`,
			},
		},
	}
}

type DiagnosisTaskNodeDetailDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDiagnosisTaskNodeDetailDSWrapper(d *schema.ResourceData, meta interface{}) *DiagnosisTaskNodeDetailDSWrapper {
	return &DiagnosisTaskNodeDetailDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocDiagnosisTaskNodeDetailRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDiagnosisTaskNodeDetailDSWrapper(d, meta)
	showDiagnosisNodeRst, err := wrapper.ShowDiagnosisNode()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showDiagnosisNodeToSchema(showDiagnosisNodeRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/diagnosis/tasks/{task_id}/node/{code}
func (w *DiagnosisTaskNodeDetailDSWrapper) ShowDiagnosisNode() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/diagnosis/tasks/{task_id}/node/{code}"
	uri = strings.ReplaceAll(uri, "{task_id}", w.Get("task_id").(string))
	uri = strings.ReplaceAll(uri, "{code}", w.Get("code").(string))
	params := map[string]any{
		"instance_id": w.Get("instance_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *DiagnosisTaskNodeDetailDSWrapper) showDiagnosisNodeToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("code", body.Get("data.code").Value()),
		d.Set("name", body.Get("data.name").Value()),
		d.Set("name_zh", body.Get("data.name_zh").Value()),
		d.Set("status", body.Get("data.status").Value()),
		d.Set("diagnosis_record_id", body.Get("data.diagnosis_record_id").Value()),
		d.Set("start_time", body.Get("data.start_time").Value()),
		d.Set("end_time", body.Get("data.end_time").Value()),
		d.Set("message", body.Get("data.message").Value()),
		d.Set("diagnostic_task_node_id", body.Get("data.id").Value()),
	)
	return mErr.ErrorOrNil()
}
