// Generated by PMS #953
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCocAlarmActionHistories() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocAlarmActionHistoriesRead,

		Schema: map[string]*schema.Schema{
			"alarm_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the alarm ID.`,
			},
			"alarm_handle_histories": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the execution details of the alarm history work order.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"work_order_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task execution work order ID.`,
						},
						"create_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the person who created the work order.`,
						},
						"create_alias": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the alias of the person who created the work order.`,
						},
						"task_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order task type.`,
						},
						"start_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the work order execution start time.`,
						},
						"end_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the work order execution end time.`,
						},
						"duration": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the time taken to execute the work order.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order status.`,
						},
					},
				},
			},
		},
	}
}

type AlarmActionHistoriesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAlarmActionHistoriesDSWrapper(d *schema.ResourceData, meta interface{}) *AlarmActionHistoriesDSWrapper {
	return &AlarmActionHistoriesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocAlarmActionHistoriesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAlarmActionHistoriesDSWrapper(d, meta)
	lisAlaHanHisRst, err := wrapper.ListAlarmHandleHistories()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAlarmHandleHistoriesToSchema(lisAlaHanHisRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/alarm-mgmt/alarm/{alarm_id}/handle-histories
func (w *AlarmActionHistoriesDSWrapper) ListAlarmHandleHistories() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/alarm-mgmt/alarm/{alarm_id}/handle-histories"
	uri = strings.ReplaceAll(uri, "{alarm_id}", w.Get("alarm_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("alarm_handle_histories", "offset", "limit", 100).
		Request().
		Result()
}

func (w *AlarmActionHistoriesDSWrapper) listAlarmHandleHistoriesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("alarm_handle_histories", schemas.SliceToList(body.Get("alarm_handle_histories"),
			func(alaHanHis gjson.Result) any {
				return map[string]any{
					"work_order_id": alaHanHis.Get("work_order_id").Value(),
					"create_name":   alaHanHis.Get("create_name").Value(),
					"create_alias":  alaHanHis.Get("create_alias").Value(),
					"task_type":     alaHanHis.Get("task_type").Value(),
					"start_time":    alaHanHis.Get("start_time").Value(),
					"end_time":      alaHanHis.Get("end_time").Value(),
					"duration":      alaHanHis.Get("duration").Value(),
					"status":        alaHanHis.Get("status").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
