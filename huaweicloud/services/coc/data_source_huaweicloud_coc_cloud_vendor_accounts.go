// Generated by PMS #978
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocCloudVendorAccounts() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocCloudVendorAccountsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"vendor": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud vendor information.`,
			},
			"account_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the account ID of a supplier.`,
			},
			"account_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the account name.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of cloud vendor account.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the cloud vendor account ID allocated by CloudCMDB`,
						},
						"vendor": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the cloud vendor information.`,
						},
						"account_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the account ID of a supplier.`,
						},
						"account_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the account name.`,
						},
						"ak": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the AK.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the tenant ID.`,
						},
						"sync_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task status.`,
						},
						"failure_msg": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the error message.`,
						},
						"sync_date": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the synchronization time.`,
						},
						"create_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time.`,
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time.`,
						},
					},
				},
			},
		},
	}
}

type CloudVendorAccountsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCloudVendorAccountsDSWrapper(d *schema.ResourceData, meta interface{}) *CloudVendorAccountsDSWrapper {
	return &CloudVendorAccountsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocCloudVendorAccountsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCloudVendorAccountsDSWrapper(d, meta)
	listVendorAccountRst, err := wrapper.ListVendorAccount()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listVendorAccountToSchema(listVendorAccountRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/vendor-account
func (w *CloudVendorAccountsDSWrapper) ListVendorAccount() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/vendor-account?limit=100"
	params := map[string]any{
		"vendor":       w.Get("vendor"),
		"account_id":   w.Get("account_id"),
		"account_name": w.Get("account_name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data", "offset", "limit", 0).
		Request().
		Result()
}

func (w *CloudVendorAccountsDSWrapper) listVendorAccountToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"id":           data.Get("id").Value(),
					"vendor":       data.Get("vendor").Value(),
					"account_id":   data.Get("account_id").Value(),
					"account_name": data.Get("account_name").Value(),
					"ak":           data.Get("ak").Value(),
					"domain_id":    data.Get("domain_id").Value(),
					"sync_status":  data.Get("sync_status").Value(),
					"failure_msg":  data.Get("failure_msg").Value(),
					"sync_date":    data.Get("sync_date").Value(),
					"create_time":  data.Get("create_time").Value(),
					"update_time":  data.Get("update_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
