// Generated by PMS #840
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocDocumentExecutions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocDocumentExecutionsRead,

		Schema: map[string]*schema.Schema{
			"creator": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fuzzy query the creator.`,
			},
			"start_time": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the start time greater than.`,
			},
			"end_time": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the end time less than.`,
			},
			"document_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fuzzy query the document name.`,
			},
			"document_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the document ID.`,
			},
			"tags": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the tag filtering conditions.`,
			},
			"exclude_child_executions": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Specifies whether list queries should not return child tickets.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of document execution.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"execution_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the execution ID.`,
						},
						"document_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the document name.`,
						},
						"document_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the document ID.`,
						},
						"document_version_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the document version ID.`,
						},
						"document_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the document version.`,
						},
						"start_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the work order execution start time.`,
						},
						"end_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the work order execution end time.`,
						},
						"update_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the work order update time.`,
						},
						"creator": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order creator.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order status.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order execution description.`,
						},
						"parameters": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the global parameters for work order execution.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the parameter name.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the parameter value.`,
									},
								},
							},
						},
						"sys_tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of system tags.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the key of the tag.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the value of the tag.`,
									},
								},
							},
						},
						"tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of custom tags.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the key of the tag.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the value of the tag.`,
									},
								},
							},
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order type.`,
						},
						"target_parameter_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the rate mode executes the specified parameters.`,
						},
						"targets": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the rate mode executes the specified element.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the rate mode execution type, **InstanceValues**.`,
									},
									"values": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the rate mode execution element.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type DocumentExecutionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDocumentExecutionsDSWrapper(d *schema.ResourceData, meta interface{}) *DocumentExecutionsDSWrapper {
	return &DocumentExecutionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocDocumentExecutionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDocumentExecutionsDSWrapper(d, meta)
	listExecutionsRst, err := wrapper.ListExecutions()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listExecutionsToSchema(listExecutionsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/executions
func (w *DocumentExecutionsDSWrapper) ListExecutions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/executions"
	params := map[string]any{
		"creator":                  w.Get("creator"),
		"start_time":               w.Get("start_time"),
		"end_time":                 w.Get("end_time"),
		"document_name":            w.Get("document_name"),
		"document_id":              w.Get("document_id"),
		"tags":                     w.Get("tags"),
		"exclude_child_executions": w.Get("exclude_child_executions"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data", "offset", "limit", 100).
		Request().
		Result()
}

func (w *DocumentExecutionsDSWrapper) listExecutionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"execution_id":        data.Get("execution_id").Value(),
					"document_name":       data.Get("document_name").Value(),
					"document_id":         data.Get("document_id").Value(),
					"document_version_id": data.Get("document_version_id").Value(),
					"document_version":    data.Get("document_version").Value(),
					"start_time":          data.Get("start_time").Value(),
					"end_time":            data.Get("end_time").Value(),
					"update_time":         data.Get("update_time").Value(),
					"creator":             data.Get("creator").Value(),
					"status":              data.Get("status").Value(),
					"description":         data.Get("description").Value(),
					"parameters": schemas.SliceToList(data.Get("parameters"),
						func(parameters gjson.Result) any {
							return map[string]any{
								"key":   parameters.Get("key").Value(),
								"value": parameters.Get("value").Value(),
							}
						},
					),
					"sys_tags": schemas.SliceToList(data.Get("sys_tags"),
						func(sysTags gjson.Result) any {
							return map[string]any{
								"key":   sysTags.Get("key").Value(),
								"value": sysTags.Get("value").Value(),
							}
						},
					),
					"tags": schemas.SliceToList(data.Get("tags"),
						func(tags gjson.Result) any {
							return map[string]any{
								"key":   tags.Get("key").Value(),
								"value": tags.Get("value").Value(),
							}
						},
					),
					"type":                  data.Get("type").Value(),
					"target_parameter_name": data.Get("target_parameter_name").Value(),
					"targets": schemas.SliceToList(data.Get("targets"),
						func(targets gjson.Result) any {
							return map[string]any{
								"key":    targets.Get("key").Value(),
								"values": schemas.SliceToStrList(targets.Get("values")),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
