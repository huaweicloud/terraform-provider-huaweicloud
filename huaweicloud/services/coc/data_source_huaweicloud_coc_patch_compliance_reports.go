// Generated by PMS #666
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocPatchComplianceReports() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocPatchComplianceReportsRead,

		Schema: map[string]*schema.Schema{
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ECS instance ID.`,
			},
			"ip": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the internal network IP address.`,
			},
			"eip": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the elastic IP address.`,
			},
			"operating_system": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the OS.`,
			},
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region.`,
			},
			"group": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the group.`,
			},
			"compliant_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the compliance status.`,
			},
			"order_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the service ticket ID.`,
			},
			"sort_dir": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting order.`,
			},
			"sort_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting field.`,
			},
			"report_scene": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the report scenario.`,
			},
			"cce_info_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the CCE cluster information ID.`,
			},
			"instance_compliant": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the node compliance report.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"compliant_summary": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the compliance patch information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"compliant_count": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of compliant patches.`,
									},
									"severity_summary": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the compliance summary.`,
										Elem:        insComSumSevSummaryElem(),
									},
								},
							},
						},
						"non_compliant_summary": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the non-compliant patch information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"non_compliant_count": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of non-compliant patches.`,
									},
									"severity_summary": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the compliance summary.`,
										Elem:        insComNonComSumSevSummaryElem(),
									},
								},
							},
						},
						"execution_summary": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the execution information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"order_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the service ticket ID.`,
									},
									"job_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the script execution ID.`,
									},
									"report_time": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the reporting time.`,
									},
								},
							},
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node name.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node ID.`,
						},
						"node_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the CCE cluster node ID.`,
						},
						"ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node IP address.`,
						},
						"eip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the elastic IP address.`,
						},
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region.`,
						},
						"group": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the group.`,
						},
						"report_scene": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the reporting scenario, CCE or ECS.`,
						},
						"cce_info_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the CCE cluster information ID.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the compliance status.`,
						},
						"baseline_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the baseline ID.`,
						},
						"baseline_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the baseline name.`,
						},
						"rule_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the baseline rule type.`,
						},
						"operating_system": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the OS.`,
						},
					},
				},
			},
		},
	}
}

// insComSumSevSummaryElem
// The Elem of "instance_compliant.compliant_summary.severity_summary"
func insComSumSevSummaryElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"critical_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of major compliance reports.`,
			},
			"high_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of high compliance reports.`,
			},
			"informational_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of informational compliance reports.`,
			},
			"low_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of low compliance reports.`,
			},
			"medium_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of medium compliance reports.`,
			},
			"unspecified_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of unspecified compliance reports.`,
			},
		},
	}
}

// insComNonComSumSevSummaryElem
// The Elem of "instance_compliant.non_compliant_summary.severity_summary"
func insComNonComSumSevSummaryElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"critical_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of major compliance reports.`,
			},
			"high_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of high compliance reports.`,
			},
			"informational_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of informational compliance reports.`,
			},
			"low_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of low compliance reports.`,
			},
			"medium_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of medium compliance reports.`,
			},
			"unspecified_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of unspecified compliance reports.`,
			},
		},
	}
}

type PatchComplianceReportsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPatchComplianceReportsDSWrapper(d *schema.ResourceData, meta interface{}) *PatchComplianceReportsDSWrapper {
	return &PatchComplianceReportsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocPatchComplianceReportsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPatchComplianceReportsDSWrapper(d, meta)
	lisInsComRst, err := wrapper.ListInstanceCompliant()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listInstanceCompliantToSchema(lisInsComRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/patch/instance/compliant
func (w *PatchComplianceReportsDSWrapper) ListInstanceCompliant() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/patch/instance/compliant"
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"name":                  w.Get("name"),
		"instance_id":           w.Get("instance_id"),
		"ip":                    w.Get("ip"),
		"eip":                   w.Get("eip"),
		"operating_system":      w.Get("operating_system"),
		"region":                w.Get("region"),
		"group":                 w.Get("group"),
		"compliant_status":      w.Get("compliant_status"),
		"order_id":              w.Get("order_id"),
		"sort_dir":              w.Get("sort_dir"),
		"sort_key":              w.Get("sort_key"),
		"report_scene":          w.Get("report_scene"),
		"cce_info_id":           w.Get("cce_info_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetStart(1).
		OffsetPager("instance_compliant", "offset", "limit", 100).
		Request().
		Result()
}

func (w *PatchComplianceReportsDSWrapper) listInstanceCompliantToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("instance_compliant", schemas.SliceToList(body.Get("instance_compliant"),
			func(insCom gjson.Result) any {
				return map[string]any{
					"compliant_summary": schemas.SliceToList(insCom.Get("compliant_summary"),
						func(compliantSummary gjson.Result) any {
							return map[string]any{
								"compliant_count":  compliantSummary.Get("compliant_count").Value(),
								"severity_summary": w.setInsComSumSevSummary(compliantSummary),
							}
						},
					),
					"non_compliant_summary": schemas.SliceToList(insCom.Get("non_compliant_summary"),
						func(nonCompliantSummary gjson.Result) any {
							return map[string]any{
								"non_compliant_count": nonCompliantSummary.Get("non_compliant_count").Value(),
								"severity_summary":    w.setIcncsss(nonCompliantSummary),
							}
						},
					),
					"execution_summary": schemas.SliceToList(insCom.Get("execution_summary"),
						func(executionSummary gjson.Result) any {
							return map[string]any{
								"order_id":    executionSummary.Get("order_id").Value(),
								"job_id":      executionSummary.Get("job_id").Value(),
								"report_time": executionSummary.Get("report_time").Value(),
							}
						},
					),
					"id":                    insCom.Get("id").Value(),
					"enterprise_project_id": insCom.Get("enterprise_project_id").Value(),
					"name":                  insCom.Get("name").Value(),
					"instance_id":           insCom.Get("instance_id").Value(),
					"node_id":               insCom.Get("node_id").Value(),
					"ip":                    insCom.Get("ip").Value(),
					"eip":                   insCom.Get("eip").Value(),
					"region":                insCom.Get("region").Value(),
					"group":                 insCom.Get("group").Value(),
					"report_scene":          insCom.Get("report_scene").Value(),
					"cce_info_id":           insCom.Get("cce_info_id").Value(),
					"status":                insCom.Get("status").Value(),
					"baseline_id":           insCom.Get("baseline_id").Value(),
					"baseline_name":         insCom.Get("baseline_name").Value(),
					"rule_type":             insCom.Get("rule_type").Value(),
					"operating_system":      insCom.Get("operating_system").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*PatchComplianceReportsDSWrapper) setInsComSumSevSummary(compliantSummary gjson.Result) any {
	return schemas.SliceToList(compliantSummary.Get("severity_summary"), func(severitySummary gjson.Result) any {
		return map[string]any{
			"critical_count":      severitySummary.Get("critical_count").Value(),
			"high_count":          severitySummary.Get("high_count").Value(),
			"informational_count": severitySummary.Get("informational_count").Value(),
			"low_count":           severitySummary.Get("low_count").Value(),
			"medium_count":        severitySummary.Get("medium_count").Value(),
			"unspecified_count":   severitySummary.Get("unspecified_count").Value(),
		}
	})
}

func (*PatchComplianceReportsDSWrapper) setIcncsss(nonCompliantSummary gjson.Result) any {
	return schemas.SliceToList(nonCompliantSummary.Get("severity_summary"), func(severitySummary gjson.Result) any {
		return map[string]any{
			"critical_count":      severitySummary.Get("critical_count").Value(),
			"high_count":          severitySummary.Get("high_count").Value(),
			"informational_count": severitySummary.Get("informational_count").Value(),
			"low_count":           severitySummary.Get("low_count").Value(),
			"medium_count":        severitySummary.Get("medium_count").Value(),
			"unspecified_count":   severitySummary.Get("unspecified_count").Value(),
		}
	})
}
