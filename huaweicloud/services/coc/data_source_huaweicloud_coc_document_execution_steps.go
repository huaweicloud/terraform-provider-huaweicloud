// Generated by PMS #844
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocDocumentExecutionSteps() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocDocumentExecutionStepsRead,

		Schema: map[string]*schema.Schema{
			"execution_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the work order ID.`,
			},
			"execution_step_id_list": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the execution step IDs.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of execution steps.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"execution_step_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order step ID.`,
						},
						"action": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the atomic capability action.`,
						},
						"start_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the work order step start time.`,
						},
						"end_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the work order step end time.`,
						},
						"message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order step execution information.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order step name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order step execution status.`,
						},
						"inputs": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        schemaDocumentExecutionStepsInputs(),
							Description: `Indicates the step input parameters.`,
						},
						"outputs": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        schemaDocumentExecutionStepsInputs(),
							Description: `Indicates the step output parameters.`,
						},
						"properties": {
							Type:        schema.TypeMap,
							Computed:    true,
							Description: `Indicates the additional attributes for the work order step`,
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
		},
	}
}

func schemaDocumentExecutionStepsInputs() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"key": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the parameter name.`,
			},
			"value": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the parameter value.`,
			},
		},
	}
}

type DocumentExecutionStepsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDocumentExecutionStepsDSWrapper(d *schema.ResourceData, meta interface{}) *DocumentExecutionStepsDSWrapper {
	return &DocumentExecutionStepsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocDocumentExecutionStepsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDocumentExecutionStepsDSWrapper(d, meta)
	lisExeSteRst, err := wrapper.ListExecutionSteps()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listExecutionStepsToSchema(lisExeSteRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/executions/{execution_id}/steps
func (w *DocumentExecutionStepsDSWrapper) ListExecutionSteps() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/executions/{execution_id}/steps"
	uri = strings.ReplaceAll(uri, "{execution_id}", w.Get("execution_id").(string))
	params := map[string]any{
		"execution_step_id_list": w.ListToArray("execution_step_id_list"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data", "offset", "limit", 100).
		Request().
		Result()
}

func (w *DocumentExecutionStepsDSWrapper) listExecutionStepsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"execution_step_id": data.Get("execution_step_id").Value(),
					"action":            data.Get("action").Value(),
					"start_time":        data.Get("start_time").Value(),
					"end_time":          data.Get("end_time").Value(),
					"message":           data.Get("message").Value(),
					"name":              data.Get("name").Value(),
					"status":            data.Get("status").Value(),
					"inputs": schemas.SliceToList(data.Get("inputs"),
						func(parameters gjson.Result) any {
							return map[string]any{
								"key":   parameters.Get("key").Value(),
								"value": parameters.Get("value").Value(),
							}
						},
					),
					"outputs": schemas.SliceToList(data.Get("outputs"),
						func(parameters gjson.Result) any {
							return map[string]any{
								"key":   parameters.Get("key").Value(),
								"value": parameters.Get("value").Value(),
							}
						},
					),
					"properties": data.Get("properties").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
