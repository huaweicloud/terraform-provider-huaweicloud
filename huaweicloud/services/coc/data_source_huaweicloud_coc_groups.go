// Generated by PMS #734
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocGroupsRead,

		Schema: map[string]*schema.Schema{
			"component_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the component ID.`,
			},
			"id_list": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the group ID list.`,
			},
			"application_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the application ID.`,
			},
			"name_like": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fuzzy query the group name.`,
			},
			"code": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the group code.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the application group list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the UUID assigned by the CMDB.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the group name.`,
						},
						"vendor": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the manufacturer information.`,
						},
						"code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the group code.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the tenant ID.`,
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region ID.`,
						},
						"component_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the component ID.`,
						},
						"application_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the application ID.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
						"sync_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource synchronization mode.`,
						},
						"sync_rules": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the smart association rules.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enterprise_project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the enterprise project ID.`,
									},
									"rule_tags": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the associated tag.`,
									},
								},
							},
						},
						"relation_configurations": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the group configuration information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the configuration type.`,
									},
									"parameters": {
										Type:        schema.TypeMap,
										Computed:    true,
										Description: `Indicates the configuration parameters.`,
										Elem:        &schema.Schema{Type: schema.TypeString},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type GroupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newGroupsDSWrapper(d *schema.ResourceData, meta interface{}) *GroupsDSWrapper {
	return &GroupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocGroupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newGroupsDSWrapper(d, meta)
	lisAppGroRst, err := wrapper.ListApplicationGroups()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listApplicationGroupsToSchema(lisAppGroRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/groups
func (w *GroupsDSWrapper) ListApplicationGroups() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/groups"
	params := map[string]any{
		"id_list":        w.ListToArray("id_list"),
		"component_id":   w.Get("component_id"),
		"application_id": w.Get("application_id"),
		"name_like":      w.Get("name_like"),
		"code":           w.Get("code"),
		"limit":          100,
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("data", "data[-1].id", "marker").
		Request().
		Result()
}

func (w *GroupsDSWrapper) listApplicationGroupsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"id":                    data.Get("id").Value(),
					"name":                  data.Get("name").Value(),
					"vendor":                data.Get("vendor").Value(),
					"code":                  data.Get("code").Value(),
					"domain_id":             data.Get("domain_id").Value(),
					"region_id":             data.Get("region_id").Value(),
					"component_id":          data.Get("component_id").Value(),
					"application_id":        data.Get("application_id").Value(),
					"enterprise_project_id": data.Get("ep_id").Value(),
					"sync_mode":             data.Get("sync_mode").Value(),
					"sync_rules": schemas.SliceToList(data.Get("sync_rules"),
						func(relCon gjson.Result) any {
							return map[string]any{
								"enterprise_project_id": relCon.Get("ep_id").Value(),
								"rule_tags":             relCon.Get("rule_tags").Value(),
							}
						},
					),
					"relation_configurations": schemas.SliceToList(data.Get("relation_configurations"),
						func(relCon gjson.Result) any {
							return map[string]any{
								"type":       relCon.Get("type").Value(),
								"parameters": relCon.Get("parameters").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
