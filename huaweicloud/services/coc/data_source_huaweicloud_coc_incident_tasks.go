// Generated by PMS #943
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCocIncidentTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocIncidentTasksRead,

		Schema: map[string]*schema.Schema{
			"incident_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the event ticket number.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of incident tasks.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node type.`,
						},
						"key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node key.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node name.`,
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node status.`,
						},
						"operations": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of operations.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"task_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the task ID.`,
									},
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the task key.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type IncidentTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newIncidentTasksDSWrapper(d *schema.ResourceData, meta interface{}) *IncidentTasksDSWrapper {
	return &IncidentTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocIncidentTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newIncidentTasksDSWrapper(d, meta)
	showIncidentTaskRst, err := wrapper.ShowIncidentTask()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showIncidentTaskToSchema(showIncidentTaskRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v2/incidents/{incident_id}/tasks
func (w *IncidentTasksDSWrapper) ShowIncidentTask() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v2/incidents/{incident_id}/tasks"
	uri = strings.ReplaceAll(uri, "{incident_id}", w.Get("incident_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *IncidentTasksDSWrapper) showIncidentTaskToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"type":  data.Get("type").Value(),
					"key":   data.Get("key").Value(),
					"name":  data.Get("name").Value(),
					"state": data.Get("state").Value(),
					"operations": schemas.SliceToList(data.Get("operations"),
						func(operations gjson.Result) any {
							return map[string]any{
								"task_id": operations.Get("task_id").Value(),
								"key":     operations.Get("key").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
