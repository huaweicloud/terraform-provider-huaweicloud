// Generated by PMS #871
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocScheduledTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocScheduledTasksRead,

		Schema: map[string]*schema.Schema{
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"task_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task ID.`,
			},
			"task_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task name.`,
			},
			"scheduled_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the scheduled task execution strategy.`,
			},
			"task_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the scheduled task type.`,
			},
			"associated_task_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the associated task.`,
			},
			"risk_level": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the risk level of the scheduled task.`,
			},
			"created_by": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the IAM user ID of the person who created the scheduled task.`,
			},
			"reviewer": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the IAM user ID of the scheduled task approver.`,
			},
			"reviewer_user_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the IAM user nickname of the scheduled task approver.`,
			},
			"approve_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the approval status of the scheduled task.`,
			},
			"last_execution_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the most recent execution status of a scheduled task.`,
			},
			"last_execution_start_time": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the timestamp of the query start time for the most recent scheduled task execution.`,
			},
			"last_execution_end_time": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the timestamp of the query end time for the most recent scheduled task execution.`,
			},
			"region_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region ID.`,
			},
			"resource_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource ID.`,
			},
			"scheduled_tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of scheduled tasks.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task ID.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task name.`,
						},
						"scheduled_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task execution strategy.`,
						},
						"task_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the reference task type.`,
						},
						"associated_task_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the properties (public/custom) of the task associated with the task.`,
						},
						"risk_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the risk level of the task.`,
						},
						"created_by": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task creator.`,
						},
						"update_by": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task modifier.`,
						},
						"created_user_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the nickname of the task creator.`,
						},
						"reviewer": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task approver.`,
						},
						"reviewer_user_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the nickname of the task approver.`,
						},
						"approve_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task approval status.`,
						},
						"last_execution_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the timestamp of the most recent task execution time.`,
						},
						"last_execution_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the most recent execution status of a task.`,
						},
						"execution_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of times a task is executed.`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the task is enabled.`,
						},
						"created_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the task create time.`,
						},
						"modified_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the task update time.`,
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region to which the task belongs.`,
						},
						"associated_task_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the script/job name associated with the task.`,
						},
						"associated_task_name_en": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the English name of the script or job associated with the task.`,
						},
					},
				},
			},
		},
	}
}

type ScheduledTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newScheduledTasksDSWrapper(d *schema.ResourceData, meta interface{}) *ScheduledTasksDSWrapper {
	return &ScheduledTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocScheduledTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newScheduledTasksDSWrapper(d, meta)
	listScheduledTaskRst, err := wrapper.ListScheduledTask()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listScheduledTaskToSchema(listScheduledTaskRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/schedule/task
func (w *ScheduledTasksDSWrapper) ListScheduledTask() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/schedule/task"
	params := map[string]any{
		"enterprise_project_id":     w.Get("enterprise_project_id"),
		"task_id":                   w.Get("task_id"),
		"task_name":                 w.Get("task_name"),
		"scheduled_type":            w.Get("scheduled_type"),
		"task_type":                 w.Get("task_type"),
		"associated_task_type":      w.Get("associated_task_type"),
		"risk_level":                w.Get("risk_level"),
		"created_by":                w.Get("created_by"),
		"reviewer":                  w.Get("reviewer"),
		"reviewer_user_name":        w.Get("reviewer_user_name"),
		"approve_status":            w.Get("approve_status"),
		"last_execution_status":     w.Get("last_execution_status"),
		"last_execution_start_time": w.Get("last_execution_start_time"),
		"last_execution_end_time":   w.Get("last_execution_end_time"),
		"region_id":                 w.Get("region_id"),
		"resource_id":               w.Get("resource_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("scheduled_tasks", "next_maker", "marker").
		Request().
		Result()
}

func (w *ScheduledTasksDSWrapper) listScheduledTaskToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("scheduled_tasks", schemas.SliceToList(body.Get("scheduled_tasks"),
			func(scheduledTasks gjson.Result) any {
				return map[string]any{
					"id":                      scheduledTasks.Get("id").Value(),
					"enterprise_project_id":   scheduledTasks.Get("enterprise_project_id").Value(),
					"name":                    scheduledTasks.Get("name").Value(),
					"scheduled_type":          scheduledTasks.Get("scheduled_type").Value(),
					"task_type":               scheduledTasks.Get("task_type").Value(),
					"associated_task_type":    scheduledTasks.Get("associated_task_type").Value(),
					"risk_level":              scheduledTasks.Get("risk_level").Value(),
					"created_by":              scheduledTasks.Get("created_by").Value(),
					"update_by":               scheduledTasks.Get("update_by").Value(),
					"created_user_name":       scheduledTasks.Get("created_user_name").Value(),
					"reviewer":                scheduledTasks.Get("reviewer").Value(),
					"reviewer_user_name":      scheduledTasks.Get("reviewer_user_name").Value(),
					"approve_status":          scheduledTasks.Get("approve_status").Value(),
					"last_execution_time":     scheduledTasks.Get("last_execution_time").Value(),
					"last_execution_status":   scheduledTasks.Get("last_execution_status").Value(),
					"execution_count":         scheduledTasks.Get("execution_count").Value(),
					"enabled":                 scheduledTasks.Get("enabled").Value(),
					"created_time":            scheduledTasks.Get("created_time").Value(),
					"modified_time":           scheduledTasks.Get("modified_time").Value(),
					"region_id":               scheduledTasks.Get("region_id").Value(),
					"associated_task_name":    scheduledTasks.Get("associated_task_name").Value(),
					"associated_task_name_en": scheduledTasks.Get("associated_task_name_en").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
