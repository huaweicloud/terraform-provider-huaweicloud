// Generated by PMS #733
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocComponents() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocComponentsRead,

		Schema: map[string]*schema.Schema{
			"application_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the application ID.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the component query information list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the UUID assigned by the CMDB.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the component name.`,
						},
						"code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the component code.`,
						},
						"application_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the application ID.`,
						},
						"ep_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
					},
				},
			},
		},
	}
}

type ComponentsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newComponentsDSWrapper(d *schema.ResourceData, meta interface{}) *ComponentsDSWrapper {
	return &ComponentsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocComponentsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newComponentsDSWrapper(d, meta)
	lisAppComRst, err := wrapper.ListApplicationComponents()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listApplicationComponentsToSchema(lisAppComRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/components
func (w *ComponentsDSWrapper) ListApplicationComponents() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/components"
	params := map[string]any{
		"application_id": w.Get("application_id"),
		"limit":          100,
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("data", "data[-1].id", "marker").
		Request().
		Result()
}

func (w *ComponentsDSWrapper) listApplicationComponentsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"id":             data.Get("id").Value(),
					"name":           data.Get("name").Value(),
					"code":           data.Get("code").Value(),
					"application_id": data.Get("application_id").Value(),
					"ep_id":          data.Get("ep_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
