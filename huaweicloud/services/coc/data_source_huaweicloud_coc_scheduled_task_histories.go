// Generated by PMS #873
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocScheduledTaskHistories() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocScheduledTaskHistoriesRead,

		Schema: map[string]*schema.Schema{
			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the task ID.`,
			},
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task region ID.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task execution status.`,
			},
			"started_start_time": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the start timestamp of the query interval for the started_time parameter.`,
			},
			"started_end_time": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the end timestamp of the query interval for the started_time parameter.`,
			},
			"finished_start_time": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the start timestamp of the query interval for the finished_time parameter.`,
			},
			"finished_end_time": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the end timestamp of the query interval for the finished_time parameter.`,
			},
			"sort_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting field name. Supported are **started_time** and **finished_time**.`,
			},
			"sort_dir": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting method.`,
			},
			"scheduled_task_history_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of scheduled operation and maintenance history records.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the history record ID.`,
						},
						"task_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the reference task type.`,
						},
						"execution_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the execution ID.`,
						},
						"associated_task_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the reference task name.`,
						},
						"associated_task_name_en": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the referenced task name (in English).`,
						},
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region.`,
						},
						"created_by": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creator.`,
						},
						"started_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the start time timestamp.`,
						},
						"finished_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the end time timestamp.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status.`,
						},
						"execution_msg": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description of the execution result.`,
						},
					},
				},
			},
		},
	}
}

type ScheduledTaskHistoriesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newScheduledTaskHistoriesDSWrapper(d *schema.ResourceData, meta interface{}) *ScheduledTaskHistoriesDSWrapper {
	return &ScheduledTaskHistoriesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocScheduledTaskHistoriesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newScheduledTaskHistoriesDSWrapper(d, meta)
	lisSchTasHisRst, err := wrapper.ListScheduledTaskHistory()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listScheduledTaskHistoryToSchema(lisSchTasHisRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/schedule/task/history
func (w *ScheduledTaskHistoriesDSWrapper) ListScheduledTaskHistory() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/schedule/task/history"
	params := map[string]any{
		"task_id":             w.Get("task_id"),
		"id":                  w.Id(),
		"region":              w.Get("region"),
		"status":              w.Get("status"),
		"started_start_time":  w.Get("started_start_time"),
		"started_end_time":    w.Get("started_end_time"),
		"finished_start_time": w.Get("finished_start_time"),
		"finished_end_time":   w.Get("finished_end_time"),
		"sort_key":            w.Get("sort_key"),
		"sort_dir":            w.Get("sort_dir"),
		"limit":               100,
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("scheduled_task_history_list", "offset", "limit", 100).
		Request().
		Result()
}

func (w *ScheduledTaskHistoriesDSWrapper) listScheduledTaskHistoryToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("scheduled_task_history_list", schemas.SliceToList(body.Get("scheduled_task_history_list"),
			func(schTasHisList gjson.Result) any {
				return map[string]any{
					"id":                      schTasHisList.Get("id").Value(),
					"task_type":               schTasHisList.Get("task_type").Value(),
					"execution_id":            schTasHisList.Get("execution_id").Value(),
					"associated_task_name":    schTasHisList.Get("associated_task_name").Value(),
					"associated_task_name_en": schTasHisList.Get("associated_task_name_en").Value(),
					"region":                  schTasHisList.Get("region").Value(),
					"created_by":              schTasHisList.Get("created_by").Value(),
					"started_time":            schTasHisList.Get("started_time").Value(),
					"finished_time":           schTasHisList.Get("finished_time").Value(),
					"status":                  schTasHisList.Get("status").Value(),
					"execution_msg":           schTasHisList.Get("execution_msg").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
