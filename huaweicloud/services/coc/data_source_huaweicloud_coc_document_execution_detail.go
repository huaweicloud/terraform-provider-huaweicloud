// Generated by PMS #845
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCocDocumentExecutionDetail() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocDocumentExecutionDetailRead,

		Schema: map[string]*schema.Schema{
			"execution_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the work order ID.`,
			},
			"document_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the document name.`,
			},
			"document_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the document ID.`,
			},
			"document_version_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the document version ID.`,
			},
			"document_version": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the document version.`,
			},
			"start_time": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the work order execution start time.`,
			},
			"end_time": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the work order execution end time.`,
			},
			"update_time": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the work order update time.`,
			},
			"creator": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the work order creator.`,
			},
			"status": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the work order status.`,
			},
			"description": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the work order execution description.`,
			},
			"parameters": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the global parameters for work order execution.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the parameter name.`,
						},
						"value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the parameter value.`,
						},
					},
				},
			},
			"tags": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of work order tags.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the key of the work order tag.`,
						},
						"value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the value of the work order tag.`,
						},
					},
				},
			},
			"target_parameter_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the rate mode to execute the specified parameter name.`,
			},
			"targets": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the rate mode to execute the selection element.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the rate mode execution type, **InstanceValues**.`,
						},
						"values": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the rate mode execution element.`,
						},
					},
				},
			},
			"type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the work order type.`,
			},
		},
	}
}

type DocumentExecutionDetailDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDocumentExecutionDetailDSWrapper(d *schema.ResourceData, meta interface{}) *DocumentExecutionDetailDSWrapper {
	return &DocumentExecutionDetailDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocDocumentExecutionDetailRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDocumentExecutionDetailDSWrapper(d, meta)
	getExecutionRst, err := wrapper.GetExecution()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.getExecutionToSchema(getExecutionRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/executions/{execution_id}
func (w *DocumentExecutionDetailDSWrapper) GetExecution() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/executions/{execution_id}"
	uri = strings.ReplaceAll(uri, "{execution_id}", w.Get("execution_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *DocumentExecutionDetailDSWrapper) getExecutionToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("execution_id", body.Get("data.execution_id").Value()),
		d.Set("document_name", body.Get("data.document_name").Value()),
		d.Set("document_id", body.Get("data.document_id").Value()),
		d.Set("document_version_id", body.Get("data.document_version_id").Value()),
		d.Set("document_version", body.Get("data.document_version").Value()),
		d.Set("start_time", body.Get("data.start_time").Value()),
		d.Set("end_time", body.Get("data.end_time").Value()),
		d.Set("update_time", body.Get("data.update_time").Value()),
		d.Set("creator", body.Get("data.creator").Value()),
		d.Set("status", body.Get("data.status").Value()),
		d.Set("description", body.Get("data.description").Value()),
		d.Set("parameters", schemas.SliceToList(body.Get("data.parameters"),
			func(parameters gjson.Result) any {
				return map[string]any{
					"key":   parameters.Get("key").Value(),
					"value": parameters.Get("value").Value(),
				}
			},
		)),
		d.Set("tags", schemas.SliceToList(body.Get("data.tags"),
			func(tags gjson.Result) any {
				return map[string]any{
					"key":   tags.Get("key").Value(),
					"value": tags.Get("value").Value(),
				}
			},
		)),
		d.Set("target_parameter_name", body.Get("data.target_parameter_name").Value()),
		d.Set("targets", schemas.SliceToList(body.Get("data.targets"),
			func(targets gjson.Result) any {
				return map[string]any{
					"key":    targets.Get("key").Value(),
					"values": schemas.SliceToStrList(targets.Get("values")),
				}
			},
		)),
		d.Set("type", body.Get("data.type").Value()),
	)
	return mErr.ErrorOrNil()
}
