// Generated by PMS #782
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocPublicScripts() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocPublicScriptsRead,

		Schema: map[string]*schema.Schema{
			"name_like": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the script name, only right fuzzy search is supported.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the script name.`,
			},
			"risk_level": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the risk level.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the script type.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of public scripts.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the the script automatically increases the ID.`,
						},
						"script_uuid": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the script UUID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the script name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the script type.`,
						},
						"gmt_created": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the creation time.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the script description.`,
						},
						"properties": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the script additional properties.`,
							Elem:        dataPropertiesElem(),
						},
					},
				},
			},
		},
	}
}

// dataPropertiesElem
// The Elem of "data.properties"
func dataPropertiesElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"risk_level": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the risk level.`,
			},
			"version": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the script version number.`,
			},
		},
	}
}

type PublicScriptsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPublicScriptsDSWrapper(d *schema.ResourceData, meta interface{}) *PublicScriptsDSWrapper {
	return &PublicScriptsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocPublicScriptsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPublicScriptsDSWrapper(d, meta)
	listPublicScriptsRst, err := wrapper.ListPublicScripts()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPublicScriptsToSchema(listPublicScriptsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/job/public-scripts
func (w *PublicScriptsDSWrapper) ListPublicScripts() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/job/public-scripts"
	params := map[string]any{
		"name_like":  w.Get("name_like"),
		"name":       w.Get("name"),
		"risk_level": w.Get("risk_level"),
		"type":       w.Get("type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("data.data", "data[-1].id", "limit").
		Request().
		Result()
}

func (w *PublicScriptsDSWrapper) listPublicScriptsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data.data"),
			func(data gjson.Result) any {
				return map[string]any{
					"id":          data.Get("id").Value(),
					"script_uuid": data.Get("script_uuid").Value(),
					"name":        data.Get("name").Value(),
					"type":        data.Get("type").Value(),
					"gmt_created": data.Get("gmt_created").Value(),
					"description": data.Get("description").Value(),
					"properties": schemas.SliceToList(data.Get("properties"),
						func(properties gjson.Result) any {
							return map[string]any{
								"risk_level": properties.Get("risk_level").Value(),
								"version":    properties.Get("version").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
