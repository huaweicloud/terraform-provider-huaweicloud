// Generated by PMS #846
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocDocumentExecutionStepInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocDocumentExecutionStepInstancesRead,

		Schema: map[string]*schema.Schema{
			"execution_step_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the work order step ID.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of batch instances.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the batch execution instance ID.`,
						},
						"execution_instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order instance ID.`,
						},
						"execution_step_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the work order step ID.`,
						},
						"start_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the instance execution start time.`,
						},
						"end_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the instance execution end time.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance execution status.`,
						},
						"message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance execution information.`,
						},
						"properties": {
							Type:        schema.TypeMap,
							Computed:    true,
							Description: `Indicates the instance information in a batch.`,
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
		},
	}
}

type DocumentExecutionStepInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDocumentExecutionStepInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *DocumentExecutionStepInstancesDSWrapper {
	return &DocumentExecutionStepInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocDocumentExecutionStepInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDocumentExecutionStepInstancesDSWrapper(d, meta)
	lisExeInsRst, err := wrapper.ListExecutionInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listExecutionInstancesToSchema(lisExeInsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/executions/instances
func (w *DocumentExecutionStepInstancesDSWrapper) ListExecutionInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/executions/instances"
	params := map[string]any{
		"execution_step_id": w.Get("execution_step_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data", "offset", "limit", 100).
		Request().
		Result()
}

func (w *DocumentExecutionStepInstancesDSWrapper) listExecutionInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"id":                    data.Get("id").Value(),
					"execution_instance_id": data.Get("execution_instance_id").Value(),
					"execution_step_id":     data.Get("execution_step_id").Value(),
					"start_time":            data.Get("start_time").Value(),
					"end_time":              data.Get("end_time").Value(),
					"status":                data.Get("status").Value(),
					"message":               data.Get("message").Value(),
					"properties":            schemas.MapToStrMap(data.Get("properties")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
