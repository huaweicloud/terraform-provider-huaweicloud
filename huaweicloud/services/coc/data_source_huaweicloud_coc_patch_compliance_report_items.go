// Generated by PMS #667
package coc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocPatchComplianceReportItems() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocPatchComplianceReportItemsRead,

		Schema: map[string]*schema.Schema{
			"instance_compliant_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the compliance report ID.`,
			},
			"title": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the patch name.`,
			},
			"sort_dir": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting order.`,
			},
			"sort_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting field.`,
			},
			"patch_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the patch status.`,
			},
			"classification": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the category.`,
			},
			"severity_level": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the severity level.`,
			},
			"compliance_level": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the compliance level.`,
			},
			"compliance_items": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the patch compliance information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node ID.`,
						},
						"title": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the patch name.`,
						},
						"classification": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the category.`,
						},
						"severity_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the severity level.`,
						},
						"compliance_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the compliance level.`,
						},
						"patch_detail": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the patch details.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"installed_time": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the installation time.`,
									},
									"patch_baseline_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the patch baseline ID.`,
									},
									"patch_baseline_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the patch baseline name.`,
									},
									"patch_status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the patch status.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type PatchComplianceReportItemsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPatchComplianceReportItemsDSWrapper(d *schema.ResourceData, meta interface{}) *PatchComplianceReportItemsDSWrapper {
	return &PatchComplianceReportItemsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocPatchComplianceReportItemsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPatchComplianceReportItemsDSWrapper(d, meta)
	shoInsPatIteRst, err := wrapper.ShowInstancePatchItems()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showInstancePatchItemsToSchema(shoInsPatIteRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/patch/instance/compliant/{instance_compliant_id}
func (w *PatchComplianceReportItemsDSWrapper) ShowInstancePatchItems() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/patch/instance/compliant/{instance_compliant_id}"
	uri = strings.ReplaceAll(uri, "{instance_compliant_id}", w.Get("instance_compliant_id").(string))
	params := map[string]any{
		"title":            w.Get("title"),
		"sort_dir":         w.Get("sort_dir"),
		"sort_key":         w.Get("sort_key"),
		"patch_status":     w.Get("patch_status"),
		"classification":   w.Get("classification"),
		"severity_level":   w.Get("severity_level"),
		"compliance_level": w.Get("compliance_level"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetStart(1).
		OffsetPager("compliance_items", "offset", "limit", 100).
		Request().
		Result()
}

func (w *PatchComplianceReportItemsDSWrapper) showInstancePatchItemsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("compliance_items", schemas.SliceToList(body.Get("compliance_items"),
			func(complianceItems gjson.Result) any {
				return map[string]any{
					"instance_id":      complianceItems.Get("instance_id").Value(),
					"title":            complianceItems.Get("title").Value(),
					"classification":   complianceItems.Get("classification").Value(),
					"severity_level":   complianceItems.Get("severity_level").Value(),
					"compliance_level": complianceItems.Get("compliance_level").Value(),
					"patch_detail": schemas.SliceToList(complianceItems.Get("patch_detail"),
						func(patchDetail gjson.Result) any {
							return map[string]any{
								"installed_time":      patchDetail.Get("installed_time").Value(),
								"patch_baseline_id":   patchDetail.Get("patch_baseline_id").Value(),
								"patch_baseline_name": patchDetail.Get("patch_baseline_name").Value(),
								"patch_status":        patchDetail.Get("patch_status").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
