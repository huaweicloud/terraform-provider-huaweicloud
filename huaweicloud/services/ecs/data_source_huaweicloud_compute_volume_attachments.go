// Generated by PMS #963
package ecs

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceEcsComputeVolumeAttachments() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEcsComputeVolumeAttachmentsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"server_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ECS ID in UUID format.`,
			},
			"volume_attachments": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the disks attached to an ECS.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"device": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the drive letter of the EVS disk, displayed as the device name on the console.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the mount ID, which is the same as the EVS disk ID.`,
						},
						"server_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ECS ID in UUID format.`,
						},
						"volume_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the EVS disk ID in UUID format.`,
						},
					},
				},
			},
		},
	}
}

type ComputeVolumeAttachmentsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newComputeVolumeAttachmentsDSWrapper(d *schema.ResourceData, meta interface{}) *ComputeVolumeAttachmentsDSWrapper {
	return &ComputeVolumeAttachmentsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEcsComputeVolumeAttachmentsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newComputeVolumeAttachmentsDSWrapper(d, meta)
	lisSerVolAttRst, err := wrapper.ListServerVolumeAttachments()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listServerVolumeAttachmentsToSchema(lisSerVolAttRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ECS GET /v1/{project_id}/cloudservers/{server_id}/os-volume_attachments
func (w *ComputeVolumeAttachmentsDSWrapper) ListServerVolumeAttachments() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ecs")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cloudservers/{server_id}/os-volume_attachments"
	uri = strings.ReplaceAll(uri, "{server_id}", w.Get("server_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *ComputeVolumeAttachmentsDSWrapper) listServerVolumeAttachmentsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("volume_attachments", schemas.SliceToList(body.Get("volumeAttachments"),
			func(volAtt gjson.Result) any {
				return map[string]any{
					"device":    volAtt.Get("device").Value(),
					"id":        volAtt.Get("id").Value(),
					"server_id": volAtt.Get("serverId").Value(),
					"volume_id": volAtt.Get("volumeId").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
