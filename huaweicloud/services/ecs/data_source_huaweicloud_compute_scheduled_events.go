// Generated by PMS #971
package ecs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEcsComputeScheduledEvents() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEcsComputeScheduledEventsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"event_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the event ID.`,
			},
			"instance_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the instance ID.`,
			},
			"type": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the event type.`,
			},
			"state": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the event status.`,
			},
			"publish_since": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the start time of publishing an event. The value is filtered by time range.`,
			},
			"publish_until": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the end time of publishing an event. The value is filtered by time range.`,
			},
			"events": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the event list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the event ID.`,
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the event status.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the event type.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the event description.`,
						},
						"publish_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates when the event is published.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the event start time.`,
						},
						"finish_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the event completion time.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"not_before": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates when the event is scheduled to start.`,
						},
						"not_after": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates when the event is scheduled to end.`,
						},
						"not_before_deadline": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the deadline of starting a scheduled event.`,
						},
						"execute_options": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the event execution option.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"device": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the device name of the local disk.`,
									},
									"wwn": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the unique ID used for attaching the local disk.`,
									},
									"serial_number": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the SN of the local disk.`,
									},
									"resize_target_flavor_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the flavor ID.`,
									},
									"migrate_policy": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the instance migration policy.`,
									},
									"executor": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the executor.`,
									},
								},
							},
						},
						"source": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the event source.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the source type of the scheduled event.`,
									},
									"host_scheduled_event_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the scheduled event for the host.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type ComputeScheduledEventsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newComputeScheduledEventsDSWrapper(d *schema.ResourceData, meta interface{}) *ComputeScheduledEventsDSWrapper {
	return &ComputeScheduledEventsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEcsComputeScheduledEventsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newComputeScheduledEventsDSWrapper(d, meta)
	lisSchEveRst, err := wrapper.ListScheduledEvents()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listScheduledEventsToSchema(lisSchEveRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ECS GET /v3/{project_id}/instance-scheduled-events
func (w *ComputeScheduledEventsDSWrapper) ListScheduledEvents() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ecs")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instance-scheduled-events"
	params := map[string]any{
		"id":            w.Get("event_id"),
		"instance_id":   w.ListToArray("instance_id"),
		"type":          w.ListToArray("type"),
		"state":         w.ListToArray("state"),
		"publish_since": w.Get("publish_since"),
		"publish_until": w.Get("publish_until"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("events", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *ComputeScheduledEventsDSWrapper) listScheduledEventsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("events", schemas.SliceToList(body.Get("events"),
			func(events gjson.Result) any {
				return map[string]any{
					"id":                  events.Get("id").Value(),
					"state":               events.Get("state").Value(),
					"type":                events.Get("type").Value(),
					"description":         events.Get("description").Value(),
					"publish_time":        events.Get("publish_time").Value(),
					"start_time":          events.Get("start_time").Value(),
					"finish_time":         events.Get("finish_time").Value(),
					"instance_id":         events.Get("instance_id").Value(),
					"not_before":          events.Get("not_before").Value(),
					"not_after":           events.Get("not_after").Value(),
					"not_before_deadline": events.Get("not_before_deadline").Value(),
					"execute_options": schemas.SliceToList(events.Get("execute_options"),
						func(executeOptions gjson.Result) any {
							return map[string]any{
								"device":                  executeOptions.Get("device").Value(),
								"wwn":                     executeOptions.Get("wwn").Value(),
								"serial_number":           executeOptions.Get("serial_number").Value(),
								"resize_target_flavor_id": executeOptions.Get("resize_target_flavor_id").Value(),
								"migrate_policy":          executeOptions.Get("migrate_policy").Value(),
								"executor":                executeOptions.Get("executor").Value(),
							}
						},
					),
					"source": schemas.SliceToList(events.Get("source"),
						func(source gjson.Result) any {
							return map[string]any{
								"type":                    source.Get("type").Value(),
								"host_scheduled_event_id": source.Get("host_scheduled_event_id").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
