// Generated by PMS #967
package ecs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEcsComputeResizeFlavors() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEcsComputeResizeFlavorsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_uuid": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the target ECS ID in UUID format.`,
			},
			"source_flavor_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the source flavor ID.`,
			},
			"source_flavor_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the source flavor name.`,
			},
			"sort_dir": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting of ECS flavors.`,
			},
			"sort_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the field for sorting.`,
			},
			"flavors": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the ECS flavors.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ECS flavor ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ECS flavor name.`,
						},
						"vcpus": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the number of vCPUs in the ECS flavor.`,
						},
						"ram": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the memory size (MiB) in the ECS flavor.`,
						},
						"disk": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the system disk size in the ECS flavor.`,
						},
						"swap": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the swap partition size required by the ECS flavor.`,
						},
						"os_flv_ext_data_ephemeral": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the temporary disk size. This is an extended attribute.`,
						},
						"os_flv_disabled_disabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the ECS flavor has been disabled. This is an extended attribute.`,
						},
						"rxtx_factor": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the ratio of the available network bandwidth to the network hardware bandwidth of the ECS.`,
						},
						"rxtx_quota": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the software constraints of the network bandwidth that can be used by the ECS.`,
						},
						"rxtx_cap": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the hardware constraints of the network bandwidth that can be used by the ECS.`,
						},
						"os_flavor_access_is_public": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether a flavor is available to all tenants. This is an extended attribute.`,
						},
						"links": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the shortcut link of the ECS flavor.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"rel": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the shortcut link marker name.`,
									},
									"href": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the provides the shortcut link.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the shortcut link type.`,
									},
								},
							},
						},
						"extra_specs": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the extended field of the ECS flavor.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"hpet_support": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates  whether to enable the high-precision clock on the ECS.`,
									},
									"resource_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the resource type.`,
									},
									"cond_operation_az": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates if an AZ is not configured in the cond_operation_status parameter.`,
									},
									"quota_max_rate": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum bandwidth.`,
									},
									"cond_operation_charge": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the billing type.`,
									},
									"cond_storage": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the storage constraints.`,
									},
									"info_gpu_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the number and names of GPUs.`,
									},
									"info_cpu_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the CPU name.`,
									},
									"quota_sub_network_interface_max_num": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum number of auxiliary network interfaces that can be bound`,
									},
									"quota_nvme_ssd": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the value of this parameter.`,
									},
									"instance_vnic_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the NIC type.`,
									},
									"instance_vnic_instance_bandwidth": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum bandwidth in the unit of **Mbit/s**.`,
									},
									"pci_passthrough_alias": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates PCI passthrough device information, in the format of PCI device name: quantity.`,
									},
									"cond_network": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates network constraints.`,
									},
									"quota_gpu": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the GPU name.`,
									},
									"network_interface_traffic_mirroring_supported": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates whether the flavor supports traffic mirroring.`,
									},
									"info_asic_accelerators": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates information about the accelerator.`,
									},
									"hw_numa_nodes": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the number of physical CPUs of the host.`,
									},
									"instance_vnic_max_count": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum number of NICs.`,
									},
									"extra_spec_io_persistent_grant": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates whether persistence is supported.`,
									},
									"pci_passthrough_enable_gpu": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates whether the graphics card is passed through.`,
									},
									"cond_spot_operation_az": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates  the AZ for the flavors in spot pricing billing mode.`,
									},
									"quota_vif_max_num": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum number of elastic network interfaces that can be bound to an ECS.`,
									},
									"ecs_instance_architecture": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the CPU architecture corresponding to the flavor.`,
									},
									"security_enclave_supported": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates whether the flavor supports QingTian Enclave.`,
									},
									"info_gpus": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates information about the GPU.`,
									},
									"ecs_performancetype": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ECS flavor type.`,
									},
									"quota_local_disk": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the value of this parameter is in format of **{type}:{count}:{size}:{safeFormat}**.`,
									},
									"cond_operation_status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates if an AZ is not configured in the cond_operation_az parameter.`,
									},
									"quota_min_rate": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the assured bandwidth.`,
									},
									"cond_operation_roles": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the allowed roles.`,
									},
									"cond_storage_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates supported disk types.`,
									},
									"ecs_virtualization_env_types": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates a virtualization type.`,
									},
									"pci_passthrough_gpu_specs": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates  the technologies used by G1 and G2 cloud servers.`,
									},
									"quota_max_pps": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum intranet PPS.`,
									},
									"cond_operation_charge_stop": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates whether fees are billed for a stopped ECS.`,
									},
									"cond_spot_operation_status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the status of a flavor in spot pricing billing mode.`,
									},
									"cond_compute_live_resizable": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates computing constraints.`,
									},
									"cond_compute": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates computing constraints.`,
									},
									"ecs_generation": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the generation of an ECS type.`,
									},
									"info_features": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the features supported by the flavor.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type ComputeResizeFlavorsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newComputeResizeFlavorsDSWrapper(d *schema.ResourceData, meta interface{}) *ComputeResizeFlavorsDSWrapper {
	return &ComputeResizeFlavorsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEcsComputeResizeFlavorsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newComputeResizeFlavorsDSWrapper(d, meta)
	listResizeFlavorsRst, err := wrapper.ListResizeFlavors()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listResizeFlavorsToSchema(listResizeFlavorsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ECS GET /v1/{project_id}/cloudservers/resize_flavors
func (w *ComputeResizeFlavorsDSWrapper) ListResizeFlavors() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ecs")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cloudservers/resize_flavors"
	params := map[string]any{
		"instance_uuid":      w.Get("instance_uuid"),
		"sort_dir":           w.Get("sort_dir"),
		"sort_key":           w.Get("sort_key"),
		"source_flavor_id":   w.Get("source_flavor_id"),
		"source_flavor_name": w.Get("source_flavor_name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("flavors", "flavors[-1].id", "marker").
		Request().
		Result()
}

func (w *ComputeResizeFlavorsDSWrapper) listResizeFlavorsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("flavors", schemas.SliceToList(body.Get("flavors"),
			func(flavors gjson.Result) any {
				return map[string]any{
					"id":                         flavors.Get("id").Value(),
					"name":                       flavors.Get("name").Value(),
					"vcpus":                      flavors.Get("vcpus").Value(),
					"ram":                        flavors.Get("ram").Value(),
					"disk":                       flavors.Get("disk").Value(),
					"swap":                       flavors.Get("swap").Value(),
					"os_flv_ext_data_ephemeral":  flavors.Get("OS-FLV-EXT-DATA:ephemeral").Value(),
					"os_flv_disabled_disabled":   flavors.Get("OS-FLV-DISABLED:disabled").Value(),
					"rxtx_factor":                flavors.Get("rxtx_factor").Value(),
					"rxtx_quota":                 flavors.Get("rxtx_quota").Value(),
					"rxtx_cap":                   flavors.Get("rxtx_cap").Value(),
					"os_flavor_access_is_public": flavors.Get("os-flavor-access:is_public").Value(),
					"links": schemas.SliceToList(flavors.Get("links"),
						func(links gjson.Result) any {
							return map[string]any{
								"rel":  links.Get("rel").Value(),
								"href": links.Get("href").Value(),
								"type": links.Get("type").Value(),
							}
						},
					),
					"extra_specs": schemas.SliceToList(flavors.Get("extra_specs"),
						func(extraSpecs gjson.Result) any {
							trafficMirroringSupported := extraSpecs.Get("network_interface:traffic_mirroring_supported").Value()
							return map[string]any{
								"hpet_support":                        extraSpecs.Get("hpet_support").Value(),
								"resource_type":                       extraSpecs.Get("resource_type").Value(),
								"cond_operation_az":                   extraSpecs.Get("cond:operation:az").Value(),
								"quota_max_rate":                      extraSpecs.Get("quota:max_rate").Value(),
								"cond_operation_charge":               extraSpecs.Get("cond:operation:charge").Value(),
								"cond_storage":                        extraSpecs.Get("cond:storage").Value(),
								"info_gpu_name":                       extraSpecs.Get("info:gpu:name").Value(),
								"info_cpu_name":                       extraSpecs.Get("info:cpu:name").Value(),
								"quota_sub_network_interface_max_num": extraSpecs.Get("quota:sub_network_interface_max_num").Value(),
								"quota_nvme_ssd":                      extraSpecs.Get("quota:nvme_ssd").Value(),
								"instance_vnic_type":                  extraSpecs.Get("instance_vnic:type").Value(),
								"instance_vnic_instance_bandwidth":    extraSpecs.Get("instance_vnic:instance_bandwidth").Value(),
								"pci_passthrough_alias":               extraSpecs.Get("pci_passthrough:alias").Value(),
								"cond_network":                        extraSpecs.Get("cond:network").Value(),
								"quota_gpu":                           extraSpecs.Get("quota:gpu").Value(),
								"network_interface_traffic_mirroring_supported": trafficMirroringSupported,
								"info_asic_accelerators":                        extraSpecs.Get("info:asic_accelerators").Value(),
								"hw_numa_nodes":                                 extraSpecs.Get("hw:numa_nodes").Value(),
								"instance_vnic_max_count":                       extraSpecs.Get("instance_vnic:max_count").Value(),
								"extra_spec_io_persistent_grant":                extraSpecs.Get("extra_spec:io:persistent_grant").Value(),
								"pci_passthrough_enable_gpu":                    extraSpecs.Get("pci_passthrough:enable_gpu").Value(),
								"cond_spot_operation_az":                        extraSpecs.Get("cond:spot:operation:az").Value(),
								"quota_vif_max_num":                             extraSpecs.Get("quota:vif_max_num").Value(),
								"ecs_instance_architecture":                     extraSpecs.Get("ecs:instance_architecture").Value(),
								"security_enclave_supported":                    extraSpecs.Get("security:enclave_supported").Value(),
								"info_gpus":                                     extraSpecs.Get("info:gpus").Value(),
								"ecs_performancetype":                           extraSpecs.Get("ecs:performancetype").Value(),
								"quota_local_disk":                              extraSpecs.Get("quota:local_disk").Value(),
								"cond_operation_status":                         extraSpecs.Get("cond:operation:status").Value(),
								"quota_min_rate":                                extraSpecs.Get("quota:min_rate").Value(),
								"cond_operation_roles":                          extraSpecs.Get("cond:operation:roles").Value(),
								"cond_storage_type":                             extraSpecs.Get("cond:storage:type").Value(),
								"ecs_virtualization_env_types":                  extraSpecs.Get("ecs:virtualization_env_types").Value(),
								"pci_passthrough_gpu_specs":                     extraSpecs.Get("pci_passthrough:gpu_specs").Value(),
								"quota_max_pps":                                 extraSpecs.Get("quota:max_pps").Value(),
								"cond_operation_charge_stop":                    extraSpecs.Get("cond:operation:charge:stop").Value(),
								"cond_spot_operation_status":                    extraSpecs.Get("cond:spot:operation:status").Value(),
								"cond_compute_live_resizable":                   extraSpecs.Get("cond:compute:live_resizable").Value(),
								"cond_compute":                                  extraSpecs.Get("cond:compute").Value(),
								"ecs_generation":                                extraSpecs.Get("ecs:generation").Value(),
								"info_features":                                 extraSpecs.Get("info:features").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
