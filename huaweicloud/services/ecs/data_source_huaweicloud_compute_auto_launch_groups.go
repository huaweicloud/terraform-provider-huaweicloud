// Generated by PMS #972
package ecs

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCmsComputeAutoLaunchGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCmsComputeAutoLaunchGroupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the auto launch group.`,
			},
			"valid_since": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the request start time.`,
			},
			"valid_until": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the request end time.`,
			},
			"auto_launch_groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of auto launch groups.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the auto launch group.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the auto launch group.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the request type.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the auto launch group.`,
						},
						"task_state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the auto launch group task.`,
						},
						"valid_since": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the request start time.`,
						},
						"valid_until": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the request end time.`,
						},
					},
				},
			},
		},
	}
}

type CmsComputeAutoLaunchGroupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCmsComputeAutoLaunchGroupsDSWrapper(d *schema.ResourceData, meta interface{}) *CmsComputeAutoLaunchGroupsDSWrapper {
	return &CmsComputeAutoLaunchGroupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCmsComputeAutoLaunchGroupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCmsComputeAutoLaunchGroupsDSWrapper(d, meta)
	lisAutLauGroRst, err := wrapper.ListAutoLaunchGroups()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAutoLaunchGroupsToSchema(lisAutLauGroRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ECS GET /v2/{domain_id}/auto-launch-groups
func (w *CmsComputeAutoLaunchGroupsDSWrapper) ListAutoLaunchGroups() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cms")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{domain_id}/auto-launch-groups"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"name":        w.Get("name"),
		"valid_since": w.Get("valid_since"),
		"valid_until": w.Get("valid_until"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("auto_launch_groups", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *CmsComputeAutoLaunchGroupsDSWrapper) listAutoLaunchGroupsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("auto_launch_groups", schemas.SliceToList(body.Get("auto_launch_groups"),
			func(autLauGroups gjson.Result) any {
				return map[string]any{
					"id":          autLauGroups.Get("id").Value(),
					"name":        autLauGroups.Get("name").Value(),
					"type":        autLauGroups.Get("type").Value(),
					"status":      autLauGroups.Get("status").Value(),
					"task_state":  autLauGroups.Get("task_state").Value(),
					"valid_since": autLauGroups.Get("valid_since").Value(),
					"valid_until": autLauGroups.Get("valid_until").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
