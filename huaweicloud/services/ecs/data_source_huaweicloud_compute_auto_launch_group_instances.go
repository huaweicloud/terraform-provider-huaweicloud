// Generated by PMS #974
package ecs

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCmsComputeAutoLaunchGroupInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCmsComputeAutoLaunchGroupInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"auto_launch_group_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the auto launch group.`,
			},
			"instances": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of the instance created by the auto launch group.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the instance.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates name ID of the instance.`,
						},
						"flavor_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates flavor ID of the instance.`,
						},
						"availability_zone_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the AZ.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates state of the instance.`,
						},
						"sell_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the sales model of the instance.`,
						},
					},
				},
			},
		},
	}
}

type CmsComputeAutoLaunchGroupInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCmsComputeAutoLaunchGroupInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *CmsComputeAutoLaunchGroupInstancesDSWrapper {
	return &CmsComputeAutoLaunchGroupInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCmsComputeAutoLaunchGroupInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCmsComputeAutoLaunchGroupInstancesDSWrapper(d, meta)
	listInstancesRst, err := wrapper.ListInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listInstancesToSchema(listInstancesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ECS GET /v2/{domain_id}/auto-launch-groups/{auto_launch_group_id}/instances
func (w *CmsComputeAutoLaunchGroupInstancesDSWrapper) ListInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cms")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{domain_id}/auto-launch-groups/{auto_launch_group_id}/instances"
	uri = strings.ReplaceAll(uri, "{auto_launch_group_id}", w.Get("auto_launch_group_id").(string))
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		MarkerPager("instances", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *CmsComputeAutoLaunchGroupInstancesDSWrapper) listInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("instances", schemas.SliceToList(body.Get("instances"),
			func(instances gjson.Result) any {
				return map[string]any{
					"id":                   instances.Get("id").Value(),
					"name":                 instances.Get("name").Value(),
					"flavor_id":            instances.Get("flavor_id").Value(),
					"availability_zone_id": instances.Get("availability_zone_id").Value(),
					"status":               instances.Get("status").Value(),
					"sell_mode":            instances.Get("sell_mode").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
