// Generated by PMS #948
package ecs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEcsComputeTemplates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEcsComputeTemplatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"launch_template_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the template IDs.`,
			},
			"name": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the template names.`,
			},
			"launch_templates": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of templates.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the template ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the template name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the template description.`,
						},
						"default_version": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the default version of the template.`,
						},
						"latest_version": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the latest version of the template.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the template was created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the template was updated.`,
						},
					},
				},
			},
		},
	}
}

type ComputeTemplatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newComputeTemplatesDSWrapper(d *schema.ResourceData, meta interface{}) *ComputeTemplatesDSWrapper {
	return &ComputeTemplatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEcsComputeTemplatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newComputeTemplatesDSWrapper(d, meta)
	listTemplatesRst, err := wrapper.ListTemplates()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listTemplatesToSchema(listTemplatesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ECS GET /v3/{project_id}/launch-templates
func (w *ComputeTemplatesDSWrapper) ListTemplates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ecs")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/launch-templates"
	params := map[string]any{
		"launch_template_id": w.ListToArray("launch_template_id"),
		"name":               w.ListToArray("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("launch_templates", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *ComputeTemplatesDSWrapper) listTemplatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("launch_templates", schemas.SliceToList(body.Get("launch_templates"),
			func(launchTemplates gjson.Result) any {
				return map[string]any{
					"id":              launchTemplates.Get("id").Value(),
					"name":            launchTemplates.Get("name").Value(),
					"description":     launchTemplates.Get("description").Value(),
					"default_version": launchTemplates.Get("default_version").Value(),
					"latest_version":  launchTemplates.Get("latest_version").Value(),
					"created_at":      launchTemplates.Get("created_at").Value(),
					"updated_at":      launchTemplates.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
