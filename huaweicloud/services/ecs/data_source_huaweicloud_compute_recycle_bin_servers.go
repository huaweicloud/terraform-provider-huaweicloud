// Generated by PMS #969
package ecs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEcsComputeRecycleBinServers() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEcsComputeRecycleBinServersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ECS name, which is fuzzy-matched.`,
			},
			"all_tenants": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether query ECSs for all tenants.`,
			},
			"availability_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the availability zone.`,
			},
			"expect_fields": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the controls the query output.`,
			},
			"ip_address": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the IP address.`,
			},
			"tags": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the queries ECSs with tags containing the specified value.`,
			},
			"tags_key": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the queries ECSs with tags containing the specified key.`,
			},
			"servers": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the ECS information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"os_scheduler_hints": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the ECS scheduling information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"group": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the ECS group ID in UUID format.`,
									},
									"tenancy": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates creates ECSs on a dedicated or shared host.`,
									},
									"dedicated_host_id": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the dedicated host ID.`,
									},
								},
							},
						},
						"sys_tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the ECS system tags.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the system tag key.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the system tag value.`,
									},
								},
							},
						},
						"os_ext_sts_task_state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ECS task status.`,
						},
						"os_ext_sts_power_state": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the power status of the ECS.`,
						},
						"os_srv_usg_terminated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the ECS was deleted.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ECS description.`,
						},
						"progress": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the ECS progress.`,
						},
						"metadata": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the ECS metadata`,
						},
						"os_ext_srv_attr_root_device_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the device name of the ECS system disk.`,
						},
						"locked": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether an ECS is locked.`,
						},
						"flavor": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the ECS flavor.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ram": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the memory size (MiB) in the ECS flavor.`,
									},
									"gpus": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the GPU information in the ECS flavor.`,
										Elem:        serversFlavorGpusElem(),
									},
									"asic_accelerators": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the ASIC information in the ECS flavor.`,
										Elem:        serversFlavorAsicAcceleratorsElem(),
									},
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ECS flavor ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ECS flavor name.`,
									},
									"disk": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the system disk size in the ECS flavor.`,
									},
									"vcpus": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the number of vCPUs in the ECS flavor.`,
									},
								},
							},
						},
						"user_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the user for creating the ECS.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ECS name.`,
						},
						"config_drive": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the config drive.`,
						},
						"security_options": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the security options.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"secure_boot_enabled": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether support secure boot.`,
									},
									"tpm_enabled": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether support vtpm start.`,
									},
								},
							},
						},
						"hypervisor": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the virtualization information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"hypervisor_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the virtualization type.`,
									},
									"csd_hypervisor": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the hypervisor csd info.`,
									},
								},
							},
						},
						"host_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the host where the ECS located.`,
						},
						"os_ext_srv_attr_hypervisor_hostname": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the host on which the ECS is deployed.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ECS ID in UUID format.`,
						},
						"os_ext_srv_attr_reservation_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID reserved for the ECSs to be created in a batch.`,
						},
						"os_ext_srv_attr_launch_index": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the sequence in which ECSs start if the ECSs are created in a batch.`,
						},
						"tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates ECS tags.`,
						},
						"os_ext_srv_attr_instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ECS alias.`,
						},
						"security_groups": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the security groups of the ECS.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the security group name or UUID.`,
									},
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the security group ID.`,
									},
								},
							},
						},
						"os_extended_volumes_volumes_attached": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the disks attached to an ECS.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the disk ID in UUID format.`,
									},
									"delete_on_termination": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates whether the disk is deleted with the ECS.`,
									},
									"boot_index": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the EVS disk boot sequence.`,
									},
									"device": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the drive letter of the EVS disk.`,
									},
								},
							},
						},
						"cpu_options": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the CPU options.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"hw_cpu_threads": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates whether to enable CPU hyper-threading.`,
									},
								},
							},
						},
						"os_ext_az_availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the AZ of an ECS.`,
						},
						"host_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the host accommodating the ECS.`,
						},
						"os_ext_srv_attr_ramdisk_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the UUID of the ramdisk image if an AMI image is used.`,
						},
						"os_ext_srv_attr_kernel_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the UUID of the kernel image if an AMI image is used.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
						"updated": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the last time when the ECS was updated.`,
						},
						"auto_terminate_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the scheduled deletion time for the ECS.`,
						},
						"os_ext_sts_vm_state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ECS status.`,
						},
						"os_ext_srv_attr_hostname": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host name of the ECS.`,
						},
						"os_ext_srv_attr_host": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the host where the ECS is deployed.`,
						},
						"os_dcf_disk_config": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the disk configuration type.`,
						},
						"os_srv_usg_launched_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the ECS was started.`,
						},
						"os_ext_srv_attr_user_data": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the user data (encoded) configured during ECS creation.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates  the ECS status.`,
						},
						"key_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the key pair that is used to authenticate an ECS.`,
						},
						"image": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the ECS image.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the image ID.`,
									},
								},
							},
						},
						"created": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the ECS was created.`,
						},
						"network_interfaces": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the network interface information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"port_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the port ID.`,
									},
									"primary": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether the network interface is a primary network interface.`,
									},
									"ip_addresses": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates private IPv4 addresses.`,
									},
									"ipv6_addresses": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates private IPv6 addresses.`,
									},
									"association": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates information about the associated EIP.`,
										Elem:        serNetIntAssElem(),
									},
									"subnet_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the subnet ID.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// serversFlavorGpusElem
// The Elem of "servers.flavor.gpus"
func serversFlavorGpusElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of GPUs.`,
			},
			"memory_mb": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the GPU memory size, in MB.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the GPU name.`,
			},
		},
	}
}

// serversFlavorAsicAcceleratorsElem
// The Elem of "servers.flavor.asic_accelerators"
func serversFlavorAsicAcceleratorsElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"memory_mb": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the ASIC memory size, in MB.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the ASIC name.`,
			},
			"count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of ASICs.`,
			},
		},
	}
}

// serNetIntAssElem
// The Elem of "servers.network_interfaces.association"
func serNetIntAssElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"public_ip_address": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the IPv4 address of the EIP.`,
			},
		},
	}
}

type ComputeRecycleBinServersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newComputeRecycleBinServersDSWrapper(d *schema.ResourceData, meta interface{}) *ComputeRecycleBinServersDSWrapper {
	return &ComputeRecycleBinServersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEcsComputeRecycleBinServersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newComputeRecycleBinServersDSWrapper(d, meta)
	lisRecBinSerRst, err := wrapper.ListRecycleBinServers()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listRecycleBinServersToSchema(lisRecBinSerRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ECS GET /v1/{project_id}/recycle-bin/cloudservers
func (w *ComputeRecycleBinServersDSWrapper) ListRecycleBinServers() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ecs")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/recycle-bin/cloudservers"
	params := map[string]any{
		"all_tenants":       w.Get("all_tenants"),
		"availability_zone": w.Get("availability_zone"),
		"expect-fields":     w.Get("expect_fields"),
		"ip_address":        w.Get("ip_address"),
		"name":              w.Get("name"),
		"tags":              w.ListToArray("tags"),
		"tags_key":          w.ListToArray("tags_key"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("servers", "servers[-1].id", "marker").
		Request().
		Result()
}

func (w *ComputeRecycleBinServersDSWrapper) listRecycleBinServersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("servers", schemas.SliceToList(body.Get("servers"),
			func(servers gjson.Result) any {
				return map[string]any{
					"os_scheduler_hints": schemas.SliceToList(servers.Get("os:scheduler_hints"),
						func(osSchedulerHints gjson.Result) any {
							return map[string]any{
								"group":             schemas.SliceToStrList(osSchedulerHints.Get("group")),
								"tenancy":           schemas.SliceToStrList(osSchedulerHints.Get("tenancy")),
								"dedicated_host_id": schemas.SliceToStrList(osSchedulerHints.Get("dedicated_host_id")),
							}
						},
					),
					"sys_tags": schemas.SliceToList(servers.Get("sys_tags"),
						func(sysTags gjson.Result) any {
							return map[string]any{
								"key":   sysTags.Get("key").Value(),
								"value": sysTags.Get("value").Value(),
							}
						},
					),
					"os_ext_sts_task_state":            servers.Get("OS-EXT-STS:task_state").Value(),
					"os_ext_sts_power_state":           servers.Get("OS-EXT-STS:power_state").Value(),
					"os_srv_usg_terminated_at":         servers.Get("OS-SRV-USG:terminated_at").Value(),
					"description":                      servers.Get("description").Value(),
					"progress":                         servers.Get("progress").Value(),
					"metadata":                         schemas.MapToStrMap(servers.Get("metadata")),
					"os_ext_srv_attr_root_device_name": servers.Get("OS-EXT-SRV-ATTR:root_device_name").Value(),
					"locked":                           servers.Get("locked").Value(),
					"flavor": schemas.SliceToList(servers.Get("flavor"),
						func(flavor gjson.Result) any {
							return map[string]any{
								"ram":               flavor.Get("ram").Value(),
								"gpus":              w.setServersFlavorGpus(flavor),
								"asic_accelerators": w.setSerFlaAsiAcc(flavor),
								"id":                flavor.Get("id").Value(),
								"name":              flavor.Get("name").Value(),
								"disk":              flavor.Get("disk").Value(),
								"vcpus":             flavor.Get("vcpus").Value(),
							}
						},
					),
					"user_id":      servers.Get("user_id").Value(),
					"name":         servers.Get("name").Value(),
					"config_drive": servers.Get("config_drive").Value(),
					"security_options": schemas.SliceToList(servers.Get("security_options"),
						func(securityOptions gjson.Result) any {
							return map[string]any{
								"secure_boot_enabled": securityOptions.Get("secure_boot_enabled").Value(),
								"tpm_enabled":         securityOptions.Get("tpm_enabled").Value(),
							}
						},
					),
					"hypervisor": schemas.SliceToList(servers.Get("hypervisor"),
						func(hypervisor gjson.Result) any {
							return map[string]any{
								"hypervisor_type": hypervisor.Get("hypervisor_type").Value(),
								"csd_hypervisor":  hypervisor.Get("csd_hypervisor").Value(),
							}
						},
					),
					"host_id":                             servers.Get("hostId").Value(),
					"os_ext_srv_attr_hypervisor_hostname": servers.Get("OS-EXT-SRV-ATTR:hypervisor_hostname").Value(),
					"id":                                  servers.Get("id").Value(),
					"os_ext_srv_attr_reservation_id":      servers.Get("OS-EXT-SRV-ATTR:reservation_id").Value(),
					"os_ext_srv_attr_launch_index":        servers.Get("OS-EXT-SRV-ATTR:launch_index").Value(),
					"tags":                                schemas.SliceToStrList(servers.Get("tags")),
					"os_ext_srv_attr_instance_name":       servers.Get("OS-EXT-SRV-ATTR:instance_name").Value(),
					"security_groups": schemas.SliceToList(servers.Get("security_groups"),
						func(securityGroups gjson.Result) any {
							return map[string]any{
								"name": securityGroups.Get("name").Value(),
								"id":   securityGroups.Get("id").Value(),
							}
						},
					),
					"os_extended_volumes_volumes_attached": schemas.SliceToList(servers.Get("os-extended-volumes:volumes_attached"),
						func(osExtVolAttached gjson.Result) any {
							return map[string]any{
								"id":                    osExtVolAttached.Get("id").Value(),
								"delete_on_termination": osExtVolAttached.Get("delete_on_termination").Value(),
								"boot_index":            osExtVolAttached.Get("bootIndex").Value(),
								"device":                osExtVolAttached.Get("device").Value(),
							}
						},
					),
					"cpu_options": schemas.SliceToList(servers.Get("cpu_options"),
						func(cpuOptions gjson.Result) any {
							return map[string]any{
								"hw_cpu_threads": cpuOptions.Get("hw:cpu_threads").Value(),
							}
						},
					),
					"os_ext_az_availability_zone": servers.Get("OS-EXT-AZ:availability_zone").Value(),
					"host_status":                 servers.Get("host_status").Value(),
					"os_ext_srv_attr_ramdisk_id":  servers.Get("OS-EXT-SRV-ATTR:ramdisk_id").Value(),
					"os_ext_srv_attr_kernel_id":   servers.Get("OS-EXT-SRV-ATTR:kernel_id").Value(),
					"enterprise_project_id":       servers.Get("enterprise_project_id").Value(),
					"updated":                     servers.Get("updated").Value(),
					"auto_terminate_time":         servers.Get("auto_terminate_time").Value(),
					"os_ext_sts_vm_state":         servers.Get("OS-EXT-STS:vm_state").Value(),
					"os_ext_srv_attr_hostname":    servers.Get("OS-EXT-SRV-ATTR:hostname").Value(),
					"os_ext_srv_attr_host":        servers.Get("OS-EXT-SRV-ATTR:host").Value(),
					"os_dcf_disk_config":          servers.Get("OS-DCF:diskConfig").Value(),
					"os_srv_usg_launched_at":      servers.Get("OS-SRV-USG:launched_at").Value(),
					"os_ext_srv_attr_user_data":   servers.Get("OS-EXT-SRV-ATTR:user_data").Value(),
					"status":                      servers.Get("status").Value(),
					"key_name":                    servers.Get("key_name").Value(),
					"image": schemas.SliceToList(servers.Get("image"),
						func(image gjson.Result) any {
							return map[string]any{
								"id": image.Get("id").Value(),
							}
						},
					),
					"created": servers.Get("created").Value(),
					"network_interfaces": schemas.SliceToList(servers.Get("network_interfaces"),
						func(networkInterfaces gjson.Result) any {
							return map[string]any{
								"port_id":        networkInterfaces.Get("port_id").Value(),
								"primary":        networkInterfaces.Get("primary").Value(),
								"ip_addresses":   schemas.SliceToStrList(networkInterfaces.Get("ip_addresses")),
								"ipv6_addresses": schemas.SliceToStrList(networkInterfaces.Get("ipv6_addresses")),
								"association":    w.setSerNetIntAss(networkInterfaces),
								"subnet_id":      networkInterfaces.Get("subnet_id").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*ComputeRecycleBinServersDSWrapper) setServersFlavorGpus(flavor gjson.Result) any {
	return schemas.SliceToList(flavor.Get("gpus"), func(gpus gjson.Result) any {
		return map[string]any{
			"count":     gpus.Get("count").Value(),
			"memory_mb": gpus.Get("memory_mb").Value(),
			"name":      gpus.Get("name").Value(),
		}
	})
}

func (*ComputeRecycleBinServersDSWrapper) setSerFlaAsiAcc(flavor gjson.Result) any {
	return schemas.SliceToList(flavor.Get("asic_accelerators"), func(asicAccelerators gjson.Result) any {
		return map[string]any{
			"memory_mb": asicAccelerators.Get("memory_mb").Value(),
			"name":      asicAccelerators.Get("name").Value(),
			"count":     asicAccelerators.Get("count").Value(),
		}
	})
}

func (*ComputeRecycleBinServersDSWrapper) setSerNetIntAss(networkInterfaces gjson.Result) any {
	return schemas.SliceToList(networkInterfaces.Get("association"), func(association gjson.Result) any {
		return map[string]any{
			"public_ip_address": association.Get("public_ip_address").Value(),
		}
	})
}
