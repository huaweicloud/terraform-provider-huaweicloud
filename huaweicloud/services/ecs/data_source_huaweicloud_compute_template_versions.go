// Generated by PMS #949
package ecs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEcsComputeTemplateVersions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEcsComputeTemplateVersionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"launch_template_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the template ID.`,
			},
			"flavor_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the flavor ID of the template.`,
			},
			"version": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeInt},
				Description: `Specifies the template versions.`,
			},
			"launch_template_versions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of template versions.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"launch_template_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the template ID.`,
						},
						"version_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the template version ID.`,
						},
						"version_number": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the template version.`,
						},
						"version_description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the template version description.`,
						},
						"template_data": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the data info of the template.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"flavor_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the flavor ID of the ECS created based on the template.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the template name.`,
									},
									"description": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the template description.`,
									},
									"availability_zone_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the AZ of the template.`,
									},
									"enterprise_project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the enterprise project ID of the template.`,
									},
									"auto_recovery": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether enable auto-recovery.`,
									},
									"os_profile": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the OS attributes.`,
										Elem:        lauTemVerTemDataOsProfileElem(),
									},
									"security_group_ids": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the security group ID list.`,
									},
									"network_interfaces": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the network interfaces.`,
										Elem:        lauTemVerTemDataNetIntElem(),
									},
									"block_device_mappings": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the BDM mounting information.`,
										Elem:        lauTemVerTemDataBloDevMappingsElem(),
									},
									"market_options": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the billing information.`,
										Elem:        lauTemVerTemDataMarOptionsElem(),
									},
									"internet_access": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the public network access.`,
										Elem:        lauTemVerTemDataIntAccessElem(),
									},
									"metadata": {
										Type:        schema.TypeMap,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the metadata.`,
									},
									"tag_options": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the VM tags.`,
										Elem:        lauTemVerTemDataTagOptionsElem(),
									},
								},
							},
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the template version was created.`,
						},
					},
				},
			},
		},
	}
}

// lauTemVerTemDataMarOptionsElem
// The Elem of "launch_template_versions.template_data.market_options"
func lauTemVerTemDataMarOptionsElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"market_type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the billing mode.`,
			},
			"spot_options": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates spot instance parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"spot_price": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates  the highest price per hour you are willing to pay for a spot ECS.`,
						},
						"block_duration_minutes": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the predefined duration of the spot ECS.`,
						},
						"instance_interruption_behavior": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the spot ECS interruption policy, which can only be set to **immediate** currently.`,
						},
					},
				},
			},
		},
	}
}

// lauTemVerTemDataIntAccessElem
// The Elem of "launch_template_versions.template_data.internet_access"
func lauTemVerTemDataIntAccessElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"publicip": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the public network access.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"publicip_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the EIP type.`,
						},
						"charging_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the EIP billing mode.`,
						},
						"bandwidth": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the EIP bandwidth.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"share_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth type.`,
									},
									"size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the bandwidth size.`,
									},
									"charge_mode": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the billing mode.`,
									},
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth ID.`,
									},
								},
							},
						},
						"delete_on_termination": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the EIP is released along with the instance.`,
						},
					},
				},
			},
		},
	}
}

// lauTemVerTemDataTagOptionsElem
// The Elem of "launch_template_versions.template_data.tag_options"
func lauTemVerTemDataTagOptionsElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"tags": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the tags.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the tag key.`,
						},
						"key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the tag value.`,
						},
					},
				},
			},
		},
	}
}

// lauTemVerTemDataOsProfileElem
// The Elem of "launch_template_versions.template_data.os_profile"
func lauTemVerTemDataOsProfileElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"key_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the key name.`,
			},
			"user_data": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the custom user data to be injected into the instance during instance creation.`,
			},
			"iam_agency_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the agency name.`,
			},
			"enable_monitoring_service": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Indicates whether enable HSS.`,
			},
		},
	}
}

// lauTemVerTemDataNetIntElem
// The Elem of "launch_template_versions.template_data.network_interfaces"
func lauTemVerTemDataNetIntElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"virsubnet_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the subnet ID.`,
			},
			"attachment": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the network interface details.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"device_index": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the loading sequence. The value 0 indicates the primary network interface.`,
						},
					},
				},
			},
		},
	}
}

// lauTemVerTemDataBloDevMappingsElem
// The Elem of "launch_template_versions.template_data.block_device_mappings"
func lauTemVerTemDataBloDevMappingsElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"volume_type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the volume type.`,
			},
			"volume_size": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the volume size.`,
			},
			"attachment": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the disk interface`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"boot_index": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the loading sequence.`,
						},
						"delete_on_termination": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the disk is released along with the instance.`,
						},
					},
				},
			},
			"source_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the data source type of the ECS volume.`,
			},
			"source_type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the source type of the volume device.`,
			},
			"encrypted": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Indicates the encrypted or not.`,
			},
			"cmk_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the key ID.`,
			},
		},
	}
}

type ComputeTemplateVersionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newComputeTemplateVersionsDSWrapper(d *schema.ResourceData, meta interface{}) *ComputeTemplateVersionsDSWrapper {
	return &ComputeTemplateVersionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEcsComputeTemplateVersionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newComputeTemplateVersionsDSWrapper(d, meta)
	lisLauTemVerRst, err := wrapper.ListLaunchTemplateVersions()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listLaunchTemplateVersionsToSchema(lisLauTemVerRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ECS GET /v3/{project_id}/launch-template-versions
func (w *ComputeTemplateVersionsDSWrapper) ListLaunchTemplateVersions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ecs")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/launch-template-versions"
	params := map[string]any{
		"launch_template_id": w.Get("launch_template_id"),
		"flavor_id":          w.Get("flavor_id"),
		"version":            w.ListToArray("version"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("launch_template_versions", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *ComputeTemplateVersionsDSWrapper) listLaunchTemplateVersionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("launch_template_versions", schemas.SliceToList(body.Get("launch_template_versions"),
			func(lauTemVersions gjson.Result) any {
				return map[string]any{
					"launch_template_id":  lauTemVersions.Get("launch_template_id").Value(),
					"version_id":          lauTemVersions.Get("version_id").Value(),
					"version_number":      lauTemVersions.Get("version_number").Value(),
					"version_description": lauTemVersions.Get("version_description").Value(),
					"template_data": schemas.SliceToList(lauTemVersions.Get("template_data"),
						func(templateData gjson.Result) any {
							return map[string]any{
								"flavor_id":             templateData.Get("flavor_id").Value(),
								"name":                  templateData.Get("name").Value(),
								"description":           templateData.Get("description").Value(),
								"availability_zone_id":  templateData.Get("availability_zone_id").Value(),
								"enterprise_project_id": templateData.Get("enterprise_project_id").Value(),
								"auto_recovery":         templateData.Get("auto_recovery").Value(),
								"os_profile":            w.setLtvtdop(templateData),
								"security_group_ids":    schemas.SliceToStrList(templateData.Get("security_group_ids")),
								"network_interfaces":    w.setLtvtdni(templateData),
								"block_device_mappings": w.setLtvtdbdm(templateData),
								"market_options":        w.setLtvtdmo(templateData),
								"internet_access":       w.setLtvtdia(templateData),
								"metadata":              schemas.MapToStrMap(templateData.Get("metadata")),
								"tag_options":           w.setLtvtdto(templateData),
							}
						},
					),
					"created_at": lauTemVersions.Get("created_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*ComputeTemplateVersionsDSWrapper) setLtvtdop(templateData gjson.Result) any {
	return schemas.SliceToList(templateData.Get("os_profile"), func(osProfile gjson.Result) any {
		return map[string]any{
			"key_name":                  osProfile.Get("key_name").Value(),
			"user_data":                 osProfile.Get("user_data").Value(),
			"iam_agency_name":           osProfile.Get("iam_agency_name").Value(),
			"enable_monitoring_service": osProfile.Get("enable_monitoring_service").Value(),
		}
	})
}

func (*ComputeTemplateVersionsDSWrapper) setLtvtdni(templateData gjson.Result) any {
	return schemas.SliceToList(templateData.Get("network_interfaces"), func(networkInterfaces gjson.Result) any {
		return map[string]any{
			"virsubnet_id": networkInterfaces.Get("virsubnet_id").Value(),
			"attachment": schemas.SliceToList(networkInterfaces.Get("attachment"),
				func(attachment gjson.Result) any {
					return map[string]any{
						"device_index": attachment.Get("device_index").Value(),
					}
				},
			),
		}
	})
}

func (*ComputeTemplateVersionsDSWrapper) setLtvtdbdm(templateData gjson.Result) any {
	return schemas.SliceToList(templateData.Get("block_device_mappings"), func(blockDeviceMappings gjson.Result) any {
		return map[string]any{
			"volume_type": blockDeviceMappings.Get("volume_type").Value(),
			"volume_size": blockDeviceMappings.Get("volume_size").Value(),
			"attachment": schemas.SliceToList(blockDeviceMappings.Get("attachment"),
				func(attachment gjson.Result) any {
					return map[string]any{
						"boot_index":            attachment.Get("boot_index").Value(),
						"delete_on_termination": attachment.Get("delete_on_termination").Value(),
					}
				},
			),
			"source_id":   blockDeviceMappings.Get("source_id").Value(),
			"source_type": blockDeviceMappings.Get("source_type").Value(),
			"encrypted":   blockDeviceMappings.Get("encrypted").Value(),
			"cmk_id":      blockDeviceMappings.Get("cmk_id").Value(),
		}
	})
}

func (*ComputeTemplateVersionsDSWrapper) setLtvtdmo(templateData gjson.Result) any {
	return schemas.SliceToList(templateData.Get("market_options"), func(marketOptions gjson.Result) any {
		return map[string]any{
			"market_type": marketOptions.Get("market_type").Value(),
			"spot_options": schemas.SliceToList(marketOptions.Get("spot_options"),
				func(spotOptions gjson.Result) any {
					return map[string]any{
						"spot_price":                     spotOptions.Get("spot_price").Value(),
						"block_duration_minutes":         spotOptions.Get("block_duration_minutes").Value(),
						"instance_interruption_behavior": spotOptions.Get("instance_interruption_behavior").Value(),
					}
				},
			),
		}
	})
}

func (*ComputeTemplateVersionsDSWrapper) setLtvtdia(templateData gjson.Result) any {
	return schemas.SliceToList(templateData.Get("internet_access"), func(internetAccess gjson.Result) any {
		return map[string]any{
			"publicip": schemas.SliceToList(internetAccess.Get("publicip"),
				func(publicip gjson.Result) any {
					return map[string]any{
						"publicip_type": publicip.Get("publicip_type").Value(),
						"charging_mode": publicip.Get("charging_mode").Value(),
						"bandwidth": schemas.SliceToList(publicip.Get("bandwidth"),
							func(bandwidth gjson.Result) any {
								return map[string]any{
									"share_type":  bandwidth.Get("share_type").Value(),
									"size":        bandwidth.Get("size").Value(),
									"charge_mode": bandwidth.Get("charge_mode").Value(),
									"id":          bandwidth.Get("id").Value(),
								}
							},
						),
						"delete_on_termination": publicip.Get("delete_on_termination").Value(),
					}
				},
			),
		}
	})
}

func (*ComputeTemplateVersionsDSWrapper) setLtvtdto(templateData gjson.Result) any {
	return schemas.SliceToList(templateData.Get("tag_options"), func(tagOptions gjson.Result) any {
		return map[string]any{
			"tags": schemas.SliceToList(tagOptions.Get("tags"),
				func(tags gjson.Result) any {
					return map[string]any{
						"value": tags.Get("value").Value(),
						"key":   tags.Get("key").Value(),
					}
				},
			),
		}
	})
}
