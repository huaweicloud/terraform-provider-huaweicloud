// Generated by PMS #670
package secmaster

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSecmasterPlaybookActions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSecmasterPlaybookActionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"workspace_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the workspace ID.`,
			},
			"version_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the playbook version ID.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the playbook workflows.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook workflow action ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workflow name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workflow action description.`,
						},
						"action_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workflow ID.`,
						},
						"action_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workflow action type.`,
						},
						"playbook_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook ID.`,
						},
						"playbook_version_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook version ID.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project ID.`,
						},
					},
				},
			},
		},
	}
}

type PlaybookActionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPlaybookActionsDSWrapper(d *schema.ResourceData, meta interface{}) *PlaybookActionsDSWrapper {
	return &PlaybookActionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSecmasterPlaybookActionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPlaybookActionsDSWrapper(d, meta)
	lisPlaActRst, err := wrapper.ListPlaybookActions()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPlaybookActionsToSchema(lisPlaActRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SECMASTER GET /v1/{project_id}/workspaces/{workspace_id}/soc/playbooks/versions/{version_id}/actions
func (w *PlaybookActionsDSWrapper) ListPlaybookActions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "secmaster")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/workspaces/{workspace_id}/soc/playbooks/versions/{version_id}/actions"
	uri = strings.ReplaceAll(uri, "{workspace_id}", w.Get("workspace_id").(string))
	uri = strings.ReplaceAll(uri, "{version_id}", w.Get("version_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *PlaybookActionsDSWrapper) listPlaybookActionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"id":                  data.Get("id").Value(),
					"name":                data.Get("name").Value(),
					"description":         data.Get("description").Value(),
					"action_id":           data.Get("action_id").Value(),
					"action_type":         data.Get("action_type").Value(),
					"playbook_id":         data.Get("playbook_id").Value(),
					"playbook_version_id": data.Get("playbook_version_id").Value(),
					"project_id":          data.Get("project_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
