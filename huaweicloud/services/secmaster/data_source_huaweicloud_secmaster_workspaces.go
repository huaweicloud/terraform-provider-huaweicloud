// Generated by PMS #291
package secmaster

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSecmasterWorkspaces() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSecmasterWorkspacesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"ids": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the workspace IDs, which is separated by commas (,).`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the workspace name.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the workspace description.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"is_view": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether to query the view. The value can be **true** or **false**.`,
			},
			"view_bind_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the space ID bound to the view.`,
			},
			"view_bind_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the space name bound to the view.`,
			},
			"create_time_start": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the creation start time, for example, 2024-04-26T16:08:09Z+0800.`,
			},
			"create_time_end": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the creation end time, for example, 2024-04-2T16:08:09Z+0800.`,
			},
			"workspaces": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of workspaces.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workspace ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workspace name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workspace description.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID.`,
						},
						"enterprise_project_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project name.`,
						},
						"is_view": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the view is used.`,
						},
						"view_bind_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The space ID bound to the view.`,
						},
						"view_bind_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The space name bound to the view.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
					},
				},
			},
		},
	}
}

type WorkspacesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newWorkspacesDSWrapper(d *schema.ResourceData, meta interface{}) *WorkspacesDSWrapper {
	return &WorkspacesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSecmasterWorkspacesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newWorkspacesDSWrapper(d, meta)
	listWorkspacesRst, err := wrapper.ListWorkspaces()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listWorkspacesToSchema(listWorkspacesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SecMaster GET /v1/{project_id}/workspaces
func (w *WorkspacesDSWrapper) ListWorkspaces() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "secmaster")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/workspaces"
	params := map[string]any{
		"name":                  w.Get("name"),
		"description":           w.Get("description"),
		"view_bind_id":          w.Get("view_bind_id"),
		"view_bind_name":        w.Get("view_bind_name"),
		"create_time_start":     w.Get("create_time_start"),
		"create_time_end":       w.Get("create_time_end"),
		"is_view":               w.Get("is_view", true),
		"ids":                   w.Get("ids"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("workspaces", "offset", "limit", 100).
		Request().
		Result()
}

func (w *WorkspacesDSWrapper) listWorkspacesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("workspaces", schemas.SliceToList(body.Get("workspaces"),
			func(workspaces gjson.Result) any {
				return map[string]any{
					"id":                      workspaces.Get("id").Value(),
					"name":                    workspaces.Get("name").Value(),
					"description":             workspaces.Get("description").Value(),
					"enterprise_project_id":   workspaces.Get("enterprise_project_id").Value(),
					"enterprise_project_name": workspaces.Get("enterprise_project_name").Value(),
					"is_view":                 workspaces.Get("is_view").Value(),
					"view_bind_id":            workspaces.Get("view_bind_id").Value(),
					"view_bind_name":          workspaces.Get("view_bind_name").Value(),
					"created_at":              workspaces.Get("create_time").Value(),
					"updated_at":              workspaces.Get("update_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
