// Generated by PMS #525
package secmaster

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSecmasterAlertRuleMetrics() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSecmasterAlertRuleMetricsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"workspace_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the workspace ID.`,
			},
			"metrics": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The metrics value.`,
			},
		},
	}
}

type AlertRuleMetricsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAlertRuleMetricsDSWrapper(d *schema.ResourceData, meta interface{}) *AlertRuleMetricsDSWrapper {
	return &AlertRuleMetricsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSecmasterAlertRuleMetricsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAlertRuleMetricsDSWrapper(d, meta)
	lisAleRulMetRst, err := wrapper.ListAlertRuleMetrics()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAlertRuleMetricsToSchema(lisAleRulMetRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SECMASTER GET /v1/{project_id}/workspaces/{workspace_id}/siem/alert-rules/metrics
func (w *AlertRuleMetricsDSWrapper) ListAlertRuleMetrics() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "secmaster")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/workspaces/{workspace_id}/siem/alert-rules/metrics"
	uri = strings.ReplaceAll(uri, "{workspace_id}", w.Get("workspace_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *AlertRuleMetricsDSWrapper) listAlertRuleMetricsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("metrics", utils.JsonToString(body.Value())),
	)
	return mErr.ErrorOrNil()
}
