// Generated by PMS #295
package secmaster

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSecmasterWorkflows() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSecmasterWorkflowsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"workspace_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the workspace ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the workflow name.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the workflow type.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the workflow description.`,
			},
			"data_class_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the data class ID.`,
			},
			"data_class_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the data class name.`,
			},
			"enabled": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether the version is enabled. The value can be **true** and **false**.`,
			},
			"last_version": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether the version is the latest. The value can be **true** and **false**.`,
			},
			"workflows": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The workflow list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workflow ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workflow name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workflow type.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workflow description.`,
						},
						"data_class_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the data class.`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the version is enabled.`,
						},
						"version_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workflow version ID.`,
						},
						"engine_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of engine.`,
						},
						"current_approval_version_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The version to be approved currently.`,
						},
						"current_rejected_version_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The version that has been rejected currently.`,
						},
						"edit_role": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The edit role.`,
						},
						"approve_role": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The approval role.`,
						},
						"use_role": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The user role.`,
						},
						"workspace_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workspace ID.`,
						},
					},
				},
			},
		},
	}
}

type WorkflowsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newWorkflowsDSWrapper(d *schema.ResourceData, meta interface{}) *WorkflowsDSWrapper {
	return &WorkflowsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSecmasterWorkflowsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newWorkflowsDSWrapper(d, meta)
	listWorkflowsRst, err := wrapper.ListWorkflows()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listWorkflowsToSchema(listWorkflowsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SecMaster GET /v1/{project_id}/workspaces/{workspace_id}/soc/workflows
func (w *WorkflowsDSWrapper) ListWorkflows() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "secmaster")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/workspaces/{workspace_id}/soc/workflows"
	uri = strings.ReplaceAll(uri, "{workspace_id}", w.Get("workspace_id").(string))
	params := map[string]any{
		"enabled":        w.Get("enabled", true),
		"last_version":   w.Get("last_version", true),
		"name":           w.Get("name"),
		"description":    w.Get("description"),
		"dataclass_id":   w.Get("data_class_id"),
		"dataclass_name": w.Get("data_class_name"),
		"aop_type":       w.Get("type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data", "offset", "limit", 100).
		Request().
		Result()
}

func (w *WorkflowsDSWrapper) listWorkflowsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("workflows", schemas.SliceToList(body.Get("data"),
			func(workflows gjson.Result) any {
				return map[string]any{
					"id":                          workflows.Get("id").Value(),
					"name":                        workflows.Get("name").Value(),
					"type":                        workflows.Get("aop_type").Value(),
					"description":                 workflows.Get("description").Value(),
					"data_class_id":               workflows.Get("dataclass_id").Value(),
					"enabled":                     workflows.Get("enabled").Value(),
					"version_id":                  workflows.Get("version_id").Value(),
					"engine_type":                 workflows.Get("engine_type").Value(),
					"current_approval_version_id": workflows.Get("current_approval_version_id").Value(),
					"current_rejected_version_id": workflows.Get("current_rejected_versoin_id").Value(),
					"edit_role":                   workflows.Get("edit_role").Value(),
					"approve_role":                workflows.Get("approve_role").Value(),
					"use_role":                    workflows.Get("use_role").Value(),
					"workspace_id":                workflows.Get("workspace_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
