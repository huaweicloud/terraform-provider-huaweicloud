// Generated by PMS #312
package secmaster

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSecmasterAlertRules() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSecmasterAlertRulesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"workspace_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the workspace ID.`,
			},
			"rule_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the alert rule ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the alert rule name. Fuzzy match is supported.`,
			},
			"status": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the list of the status. The value can be **ENABLED** and **DISABLED**.`,
			},
			"severity": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the list of the severity.`,
			},
			"pipeline_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the pipeline ID.`,
			},
			"alert_rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The alert rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alert rule ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alert rule name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status.`,
						},
						"severity": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The severity.`,
						},
						"pipeline_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The pipeline ID.`,
						},
						"pipeline_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The data pipeline name.`,
						},
						"query_rule": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The query rule of the alert rule.`,
						},
						"query_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The query type of the alert rule.`,
						},
						"custom_properties": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The custom extension information.`,
						},
						"event_grouping": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to put events in a group.`,
						},
						"created_by": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creator.`,
						},
						"updated_by": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The updater.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
						"deleted_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The deletion time.`,
						},
						"query_plan": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The query plan of the alert rule.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"query_interval": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The query interval.`,
									},
									"query_interval_unit": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The query interval unit.`,
									},
									"time_window": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The time window.`,
									},
									"time_window_unit": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The time window unit.`,
									},
									"execution_delay": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The execution delay in minutes.`,
									},
									"overtime_interval": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The overtime interval in minutes.`,
									},
								},
							},
						},
						"triggers": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The alert triggering rules.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"mode": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The mode.`,
									},
									"operator": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The operator.`,
									},
									"expression": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The expression.`,
									},
									"severity": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The severity.`,
									},
									"accumulated_times": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The accumulated times.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type AlertRulesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAlertRulesDSWrapper(d *schema.ResourceData, meta interface{}) *AlertRulesDSWrapper {
	return &AlertRulesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSecmasterAlertRulesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAlertRulesDSWrapper(d, meta)
	listAlertRulesRst, err := wrapper.ListAlertRules()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAlertRulesToSchema(listAlertRulesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SecMaster GET /v1/{project_id}/workspaces/{workspace_id}/siem/alert-rules
func (w *AlertRulesDSWrapper) ListAlertRules() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "secmaster")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/workspaces/{workspace_id}/siem/alert-rules"
	uri = strings.ReplaceAll(uri, "{workspace_id}", w.Get("workspace_id").(string))
	params := map[string]any{
		"pipe_id":   w.Get("pipeline_id"),
		"rule_name": w.Get("name"),
		"rule_id":   w.Get("rule_id"),
		"status":    w.ListToArray("status"),
		"severity":  w.ListToArray("severity"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("records", "offset", "limit", 50).
		Request().
		Result()
}

func (w *AlertRulesDSWrapper) listAlertRulesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("alert_rules", schemas.SliceToList(body.Get("records"),
			func(alertRules gjson.Result) any {
				return map[string]any{
					"id":                alertRules.Get("rule_id").Value(),
					"name":              alertRules.Get("rule_name").Value(),
					"status":            alertRules.Get("status").Value(),
					"severity":          alertRules.Get("severity").Value(),
					"pipeline_id":       alertRules.Get("pipe_id").Value(),
					"pipeline_name":     alertRules.Get("pipe_name").Value(),
					"query_rule":        alertRules.Get("query").Value(),
					"query_type":        alertRules.Get("query_type").Value(),
					"custom_properties": schemas.MapToStrMap(alertRules.Get("custom_properties")),
					"event_grouping":    alertRules.Get("event_grouping").Value(),
					"created_by":        alertRules.Get("create_by").Value(),
					"updated_by":        alertRules.Get("update_by").Value(),
					"created_at":        w.setRecordsCreateTime(alertRules),
					"updated_at":        w.setRecordsUpdateTime(alertRules),
					"deleted_at":        w.setRecordsDeleteTime(alertRules),
					"query_plan": schemas.SliceToList(alertRules.Get("schedule"),
						func(queryPlan gjson.Result) any {
							return map[string]any{
								"query_interval":      queryPlan.Get("frequency_interval").Value(),
								"query_interval_unit": queryPlan.Get("frequency_unit").Value(),
								"time_window":         queryPlan.Get("period_interval").Value(),
								"time_window_unit":    queryPlan.Get("period_unit").Value(),
								"execution_delay":     queryPlan.Get("delay_interval").Value(),
								"overtime_interval":   queryPlan.Get("overtime_interval").Value(),
							}
						},
					),
					"triggers": schemas.SliceToList(alertRules.Get("triggers"),
						func(triggers gjson.Result) any {
							return map[string]any{
								"mode":              triggers.Get("mode").Value(),
								"operator":          triggers.Get("operator").Value(),
								"expression":        triggers.Get("expression").Value(),
								"severity":          triggers.Get("severity").Value(),
								"accumulated_times": triggers.Get("accumulated_times").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AlertRulesDSWrapper) setRecordsCreateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("create_time").Int())/1000, false)
}

func (*AlertRulesDSWrapper) setRecordsUpdateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("update_time").Int())/1000, false)
}

func (*AlertRulesDSWrapper) setRecordsDeleteTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("delete_time").Int())/1000, false)
}
