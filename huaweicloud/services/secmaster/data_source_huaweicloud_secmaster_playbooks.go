// Generated by PMS #307
package secmaster

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSecmasterPlaybooks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSecmasterPlaybooksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"workspace_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the workspace ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the playbook name.`,
			},
			"enabled": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether the playbook is enabled. The value can be **true** or **false**.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the playbook description.`,
			},
			"data_class_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the data class name.`,
			},
			"playbooks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The playbook list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook description.`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the playbook is enabled.`,
						},
						"workspace_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The workspace ID to which the playbook belongs.`,
						},
						"owner_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The owner ID.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project ID.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The version.`,
						},
						"version_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook version ID.`,
						},
						"unaudited_version_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the playbook version to be reviewed.`,
						},
						"reject_version_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the rejected playbook version.`,
						},
						"user_role": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The user role of the playbook.`,
						},
						"edit_role": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The edit role of the playbook.`,
						},
						"data_class_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The data class name.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook update time.`,
						},
						"approve_role": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The approval role of the playbook.`,
						},
						"data_class_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The data class ID.`,
						},
					},
				},
			},
		},
	}
}

type PlaybooksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPlaybooksDSWrapper(d *schema.ResourceData, meta interface{}) *PlaybooksDSWrapper {
	return &PlaybooksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSecmasterPlaybooksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPlaybooksDSWrapper(d, meta)
	listPlaybooksRst, err := wrapper.ListPlaybooks()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPlaybooksToSchema(listPlaybooksRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SecMaster GET /v1/{project_id}/workspaces/{workspace_id}/soc/playbooks
func (w *PlaybooksDSWrapper) ListPlaybooks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "secmaster")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/workspaces/{workspace_id}/soc/playbooks"
	uri = strings.ReplaceAll(uri, "{workspace_id}", w.Get("workspace_id").(string))
	params := map[string]any{
		"enabled":        w.Get("enabled"),
		"description":    w.Get("description"),
		"dataclass_name": w.Get("data_class_name"),
		"name":           w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data", "offset", "limit", 10).
		Request().
		Result()
}

func (w *PlaybooksDSWrapper) listPlaybooksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("playbooks", schemas.SliceToList(body.Get("data"),
			func(playbooks gjson.Result) any {
				return map[string]any{
					"id":                   playbooks.Get("id").Value(),
					"name":                 playbooks.Get("name").Value(),
					"description":          playbooks.Get("description").Value(),
					"enabled":              playbooks.Get("enabled").Value(),
					"workspace_id":         playbooks.Get("workspace_id").Value(),
					"owner_id":             playbooks.Get("owner_id").Value(),
					"project_id":           playbooks.Get("project_id").Value(),
					"version":              playbooks.Get("version").Value(),
					"version_id":           playbooks.Get("version_id").Value(),
					"unaudited_version_id": playbooks.Get("unaudited_version_id").Value(),
					"reject_version_id":    playbooks.Get("reject_version_id").Value(),
					"user_role":            playbooks.Get("user_role").Value(),
					"edit_role":            playbooks.Get("edit_role").Value(),
					"data_class_name":      playbooks.Get("dataclass_name").Value(),
					"created_at":           playbooks.Get("create_time").Value(),
					"updated_at":           playbooks.Get("update_time").Value(),
					"approve_role":         playbooks.Get("approve_role").Value(),
					"data_class_id":        playbooks.Get("dataclass_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
