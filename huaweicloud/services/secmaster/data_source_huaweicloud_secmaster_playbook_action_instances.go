// Generated by PMS #344
package secmaster

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSecmasterPlaybookActionInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSecmasterPlaybookActionInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"workspace_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the workspace ID to which the playbook instance belongs.`,
			},
			"playbook_instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the playbook instance ID.`,
			},
			"action_instances": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The playbook action instance list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"action": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The action information of the playbook action instance.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The action ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The workflow name of the action.`,
									},
									"description": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The description of the action.`,
									},
									"action_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The workflow ID of the action.`,
									},
									"action_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The workflow type of the action.`,
									},
									"playbook_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The playbook ID associated with the action.`,
									},
									"playbook_version_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The playbook version ID associated with the action.`,
									},
								},
							},
						},
						"instance_log": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The log information of the playbook action instance.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"instance_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The instance type that the log printed.`,
									},
									"action_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The workflow name that the log printed.`,
									},
									"parent_instance_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The parent instance ID that the log printed.`,
									},
									"output": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The output information that the log printed.`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The instance status that the log printed.`,
									},
									"action_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The workflow ID that the log printed.`,
									},
									"instance_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The instance ID that the log printed.`,
									},
									"log_level": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The log level.`,
									},
									"input": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The input information that the log printed.`,
									},
									"error_msg": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The error message that the log printed.`,
									},
									"start_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The start time that the log printed.`,
									},
									"end_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The end time that the log printed.`,
									},
									"trigger_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The triggering type that the log printed.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type PlaybookActionInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPlaybookActionInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *PlaybookActionInstancesDSWrapper {
	return &PlaybookActionInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSecmasterPlaybookActionInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPlaybookActionInstancesDSWrapper(d, meta)
	shoPlaTopRst, err := wrapper.ShowPlaybookTopology()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showPlaybookTopologyToSchema(shoPlaTopRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SecMaster GET /v1/{project_id}/workspaces/{workspace_id}/soc/playbooks/instances/{instance_id}/topology
func (w *PlaybookActionInstancesDSWrapper) ShowPlaybookTopology() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "secmaster")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/workspaces/{workspace_id}/soc/playbooks/instances/{instance_id}/topology"
	uri = strings.ReplaceAll(uri, "{workspace_id}", w.Get("workspace_id").(string))
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("playbook_instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *PlaybookActionInstancesDSWrapper) showPlaybookTopologyToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("action_instances", schemas.SliceToList(body.Get("action_instances"),
			func(actionInstances gjson.Result) any {
				return map[string]any{
					"action": schemas.SliceToList(actionInstances.Get("action"),
						func(action gjson.Result) any {
							return map[string]any{
								"id":                  action.Get("id").Value(),
								"name":                action.Get("name").Value(),
								"description":         action.Get("description").Value(),
								"action_id":           action.Get("action_id").Value(),
								"action_type":         action.Get("action_type").Value(),
								"playbook_id":         action.Get("playbook_id").Value(),
								"playbook_version_id": action.Get("playbook_version_id").Value(),
							}
						},
					),
					"instance_log": schemas.SliceToList(actionInstances.Get("instance_log"),
						func(instanceLog gjson.Result) any {
							return map[string]any{
								"instance_type":      instanceLog.Get("instance_type").Value(),
								"action_name":        instanceLog.Get("action_name").Value(),
								"parent_instance_id": instanceLog.Get("parent_instance_id").Value(),
								"output":             instanceLog.Get("output").Value(),
								"status":             instanceLog.Get("status").Value(),
								"action_id":          instanceLog.Get("action_id").Value(),
								"instance_id":        instanceLog.Get("instance_id").Value(),
								"log_level":          instanceLog.Get("log_level").Value(),
								"input":              instanceLog.Get("input").Value(),
								"error_msg":          instanceLog.Get("error_msg").Value(),
								"start_time":         instanceLog.Get("start_time").Value(),
								"end_time":           instanceLog.Get("end_time").Value(),
								"trigger_type":       instanceLog.Get("trigger_type").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
