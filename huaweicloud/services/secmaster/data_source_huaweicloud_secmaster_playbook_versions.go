// Generated by PMS #317
package secmaster

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSecmasterPlaybookVersions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSecmasterPlaybookVersionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"workspace_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the workspace ID.`,
			},
			"playbook_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the playbook ID.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the playbook version status.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the version type.`,
			},
			"enabled": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether this version is activated.`,
			},
			"playbook_versions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The playbook version list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook version ID.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook version status.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook version.`,
						},
						"type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The playbook version type.`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the playbook version is activated.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"dataobject_create": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to trigger a playbook when a data object is created.`,
						},
						"data_class_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The data class ID.`,
						},
						"playbook_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The playbook ID.`,
						},
						"trigger_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The triggering type.`,
						},
						"modifier_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the user who updated the information.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project ID.`,
						},
						"rule_enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the filtering rule is enabled.`,
						},
						"data_object_delete": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to trigger a playbook when a data object is deleted.`,
						},
						"data_object_update": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to trigger a playbook when a data object is updated.`,
						},
						"rule_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The rule ID.`,
						},
						"data_class_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The data class name.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
						"creator_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creator ID.`,
						},
						"action_strategy": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The execution policy.`,
						},
						"approve_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The reviewer.`,
						},
					},
				},
			},
		},
	}
}

type PlaybookVersionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPlaybookVersionsDSWrapper(d *schema.ResourceData, meta interface{}) *PlaybookVersionsDSWrapper {
	return &PlaybookVersionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSecmasterPlaybookVersionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPlaybookVersionsDSWrapper(d, meta)
	lisPlaVerRst, err := wrapper.ListPlaybookVersions()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPlaybookVersionsToSchema(lisPlaVerRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SecMaster GET /v1/{project_id}/workspaces/{workspace_id}/soc/playbooks/{playbook_id}/versions
func (w *PlaybookVersionsDSWrapper) ListPlaybookVersions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "secmaster")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/workspaces/{workspace_id}/soc/playbooks/{playbook_id}/versions"
	uri = strings.ReplaceAll(uri, "{workspace_id}", w.Get("workspace_id").(string))
	uri = strings.ReplaceAll(uri, "{playbook_id}", w.Get("playbook_id").(string))
	params := map[string]any{
		"status":       w.Get("status"),
		"enabled":      w.Get("enabled"),
		"version_type": w.Get("type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *PlaybookVersionsDSWrapper) listPlaybookVersionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("playbook_versions", schemas.SliceToList(body.Get("data"),
			func(plaVersions gjson.Result) any {
				return map[string]any{
					"id":                 plaVersions.Get("id").Value(),
					"status":             plaVersions.Get("status").Value(),
					"version":            plaVersions.Get("version").Value(),
					"type":               plaVersions.Get("version_type").Value(),
					"enabled":            plaVersions.Get("enabled").Value(),
					"description":        plaVersions.Get("description").Value(),
					"created_at":         plaVersions.Get("create_time").Value(),
					"dataobject_create":  plaVersions.Get("dataobject_create").Value(),
					"data_class_id":      plaVersions.Get("dataclass_id").Value(),
					"playbook_id":        plaVersions.Get("playbook_id").Value(),
					"trigger_type":       plaVersions.Get("trigger_type").Value(),
					"modifier_id":        plaVersions.Get("modifier_id").Value(),
					"project_id":         plaVersions.Get("project_id").Value(),
					"rule_enabled":       plaVersions.Get("rule_enable").Value(),
					"data_object_delete": plaVersions.Get("dataobject_delete").Value(),
					"data_object_update": plaVersions.Get("dataobject_update").Value(),
					"rule_id":            plaVersions.Get("rule_id").Value(),
					"data_class_name":    plaVersions.Get("dataclass_name").Value(),
					"updated_at":         plaVersions.Get("update_time").Value(),
					"creator_id":         plaVersions.Get("creator_id").Value(),
					"action_strategy":    plaVersions.Get("action_strategy").Value(),
					"approve_name":       plaVersions.Get("approve_name").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
