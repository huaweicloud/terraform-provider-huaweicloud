// Generated by PMS #313
package secmaster

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSecmasterAlertRuleTemplates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSecmasterAlertRuleTemplatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"workspace_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the workspace ID.`,
			},
			"severity": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the list of the severity.`,
			},
			"templates": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The alert rule templates.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alert rule template ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alert rule template name.`,
						},
						"severity": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The severity.`,
						},
						"query": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The query rule of the alert rule template.`,
						},
						"query_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The query type of the alert rule template.`,
						},
						"custom_properties": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The custom extension information.`,
						},
						"event_grouping": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to put events in a group.`,
						},
						"data_source": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The data source.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The version.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
						"triggers": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The alert triggering rules.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"severity": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The severity.`,
									},
									"expression": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The expression.`,
									},
									"accumulated_times": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The accumulated times.`,
									},
									"mode": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The mode.`,
									},
									"operator": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The operator.`,
									},
								},
							},
						},
						"query_plan": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The query plan of the alert rule template.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"query_interval": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The query interval.`,
									},
									"query_interval_unit": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The query interval unit.`,
									},
									"time_window": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The time window.`,
									},
									"time_window_unit": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The time window unit.`,
									},
									"execution_delay": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The execution delay in minutes.`,
									},
									"overtime_interval": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The overtime interval in minutes.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type AlertRuleTemplatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAlertRuleTemplatesDSWrapper(d *schema.ResourceData, meta interface{}) *AlertRuleTemplatesDSWrapper {
	return &AlertRuleTemplatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSecmasterAlertRuleTemplatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAlertRuleTemplatesDSWrapper(d, meta)
	lisAleRulTemRst, err := wrapper.ListAlertRuleTemplates()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAlertRuleTemplatesToSchema(lisAleRulTemRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SecMaster GET /v1/{project_id}/workspaces/{workspace_id}/siem/alert-rules/templates
func (w *AlertRuleTemplatesDSWrapper) ListAlertRuleTemplates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "secmaster")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/workspaces/{workspace_id}/siem/alert-rules/templates"
	uri = strings.ReplaceAll(uri, "{workspace_id}", w.Get("workspace_id").(string))
	params := map[string]any{
		"severity": w.ListToArray("severity"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("records", "offset", "limit", 50).
		Request().
		Result()
}

func (w *AlertRuleTemplatesDSWrapper) listAlertRuleTemplatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("templates", schemas.SliceToList(body.Get("records"),
			func(templates gjson.Result) any {
				return map[string]any{
					"id":                templates.Get("template_id").Value(),
					"name":              templates.Get("template_name").Value(),
					"severity":          templates.Get("severity").Value(),
					"query":             templates.Get("query").Value(),
					"query_type":        templates.Get("query_type").Value(),
					"custom_properties": schemas.MapToStrMap(templates.Get("custom_properties")),
					"event_grouping":    templates.Get("event_grouping").Value(),
					"data_source":       templates.Get("data_source").Value(),
					"version":           templates.Get("version").Value(),
					"updated_at":        w.setRecordsUpdateTime(templates),
					"triggers": schemas.SliceToList(templates.Get("triggers"),
						func(triggers gjson.Result) any {
							return map[string]any{
								"severity":          triggers.Get("severity").Value(),
								"expression":        triggers.Get("expression").Value(),
								"accumulated_times": triggers.Get("accumulated_times").Value(),
								"mode":              triggers.Get("mode").Value(),
								"operator":          triggers.Get("operator").Value(),
							}
						},
					),
					"query_plan": schemas.SliceToList(templates.Get("schedule"),
						func(queryPlan gjson.Result) any {
							return map[string]any{
								"query_interval":      queryPlan.Get("frequency_interval").Value(),
								"query_interval_unit": queryPlan.Get("frequency_unit").Value(),
								"time_window":         queryPlan.Get("period_interval").Value(),
								"time_window_unit":    queryPlan.Get("period_unit").Value(),
								"execution_delay":     queryPlan.Get("delay_interval").Value(),
								"overtime_interval":   queryPlan.Get("overtime_interval").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AlertRuleTemplatesDSWrapper) setRecordsUpdateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("update_time").Int())/1000, false)
}
