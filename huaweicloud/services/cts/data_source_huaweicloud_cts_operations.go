// Generated by PMS #483
package cts

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCtsOperations() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCtsOperationsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"service_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the cloud service on which operations are performed.`,
			},
			"resource_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the resource on which operations are performed.`,
			},
			"operations": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All operations on the cloud service.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"service_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the cloud service on which operations are performed.`,
						},
						"resource_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the resource on which operations are performed.`,
						},
						"operation_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The array of operation names.`,
						},
					},
				},
			},
		},
	}
}

type OperationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOperationsDSWrapper(d *schema.ResourceData, meta interface{}) *OperationsDSWrapper {
	return &OperationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCtsOperationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOperationsDSWrapper(d, meta)
	listOperationsRst, err := wrapper.ListOperations()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listOperationsToSchema(listOperationsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CTS GET /v3/{project_id}/operations
func (w *OperationsDSWrapper) ListOperations() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cts")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/operations"
	params := map[string]any{
		"service_type":  w.Get("service_type"),
		"resource_type": w.Get("resource_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *OperationsDSWrapper) listOperationsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("operations", schemas.SliceToList(body.Get("operations"),
			func(operations gjson.Result) any {
				return map[string]any{
					"service_type":   operations.Get("service_type").Value(),
					"resource_type":  operations.Get("resource_type").Value(),
					"operation_list": schemas.SliceToStrList(operations.Get("operation_list")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
