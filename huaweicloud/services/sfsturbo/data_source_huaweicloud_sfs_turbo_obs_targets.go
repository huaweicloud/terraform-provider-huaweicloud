// Generated by PMS #82
package sfsturbo

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSfsTurboObsTargets() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSfsTurboObsTargetsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource.`,
			},
			"share_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the SFS Turbo file system to which the OBS target belongs.`,
			},
			"target_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the OBS target.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the OBS target.`,
			},
			"bucket": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the OBS bucket associated with the OBS target.`,
			},
			"targets": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of OBS targets.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the OBS target.`,
						},
						"file_system_path": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The linkage directory name of the OBS target.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the OBS target.`,
						},
						"obs": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The detail of the OBS bucket.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"bucket": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the OBS bucket associated with the OBS target.`,
									},
									"endpoint": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The domain name of the region where the OBS bucket belongs.`,
									},
								},
							},
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the OBS target.`,
						},
					},
				},
			},
		},
	}
}

type TurboObsTargetsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTurboObsTargetsDSWrapper(d *schema.ResourceData, meta interface{}) *TurboObsTargetsDSWrapper {
	return &TurboObsTargetsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSfsTurboObsTargetsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTurboObsTargetsDSWrapper(d, meta)
	lisBacTarRst, err := wrapper.ListBackendTargets()
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)

	err = wrapper.listBackendTargetsToSchema(lisBacTarRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SFSTurbo GET /v1/{project_id}/sfs-turbo/shares/{share_id}/targets
func (w *TurboObsTargetsDSWrapper) ListBackendTargets() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sfs-turbo")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v1/{project_id}/sfs-turbo/shares/{share_id}/targets"
	uri = strings.ReplaceAll(uri, "{share_id}", d.Get("share_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		MarkerPager("targets", "targets[-1].target_id", "marker").
		Filter(
			filters.New().From("targets").
				Where("target_id", "=", w.Get("target_id")).
				Where("lifecycle", "=", w.Get("status")).
				Where("obs.bucket", "=", w.Get("bucket")),
		).
		Request().
		Result()
}

func (w *TurboObsTargetsDSWrapper) listBackendTargetsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("targets", schemas.SliceToList(body.Get("targets"),
			func(targets gjson.Result) any {
				return map[string]any{
					"id":               targets.Get("target_id").Value(),
					"file_system_path": targets.Get("file_system_path").Value(),
					"status":           targets.Get("lifecycle").Value(),
					"obs": schemas.SliceToList(targets.Get("obs"),
						func(obs gjson.Result) any {
							return map[string]any{
								"bucket":   obs.Get("bucket").Value(),
								"endpoint": obs.Get("endpoint").Value(),
							}
						},
					),
					"created_at": targets.Get("creation_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
