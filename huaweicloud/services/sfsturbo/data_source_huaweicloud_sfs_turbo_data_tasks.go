// Generated by PMS #250
package sfsturbo

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSfsTurboDataTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSfsTurboDataTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"share_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the SFS Turbo file system to which the data tasks belong.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the data task.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the data task.`,
			},
			"tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the data task.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the data task.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the data task.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the data task.`,
						},
						"src_target": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The linkage directory name.`,
						},
						"dest_target": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The target end information of the data task.`,
						},
						"src_prefix": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source path prefix of the data task.`,
						},
						"dest_prefix": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The destination path prefix of the data task.`,
						},
						"message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The data task execution result information.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The start time of the data task, in RFC3339 format.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The end time of the data task, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type TurboDataTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTurboDataTasksDSWrapper(d *schema.ResourceData, meta interface{}) *TurboDataTasksDSWrapper {
	return &TurboDataTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSfsTurboDataTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTurboDataTasksDSWrapper(d, meta)
	listHpcCacheTasksRst, err := wrapper.ListHpcCacheTasks()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listHpcCacheTasksToSchema(listHpcCacheTasksRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SFSTURBO GET /v1/{project_id}/sfs-turbo/{share_id}/hpc-cache/tasks
func (w *TurboDataTasksDSWrapper) ListHpcCacheTasks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sfs-turbo")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/sfs-turbo/{share_id}/hpc-cache/tasks"
	uri = strings.ReplaceAll(uri, "{share_id}", w.Get("share_id").(string))
	params := map[string]any{
		"type":   w.Get("type"),
		"status": w.Get("status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("tasks", "offset", "limit", 0).
		Request().
		Result()
}

func (w *TurboDataTasksDSWrapper) listHpcCacheTasksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("tasks", schemas.SliceToList(body.Get("tasks"),
			func(tasks gjson.Result) any {
				return map[string]any{
					"id":          tasks.Get("task_id").Value(),
					"type":        tasks.Get("type").Value(),
					"status":      tasks.Get("status").Value(),
					"src_target":  tasks.Get("src_target").Value(),
					"dest_target": tasks.Get("dest_target").Value(),
					"src_prefix":  tasks.Get("src_prefix").Value(),
					"dest_prefix": tasks.Get("dest_prefix").Value(),
					"message":     tasks.Get("message").Value(),
					"start_time":  w.setTasksStartTime(tasks),
					"end_time":    w.setTasksEndTime(tasks),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*TurboDataTasksDSWrapper) setTasksStartTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("start_time").String(), "2006-01-02T15:04:05")/1000, false)
}

func (*TurboDataTasksDSWrapper) setTasksEndTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("end_time").String(), "2006-01-02T15:04:05")/1000, false)
}
