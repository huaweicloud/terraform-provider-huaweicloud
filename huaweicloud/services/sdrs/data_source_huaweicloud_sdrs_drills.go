// Generated by PMS #684
package sdrs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSdrsDrills() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSdrsDrillsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"server_group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of a protection group.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the DR drill name. Fuzzy search is supported.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the DR drill status.`,
			},
			"drill_vpc_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the VPC used for a DR drill.`,
			},
			"disaster_recovery_drills": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The DR drills.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Tthe DR drill name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The DR drill status.`,
						},
						"drill_vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the VPC used for a DR drill.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a DR drill was created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a DR drill was updated.`,
						},
						"server_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a protection group.`,
						},
						"drill_servers": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The drill servers.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"protected_instance": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The protected instance ID of the drill server.`,
									},
									"drill_server_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The drill server ID.`,
									},
								},
							},
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The DR drill ID.`,
						},
					},
				},
			},
		},
	}
}

type DrillsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDrillsDSWrapper(d *schema.ResourceData, meta interface{}) *DrillsDSWrapper {
	return &DrillsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSdrsDrillsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDrillsDSWrapper(d, meta)
	lisDisRecDriRst, err := wrapper.ListDisasterRecoveryDrills()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listDisasterRecoveryDrillsToSchema(lisDisRecDriRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SDRS GET /v1/{project_id}/disaster-recovery-drills
func (w *DrillsDSWrapper) ListDisasterRecoveryDrills() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sdrs")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/disaster-recovery-drills"
	params := map[string]any{
		"server_group_id": w.Get("server_group_id"),
		"name":            w.Get("name"),
		"status":          w.Get("status"),
		"drill_vpc_id":    w.Get("drill_vpc_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("disaster_recovery_drills", "offset", "limit", 0).
		Request().
		Result()
}

func (w *DrillsDSWrapper) listDisasterRecoveryDrillsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("disaster_recovery_drills", schemas.SliceToList(body.Get("disaster_recovery_drills"),
			func(disRecDrills gjson.Result) any {
				return map[string]any{
					"name":            disRecDrills.Get("name").Value(),
					"status":          disRecDrills.Get("status").Value(),
					"drill_vpc_id":    disRecDrills.Get("drill_vpc_id").Value(),
					"created_at":      disRecDrills.Get("created_at").Value(),
					"updated_at":      disRecDrills.Get("updated_at").Value(),
					"server_group_id": disRecDrills.Get("server_group_id").Value(),
					"drill_servers": schemas.SliceToList(disRecDrills.Get("drill_servers"),
						func(drillServers gjson.Result) any {
							return map[string]any{
								"protected_instance": drillServers.Get("protected_instance").Value(),
								"drill_server_id":    drillServers.Get("drill_server_id").Value(),
							}
						},
					),
					"id": disRecDrills.Get("id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
