// Generated by PMS #683
package sdrs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSdrsRpoStatistics() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSdrsRpoStatisticsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the start time using to filter the RPO statistics.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the end time using to filter the RPO statistics.`,
			},
			"resource_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource type.`,
			},
			"resource_rpo_statistics": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of RPO exceedance trend records for resources.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the RPO exceedance trend record for the resource.`,
						},
						"point_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The point-in-time for the RPO exceedance trend record.`,
						},
						"resource_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of resources with RPO exceedance.`,
						},
						"resource_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of resource with RPO exceedance.`,
						},
					},
				},
			},
		},
	}
}

type RpoStatisticsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRpoStatisticsDSWrapper(d *schema.ResourceData, meta interface{}) *RpoStatisticsDSWrapper {
	return &RpoStatisticsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSdrsRpoStatisticsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRpoStatisticsDSWrapper(d, meta)
	listRpoStatisticsRst, err := wrapper.ListRpoStatistics()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listRpoStatisticsToSchema(listRpoStatisticsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SDRS GET /v1/{project_id}/resource/rpo-statistics
func (w *RpoStatisticsDSWrapper) ListRpoStatistics() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sdrs")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/resource/rpo-statistics"
	params := map[string]any{
		"start_time":    w.Get("start_time"),
		"end_time":      w.Get("end_time"),
		"resource_type": w.Get("resource_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("resource_rpo_statistics", "offset", "limit", 0).
		Request().
		Result()
}

func (w *RpoStatisticsDSWrapper) listRpoStatisticsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("resource_rpo_statistics", schemas.SliceToList(body.Get("resource_rpo_statistics"),
			func(resRpoSta gjson.Result) any {
				return map[string]any{
					"created_at":    resRpoSta.Get("created_at").Value(),
					"updated_at":    resRpoSta.Get("updated_at").Value(),
					"id":            resRpoSta.Get("id").Value(),
					"point_time":    resRpoSta.Get("point_time").Value(),
					"resource_num":  resRpoSta.Get("resource_num").Value(),
					"resource_type": resRpoSta.Get("resource_type").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
