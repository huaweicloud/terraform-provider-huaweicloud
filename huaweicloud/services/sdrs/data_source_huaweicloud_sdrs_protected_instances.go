// Generated by PMS #685
package sdrs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSdrsProtectedInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSdrsProtectedInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"server_group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the protection group, in which all protected instances are queried.`,
			},
			"server_group_ids": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the protection group ID list.`,
			},
			"protected_instance_ids": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the protected instance ID list.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of a protected instance. Fuzzy search is supported.`,
			},
			"query_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the query type.`,
			},
			"availability_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the current production site AZ of the protection group containing the protected instance.`,
			},
			"protected_instances": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The information about protected instances.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The tag list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The tag key.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The tag value.`,
									},
								},
							},
						},
						"progress": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The synchronization progress of a protected instance.`,
						},
						"priority_station": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current production site AZ of the protection group containing the protected instance.`,
						},
						"server_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a protection group.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a protected instance was updated.`,
						},
						"metadata": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The metadata of a protected instance.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"_system_frozen": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Whether the resource is frozen.`,
									},
								},
							},
						},
						"attachment": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The attached replication pairs.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"replication": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of a replication pair.`,
									},
									"device": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The device name.`,
									},
								},
							},
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a protected instance.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of a protected instance.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of a protected instance.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a protected instance was created.`,
						},
						"target_server": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The DR site server ID.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of a protected instance.`,
						},
						"source_server": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The production site server ID.`,
						},
					},
				},
			},
		},
	}
}

type ProtectedInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newProtectedInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *ProtectedInstancesDSWrapper {
	return &ProtectedInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSdrsProtectedInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newProtectedInstancesDSWrapper(d, meta)
	lisProInsRst, err := wrapper.ListProtectedInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listProtectedInstancesToSchema(lisProInsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SDRS GET /v1/{project_id}/protected-instances
func (w *ProtectedInstancesDSWrapper) ListProtectedInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sdrs")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/protected-instances"
	params := map[string]any{
		"server_group_id":        w.Get("server_group_id"),
		"server_group_ids":       w.Get("server_group_ids"),
		"protected_instance_ids": w.Get("protected_instance_ids"),
		"status":                 w.Get("status"),
		"name":                   w.Get("name"),
		"query_type":             w.Get("query_type"),
		"availability_zone":      w.Get("availability_zone"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("protected_instances", "offset", "limit", 0).
		Request().
		Result()
}

func (w *ProtectedInstancesDSWrapper) listProtectedInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("protected_instances", schemas.SliceToList(body.Get("protected_instances"),
			func(proIns gjson.Result) any {
				return map[string]any{
					"tags": schemas.SliceToList(proIns.Get("tags"),
						func(tags gjson.Result) any {
							return map[string]any{
								"key":   tags.Get("key").Value(),
								"value": tags.Get("value").Value(),
							}
						},
					),
					"progress":         proIns.Get("progress").Value(),
					"priority_station": proIns.Get("priority_station").Value(),
					"server_group_id":  proIns.Get("server_group_id").Value(),
					"updated_at":       proIns.Get("updated_at").Value(),
					"metadata": schemas.SliceToList(proIns.Get("metadata"),
						func(metadata gjson.Result) any {
							return map[string]any{
								"_system_frozen": metadata.Get("__system__frozen").Value(),
							}
						},
					),
					"attachment": schemas.SliceToList(proIns.Get("attachment"),
						func(attachment gjson.Result) any {
							return map[string]any{
								"replication": attachment.Get("replication").Value(),
								"device":      attachment.Get("device").Value(),
							}
						},
					),
					"id":            proIns.Get("id").Value(),
					"name":          proIns.Get("name").Value(),
					"description":   proIns.Get("description").Value(),
					"created_at":    proIns.Get("created_at").Value(),
					"target_server": proIns.Get("target_server").Value(),
					"status":        proIns.Get("status").Value(),
					"source_server": proIns.Get("source_server").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
