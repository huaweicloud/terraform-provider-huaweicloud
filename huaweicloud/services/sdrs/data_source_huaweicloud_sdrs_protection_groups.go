// Generated by PMS #669
package sdrs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSdrsProtectionGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSdrsProtectionGroupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the protection group status.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of a protection group.`,
			},
			"query_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the query type.`,
			},
			"availability_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the current production site AZ of a protection group.`,
			},
			"server_groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The information about protection groups.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"progress": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The synchronization progress of a protection group.`,
						},
						"source_availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The production site AZ configured when a protection group is created.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of an active-active domain.`,
						},
						"priority_station": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current production site of a protection group.`,
						},
						"disaster_recovery_drill_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of DR drills in a protection group.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a protection group.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of a protection group.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of a protection group.`,
						},
						"target_vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the VPC for the DR site.`,
						},
						"protected_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The protected status.`,
						},
						"protection_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The protection mode.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of a protection group.`,
						},
						"domain_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of an active-active domain.`,
						},
						"protected_instance_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of protected instances in a protection group.`,
						},
						"health_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The health status of a protection group.`,
						},
						"source_vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the VPC for the production site.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a protection group was created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a protection group was updated.`,
						},
						"target_availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The DR site AZ configured when a protection group is created.`,
						},
						"replication_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of replication pairs in a protection group.`,
						},
						"replication_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The data synchronization status.`,
						},
						"dr_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The deployment model.`,
						},
						"server_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of managed servers.`,
						},
						// Reserved field is not used yet.
						"replication_model": {
							Type:     schema.TypeString,
							Computed: true,
							Description: utils.SchemaDesc("The protection mode (This parameter is reserved).",
								utils.SchemaDescInput{
									Internal: true,
								}),
						},
						// Reserved field is not used yet.
						"test_vpc_id": {
							Type:     schema.TypeString,
							Computed: true,
							Description: utils.SchemaDesc("The ID of the VPC used for a DR drill.",
								utils.SchemaDescInput{
									Internal: true,
								}),
						},
					},
				},
			},
		},
	}
}

type ProtectionGroupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newProtectionGroupsDSWrapper(d *schema.ResourceData, meta interface{}) *ProtectionGroupsDSWrapper {
	return &ProtectionGroupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSdrsProtectionGroupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newProtectionGroupsDSWrapper(d, meta)
	lisProGroRst, err := wrapper.ListProtectionGroups()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listProtectionGroupsToSchema(lisProGroRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SDRS GET /v1/{project_id}/server-groups
func (w *ProtectionGroupsDSWrapper) ListProtectionGroups() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sdrs")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/server-groups"
	params := map[string]any{
		"status":            w.Get("status"),
		"name":              w.Get("name"),
		"query_type":        w.Get("query_type"),
		"availability_zone": w.Get("availability_zone"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("server_groups", "offset", "limit", 0).
		Request().
		Result()
}

func (w *ProtectionGroupsDSWrapper) listProtectionGroupsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("server_groups", schemas.SliceToList(body.Get("server_groups"),
			func(serverGroups gjson.Result) any {
				return map[string]any{
					"progress":                    serverGroups.Get("progress").Value(),
					"source_availability_zone":    serverGroups.Get("source_availability_zone").Value(),
					"domain_id":                   serverGroups.Get("domain_id").Value(),
					"priority_station":            serverGroups.Get("priority_station").Value(),
					"disaster_recovery_drill_num": serverGroups.Get("disaster_recovery_drill_num").Value(),
					"id":                          serverGroups.Get("id").Value(),
					"name":                        serverGroups.Get("name").Value(),
					"description":                 serverGroups.Get("description").Value(),
					"target_vpc_id":               serverGroups.Get("target_vpc_id").Value(),
					"replication_model":           serverGroups.Get("replication_model").Value(),
					"protected_status":            serverGroups.Get("protected_status").Value(),
					"protection_type":             serverGroups.Get("protection_type").Value(),
					"status":                      serverGroups.Get("status").Value(),
					"domain_name":                 serverGroups.Get("domain_name").Value(),
					"protected_instance_num":      serverGroups.Get("protected_instance_num").Value(),
					"health_status":               serverGroups.Get("health_status").Value(),
					"source_vpc_id":               serverGroups.Get("source_vpc_id").Value(),
					"test_vpc_id":                 serverGroups.Get("test_vpc_id").Value(),
					"created_at":                  serverGroups.Get("created_at").Value(),
					"updated_at":                  serverGroups.Get("updated_at").Value(),
					"target_availability_zone":    serverGroups.Get("target_availability_zone").Value(),
					"replication_num":             serverGroups.Get("replication_num").Value(),
					"replication_status":          serverGroups.Get("replication_status").Value(),
					"dr_type":                     serverGroups.Get("dr_type").Value(),
					"server_type":                 serverGroups.Get("server_type").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
