// Generated by PMS #456
package live

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceLiveDomains() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceLiveDomainsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the domain name.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"domains": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The domain name list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"vendor": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The CDN vendor.`,
						},
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The region to which the live broadcast source station belongs.`,
						},
						"ingest_domain_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ingest domain name associated with the streaming domain name.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the domain name was created.`,
						},
						"status_describe": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status description.`,
						},
						"service_area": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The domain name acceleration region.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The domain name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The domain name type.`,
						},
						"is_ipv6": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the IPv6 function is enabled.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID.`,
						},
						"cname": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The CNAME of the domain name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the domain name.`,
						},
					},
				},
			},
		},
	}
}

type DomainsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDomainsDSWrapper(d *schema.ResourceData, meta interface{}) *DomainsDSWrapper {
	return &DomainsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceLiveDomainsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDomainsDSWrapper(d, meta)
	showDomainRst, err := wrapper.ShowDomain()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showDomainToSchema(showDomainRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API LIVE GET /v1/{project_id}/domain
func (w *DomainsDSWrapper) ShowDomain() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "live")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/domain"
	params := map[string]any{
		"domain":                w.Get("name"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *DomainsDSWrapper) showDomainToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("domains", schemas.SliceToList(body.Get("domain_info"),
			func(domains gjson.Result) any {
				return map[string]any{
					"vendor":                domains.Get("vendor").Value(),
					"region":                domains.Get("region").Value(),
					"ingest_domain_name":    domains.Get("related_domain").Value(),
					"created_at":            domains.Get("create_time").Value(),
					"status_describe":       domains.Get("status_describe").Value(),
					"service_area":          domains.Get("service_area").Value(),
					"name":                  domains.Get("domain").Value(),
					"type":                  domains.Get("domain_type").Value(),
					"is_ipv6":               domains.Get("is_ipv6").Value(),
					"enterprise_project_id": domains.Get("enterprise_project_id").Value(),
					"cname":                 domains.Get("domain_cname").Value(),
					"status":                domains.Get("status").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
