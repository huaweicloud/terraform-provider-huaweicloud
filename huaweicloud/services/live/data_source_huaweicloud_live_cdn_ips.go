// Generated by PMS #494
package live

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceLiveCdnIps() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceLiveCdnIpsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"ip_addresses": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the list of IP addresses.`,
			},
			"cdn_ips": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The homing information of IP addresses.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"platform": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The platform name.`,
						},
						"ip_address": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The IP address to be queried.`,
						},
						"belongs": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the IP address is a HuaweiCloud CDN node.`,
						},
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The province where IP belongs.`,
						},
						"isp": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The carrier name.`,
						},
					},
				},
			},
		},
	}
}

type CdnIpsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCdnIpsDSWrapper(d *schema.ResourceData, meta interface{}) *CdnIpsDSWrapper {
	return &CdnIpsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceLiveCdnIpsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCdnIpsDSWrapper(d, meta)
	batShoIpBelRst, err := wrapper.BatchShowIpBelongs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.batchShowIpBelongsToSchema(batShoIpBelRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API LIVE GET /v1/{project_id}/cdn/ip-info
func (w *CdnIpsDSWrapper) BatchShowIpBelongs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "live")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cdn/ip-info"
	params := map[string]any{
		"ip": w.ListToArray("ip_addresses"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *CdnIpsDSWrapper) batchShowIpBelongsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("cdn_ips", schemas.SliceToList(body.Get("cdn_ips"),
			func(cdnIps gjson.Result) any {
				return map[string]any{
					"platform":   cdnIps.Get("platform").Value(),
					"ip_address": cdnIps.Get("ip").Value(),
					"belongs":    cdnIps.Get("belongs").Value(),
					"region":     cdnIps.Get("region").Value(),
					"isp":        cdnIps.Get("isp").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
