// Generated by PMS #264
package ccm

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourcePrivateCas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourcePrivateCasRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the private CA name.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the private CA status.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the private CA type.`,
			},
			"sort_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting attribute.`,
			},
			"sort_dir": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting sequence.`,
			},
			"cas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The CA details.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"expired_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The expiration time of the private CA, in RFC3339 format.`,
						},
						"path_length": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The length of the CA path.`,
						},
						"issuer_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the parent CA.`,
						},
						"issuer_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the parent CA.`,
						},
						"key_algorithm": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key algorithm.`,
						},
						"serial_number": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The serial number of the private CA.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the private CA, in RFC3339 format.`,
						},
						"distinguished_name": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The distinguished name of the private CA.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"common_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The common name.`,
									},
									"country": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The country code.`,
									},
									"state": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The state or city name.`,
									},
									"locality": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The country or region name.`,
									},
									"organization": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The organization name.`,
									},
									"organizational_unit": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The organization unit.`,
									},
								},
							},
						},
						"signature_algorithm": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The signature hash algorithm.`,
						},
						"deleted_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The deletion time of the private CA, in RFC3339 format.`,
						},
						"crl_configuration": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The certificate CRL configuration.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"valid_days": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The CRL update interval, in days.`,
									},
									"crl_dis_point": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The revocation list distribution address.`,
									},
									"enabled": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Whether to enable the release function of CRL.`,
									},
									"crl_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the certificate revocation list.`,
									},
									"obs_bucket_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The OBS bucket name.`,
									},
								},
							},
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The CA status.`,
						},
						"gen_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The CA generation method.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the private CA.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The CA type.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID.`,
						},
						"free_quota": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The free certificate quota.`,
						},
						"charging_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The charge mode.`,
						},
					},
				},
			},
		},
	}
}

type PrivateCasDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPrivateCasDSWrapper(d *schema.ResourceData, meta interface{}) *PrivateCasDSWrapper {
	return &PrivateCasDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourcePrivateCasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPrivateCasDSWrapper(d, meta)
	lisCerAutRst, err := wrapper.ListCertificateAuthority()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCertificateAuthorityToSchema(lisCerAutRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CCM GET /v1/private-certificate-authorities
func (w *PrivateCasDSWrapper) ListCertificateAuthority() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ccm")
	if err != nil {
		return nil, err
	}

	uri := "/v1/private-certificate-authorities"
	params := map[string]any{
		"name":     w.Get("name"),
		"status":   w.Get("status"),
		"type":     w.Get("type"),
		"sort_key": w.Get("sort_key"),
		"sort_dir": w.Get("sort_dir"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("certificate_authorities", "offset", "limit", 1000).
		Request().
		Result()
}

func (w *PrivateCasDSWrapper) listCertificateAuthorityToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("cas", schemas.SliceToList(body.Get("certificate_authorities"),
			func(cas gjson.Result) any {
				return map[string]any{
					"expired_at":    w.setPrivateCasExpiredAt(cas),
					"path_length":   cas.Get("path_length").Value(),
					"issuer_id":     cas.Get("issuer_id").Value(),
					"issuer_name":   cas.Get("issuer_name").Value(),
					"key_algorithm": cas.Get("key_algorithm").Value(),
					"serial_number": cas.Get("serial_number").Value(),
					"created_at":    w.setPrivateCasCreatedAt(cas),
					"distinguished_name": schemas.SliceToList(cas.Get("distinguished_name"),
						func(distinguishedName gjson.Result) any {
							return map[string]any{
								"common_name":         distinguishedName.Get("common_name").Value(),
								"country":             distinguishedName.Get("country").Value(),
								"state":               distinguishedName.Get("state").Value(),
								"locality":            distinguishedName.Get("locality").Value(),
								"organization":        distinguishedName.Get("organization").Value(),
								"organizational_unit": distinguishedName.Get("organizational_unit").Value(),
							}
						},
					),
					"signature_algorithm": cas.Get("signature_algorithm").Value(),
					"deleted_at":          w.setPrivateCasDeletedAt(cas),
					"crl_configuration": schemas.SliceToList(cas.Get("crl_configuration"),
						func(crlConfiguration gjson.Result) any {
							return map[string]any{
								"valid_days":      crlConfiguration.Get("valid_days").Value(),
								"crl_dis_point":   crlConfiguration.Get("crl_dis_point").Value(),
								"enabled":         crlConfiguration.Get("enabled").Value(),
								"crl_name":        crlConfiguration.Get("crl_name").Value(),
								"obs_bucket_name": crlConfiguration.Get("obs_bucket_name").Value(),
							}
						},
					),
					"status":                cas.Get("status").Value(),
					"gen_mode":              cas.Get("gen_mode").Value(),
					"id":                    cas.Get("ca_id").Value(),
					"type":                  cas.Get("type").Value(),
					"enterprise_project_id": cas.Get("enterprise_project_id").Value(),
					"free_quota":            cas.Get("free_quota").Value(),
					"charging_mode":         w.setPrivateCasChargingMode(cas),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*PrivateCasDSWrapper) setPrivateCasCreatedAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("create_time").Int()/1000, false)
}

func (*PrivateCasDSWrapper) setPrivateCasExpiredAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("not_after").Int()/1000, false)
}

func (*PrivateCasDSWrapper) setPrivateCasDeletedAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("delete_time").Int()/1000, false)
}

func (*PrivateCasDSWrapper) setPrivateCasChargingMode(data gjson.Result) string {
	chargingModeValue := data.Get("charging_mode").Int()
	if chargingModeValue == 1 {
		return "postPaid"
	}
	return "prePaid"
}
