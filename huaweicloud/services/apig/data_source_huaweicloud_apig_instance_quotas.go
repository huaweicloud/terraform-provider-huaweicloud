// Generated by PMS #628
package apig

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceInstanceQuotas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceInstanceQuotasRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The ID of the APIG instance.`,
			},
			"quotas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the quotas.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"config_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the quota.`,
						},
						"config_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the quota.`,
						},
						"config_value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The number of available quotas.`,
						},
						"used": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of quota used.`,
						},
						"remark": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the quota.`,
						},
						"config_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the quota.`,
						},
					},
				},
			},
		},
	}
}

type InstanceQuotasDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newInstanceQuotasDSWrapper(d *schema.ResourceData, meta interface{}) *InstanceQuotasDSWrapper {
	return &InstanceQuotasDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceInstanceQuotasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newInstanceQuotasDSWrapper(d, meta)
	lisProCofV2Rst, err := wrapper.ListProjectCofigsV2()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listProjectCofigsV2ToSchema(lisProCofV2Rst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API APIG GET /v2/{project_id}/apigw/instances/{instance_id}/project/configs
func (w *InstanceQuotasDSWrapper) ListProjectCofigsV2() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "apig")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/apigw/instances/{instance_id}/project/configs"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("configs", "offset", "limit", 100).
		Request().
		Result()
}

func (w *InstanceQuotasDSWrapper) listProjectCofigsV2ToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("quotas", schemas.SliceToList(body.Get("configs"),
			func(quotas gjson.Result) any {
				return map[string]any{
					"config_id":    quotas.Get("config_id").Value(),
					"config_name":  quotas.Get("config_name").Value(),
					"config_value": quotas.Get("config_value").Value(),
					"used":         quotas.Get("used").Value(),
					"remark":       quotas.Get("remark").Value(),
					"config_time":  w.setConfigsConfigTime(quotas),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*InstanceQuotasDSWrapper) setConfigsConfigTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("config_time").String())/1000, false)
}
