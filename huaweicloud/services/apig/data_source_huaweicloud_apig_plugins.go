// Generated by PMS #642
package apig

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourcePlugins() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourcePluginsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The ID of the dedicated instance to which the plugin belongs.`,
			},
			"plugin_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The ID of the plugin.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The name of the plugin. Fuzzy search is supported.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The type of the plugin.`,
			},
			"plugin_scope": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The scope of the plugin.`,
			},
			"precise_search": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The name of the parameter to be matched exactly.`,
			},
			"plugins": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All plugins that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the plugin.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the plugin.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the plugin.`,
						},
						"content": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The content of the plugin.`,
						},
						"plugin_scope": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The scope of the plugin.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the plugin.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the plugin, in RFC3339 format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the plugin, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type PluginsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPluginsDSWrapper(d *schema.ResourceData, meta interface{}) *PluginsDSWrapper {
	return &PluginsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourcePluginsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPluginsDSWrapper(d, meta)
	listPluginsRst, err := wrapper.ListPlugins()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPluginsToSchema(listPluginsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API APIG GET /v2/{project_id}/apigw/instances/{instance_id}/plugins
func (w *PluginsDSWrapper) ListPlugins() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "apig")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/apigw/instances/{instance_id}/plugins"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"plugin_type":    w.Get("type"),
		"plugin_scope":   w.Get("plugin_scope"),
		"plugin_id":      w.Get("plugin_id"),
		"plugin_name":    w.Get("name"),
		"precise_search": w.Get("precise_search"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("plugins", "offset", "limit", 500).
		Request().
		Result()
}

func (w *PluginsDSWrapper) listPluginsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("plugins", schemas.SliceToList(body.Get("plugins"),
			func(plugins gjson.Result) any {
				return map[string]any{
					"id":           plugins.Get("plugin_id").Value(),
					"name":         plugins.Get("plugin_name").Value(),
					"type":         plugins.Get("plugin_type").Value(),
					"content":      plugins.Get("plugin_content").Value(),
					"plugin_scope": plugins.Get("plugin_scope").Value(),
					"description":  plugins.Get("remark").Value(),
					"created_at":   w.setPluginsCreateTime(plugins),
					"updated_at":   w.setPluginsUpdateTime(plugins),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*PluginsDSWrapper) setPluginsCreateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("create_time").String())/1000, false)
}

func (*PluginsDSWrapper) setPluginsUpdateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("update_time").String())/1000, false)
}
