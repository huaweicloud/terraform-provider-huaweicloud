// Generated by PMS #623
package apig

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceAvailabilityZones() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAvailabilityZonesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"availability_zones": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the availability zones.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the availability zone.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the availability zone.`,
						},
						"code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The code of the availability zone.`,
						},
						"port": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The port of the availability zone.`,
						},
						"specs": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeBool},
							Description: `The APIG instance editions supported by the availability zone.`,
						},
						"local_name": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The Chinese and English names of the availability zone.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"en_us": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The English name of the availability zone.`,
									},
									"zh_cn": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The Chinese name of the availability zone.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type AvailabilityZonesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAvailabilityZonesDSWrapper(d *schema.ResourceData, meta interface{}) *AvailabilityZonesDSWrapper {
	return &AvailabilityZonesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAvailabilityZonesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAvailabilityZonesDSWrapper(d, meta)
	lisAvaZonV2Rst, err := wrapper.ListAvailableZonesV2()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAvailableZonesV2ToSchema(lisAvaZonV2Rst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API APIG GET /v2/{project_id}/apigw/available-zones
func (w *AvailabilityZonesDSWrapper) ListAvailableZonesV2() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "apig")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/apigw/available-zones"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *AvailabilityZonesDSWrapper) listAvailableZonesV2ToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("availability_zones", schemas.SliceToList(body.Get("available_zones"),
			func(avaZones gjson.Result) any {
				return map[string]any{
					"id":    avaZones.Get("id").Value(),
					"name":  avaZones.Get("name").Value(),
					"code":  avaZones.Get("code").Value(),
					"port":  avaZones.Get("port").Value(),
					"specs": schemas.MapToBoolMap(avaZones.Get("specs")),
					"local_name": schemas.SliceToList(avaZones.Get("local_name"),
						func(localName gjson.Result) any {
							return map[string]any{
								"en_us": localName.Get("en_us").Value(),
								"zh_cn": localName.Get("zh_cn").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
