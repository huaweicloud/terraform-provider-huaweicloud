// Generated by PMS #524
package asm

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceAsmMeshes() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAsmMeshesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"items": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of meshes.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The mesh name.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The mesh ID.`,
						},
						"annotations": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The mesh annotations in key/value format.`,
						},
						"labels": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The mesh labels in key/value format.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the mesh is created.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The mesh version.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The mesh type.`,
						},
						"extend_params": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The extend parameters of the mesh.`,
							Elem:        extendParamsElem(),
						},
						"tags": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The key/value pairs to associate with the mesh.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the mesh.`,
						},
					},
				},
			},
		},
	}
}

// extendParamsElem
// The Elem of "extend_params"
func extendParamsElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"clusters": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The cluster informations in the mesh.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cluster_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster ID.`,
						},
						"injection": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The sidecar injection configuration.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"namespaces": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The namespace of the sidecar injection.`,
										Elem:        namespacesOrNodesElem(),
									},
								},
							},
						},
						"installation": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The mesh components installation configuration.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"nodes": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The nodes to install mesh components.`,
										Elem:        namespacesOrNodesElem(),
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// extParCluInjNamElem
// The Elem of "extend_params.clusters.injection.namespaces"
// The Elem of "extend_params.clusters.installation.nodes"
func namespacesOrNodesElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"field_selector": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The field selector.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"values": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The value of the selector.`,
						},
						"key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key of the selector.`,
						},
						"operator": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `the operator of the selector.`,
						},
					},
				},
			},
		},
	}
}

type MeshesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMeshesDSWrapper(d *schema.ResourceData, meta interface{}) *MeshesDSWrapper {
	return &MeshesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAsmMeshesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMeshesDSWrapper(d, meta)
	listMeshesRst, err := wrapper.ListMeshes()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listMeshesToSchema(listMeshesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ASM GET /v1/meshes
func (w *MeshesDSWrapper) ListMeshes() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "asm")
	if err != nil {
		return nil, err
	}

	uri := "/v1/meshes"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *MeshesDSWrapper) listMeshesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("items", schemas.SliceToList(body.Get("items"),
			func(items gjson.Result) any {
				return map[string]any{
					"name":          items.Get("metadata.name").Value(),
					"id":            items.Get("metadata.uid").Value(),
					"annotations":   schemas.MapToStrMap(items.Get("metadata.annotations")),
					"labels":        schemas.MapToStrMap(items.Get("metadata.labels")),
					"created_at":    items.Get("metadata.creationTimestamp").Value(),
					"version":       items.Get("spec.version").Value(),
					"type":          items.Get("spec.type").Value(),
					"extend_params": w.setIteSpeExtParams(items),
					"tags":          w.setItemsSpecTags(items),
					"status":        items.Get("status.phase").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*MeshesDSWrapper) setIsepcinNamespaces(injection gjson.Result) any {
	return schemas.SliceToList(injection.Get("namespaces"), func(namespaces gjson.Result) any {
		return map[string]any{
			"field_selector": schemas.SliceToList(namespaces.Get("fieldSelector"),
				func(fieldSelector gjson.Result) any {
					return map[string]any{
						"values":   schemas.SliceToStrList(fieldSelector.Get("values")),
						"key":      fieldSelector.Get("key").Value(),
						"operator": fieldSelector.Get("operator").Value(),
					}
				},
			),
		}
	})
}

func (*MeshesDSWrapper) setIsepcinNodes(installation gjson.Result) any {
	return schemas.SliceToList(installation.Get("nodes"), func(nodes gjson.Result) any {
		return map[string]any{
			"field_selector": schemas.SliceToList(nodes.Get("fieldSelector"),
				func(fieldSelector gjson.Result) any {
					return map[string]any{
						"values":   schemas.SliceToStrList(fieldSelector.Get("values")),
						"key":      fieldSelector.Get("key").Value(),
						"operator": fieldSelector.Get("operator").Value(),
					}
				},
			),
		}
	})
}

func (w *MeshesDSWrapper) setIteSpeExtParams(items gjson.Result) any {
	return schemas.SliceToList(items.Get("spec.extendParams"), func(extendParams gjson.Result) any {
		return map[string]any{
			"clusters": schemas.SliceToList(extendParams.Get("clusters"),
				func(clusters gjson.Result) any {
					return map[string]any{
						"cluster_id": clusters.Get("clusterID").Value(),
						"injection": schemas.SliceToList(clusters.Get("injection"),
							func(injection gjson.Result) any {
								return map[string]any{
									"namespaces": w.setIsepcinNamespaces(injection),
								}
							},
						),
						"installation": schemas.SliceToList(clusters.Get("installation"),
							func(installation gjson.Result) any {
								return map[string]any{
									"nodes": w.setIsepcinNodes(installation),
								}
							},
						),
					}
				},
			),
		}
	})
}

func (*MeshesDSWrapper) setItemsSpecTags(data gjson.Result) map[string]interface{} {
	tags := data.Get("spec.tags").Value()
	return utils.FlattenTagsToMap(tags)
}
