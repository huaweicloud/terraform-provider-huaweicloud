// Generated by PMS #708
package dcs

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDcsInstanceExpiredKeyScanHistories() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDcsInstanceExpiredKeyScanHistoriesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the DCS instance.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the expired key scan task.`,
			},
			"records": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the expired key record.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the expired key scan task.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the expired key scan task.`,
						},
						"scan_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the scan mode.`,
						},
						"num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of expired keys scanned at a time.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when a scan task is created.`,
						},
						"started_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when a scan task started.`,
						},
						"finished_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when a scan task is complete.`,
						},
					},
				},
			},
		},
	}
}

type InstanceExpiredKeyScanHistoriesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newInstanceExpiredKeyScanHistoriesDSWrapper(d *schema.ResourceData, meta interface{}) *InstanceExpiredKeyScanHistoriesDSWrapper {
	return &InstanceExpiredKeyScanHistoriesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDcsInstanceExpiredKeyScanHistoriesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newInstanceExpiredKeyScanHistoriesDSWrapper(d, meta)
	shoExpKeyScaInfRst, err := wrapper.ShowExpireKeyScanInfo()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showExpireKeyScanInfoToSchema(shoExpKeyScaInfRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DCS GET /v2/{project_id}/instances/{instance_id}/auto-expire/histories
func (w *InstanceExpiredKeyScanHistoriesDSWrapper) ShowExpireKeyScanInfo() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dcs")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/auto-expire/histories"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"status": w.Get("status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("records", "offset", "limit", 0).
		Request().
		Result()
}

func (w *InstanceExpiredKeyScanHistoriesDSWrapper) showExpireKeyScanInfoToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("records", schemas.SliceToList(body.Get("records"),
			func(records gjson.Result) any {
				return map[string]any{
					"instance_id": records.Get("instance_id").Value(),
					"id":          records.Get("id").Value(),
					"status":      records.Get("status").Value(),
					"scan_type":   records.Get("scan_type").Value(),
					"num":         records.Get("num").Value(),
					"created_at":  records.Get("created_at").Value(),
					"started_at":  records.Get("started_at").Value(),
					"finished_at": records.Get("finished_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
