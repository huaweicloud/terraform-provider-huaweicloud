// Generated by PMS #686
package dcs

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDcsInstanceShards() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDcsInstanceShardsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"group_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the shard list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the shard ID.`,
						},
						"group_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the shard name.`,
						},
						"replication_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of replicas in the shard.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"replication_role": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the role of the replica.`,
									},
									"replication_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the replica IP address.`,
									},
									"is_replication": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether the replica is a newly added one.`,
									},
									"replication_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the replica ID.`,
									},
									"node_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the node ID.`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the replica status.`,
									},
									"az_code": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the AZ where the replica is in.`,
									},
									"dimensions": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the monitoring metric dimension of the replica.`,
										Elem:        groLisRepLisDimElem(),
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// groLisRepLisDimElem
// The Elem of "group_list.replication_list.dimensions"
func groLisRepLisDimElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the monitoring dimension name.`,
			},
			"value": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the dimension value.`,
			},
		},
	}
}

type InstanceShardsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newInstanceShardsDSWrapper(d *schema.ResourceData, meta interface{}) *InstanceShardsDSWrapper {
	return &InstanceShardsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDcsInstanceShardsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newInstanceShardsDSWrapper(d, meta)
	lisGroRepInfRst, err := wrapper.ListGroupReplicationInfo()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listGroupReplicationInfoToSchema(lisGroRepInfRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DCS GET /v2/{project_id}/instance/{instance_id}/groups
func (w *InstanceShardsDSWrapper) ListGroupReplicationInfo() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dcs")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instance/{instance_id}/groups"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *InstanceShardsDSWrapper) listGroupReplicationInfoToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("group_list", schemas.SliceToList(body.Get("group_list"),
			func(groupList gjson.Result) any {
				return map[string]any{
					"group_id":   groupList.Get("group_id").Value(),
					"group_name": groupList.Get("group_name").Value(),
					"replication_list": schemas.SliceToList(groupList.Get("replication_list"),
						func(replicationList gjson.Result) any {
							return map[string]any{
								"replication_role": replicationList.Get("replication_role").Value(),
								"replication_ip":   replicationList.Get("replication_ip").Value(),
								"is_replication":   replicationList.Get("is_replication").Value(),
								"replication_id":   replicationList.Get("replication_id").Value(),
								"node_id":          replicationList.Get("node_id").Value(),
								"status":           replicationList.Get("status").Value(),
								"az_code":          replicationList.Get("az_code").Value(),
								"dimensions":       w.setGroLisRepLisDim(replicationList),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*InstanceShardsDSWrapper) setGroLisRepLisDim(replicationList gjson.Result) any {
	return schemas.SliceToList(replicationList.Get("dimensions"), func(dimensions gjson.Result) any {
		return map[string]any{
			"name":  dimensions.Get("name").Value(),
			"value": dimensions.Get("value").Value(),
		}
	})
}
