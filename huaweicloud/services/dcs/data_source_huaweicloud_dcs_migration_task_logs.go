// Generated by PMS #691
package dcs

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDcsMigrationTaskLogs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDcsMigrationTaskLogsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Indicates the ID of the data migration task.`,
			},
			"log_level": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Indicates the log level.`,
			},
			"migration_logs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the log list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"keyword": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the log keyword.`,
						},
						"log_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the log level.`,
						},
						"message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the log information.`,
						},
						"log_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the log code.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the migration log is generated.`,
						},
					},
				},
			},
		},
	}
}

type MigrationTaskLogsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMigrationTaskLogsDSWrapper(d *schema.ResourceData, meta interface{}) *MigrationTaskLogsDSWrapper {
	return &MigrationTaskLogsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDcsMigrationTaskLogsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMigrationTaskLogsDSWrapper(d, meta)
	lisMigTasLogRst, err := wrapper.ListMigrationTaskLogs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listMigrationTaskLogsToSchema(lisMigTasLogRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DCS GET /v2/{project_id}/migration-task/{task_id}/logs
func (w *MigrationTaskLogsDSWrapper) ListMigrationTaskLogs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dcs")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/migration-task/{task_id}/logs"
	uri = strings.ReplaceAll(uri, "{task_id}", w.Get("task_id").(string))
	params := map[string]any{
		"log_level": w.Get("log_level"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("migration_logs", "offset", "limit", 0).
		Request().
		Result()
}

func (w *MigrationTaskLogsDSWrapper) listMigrationTaskLogsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("migration_logs", schemas.SliceToList(body.Get("migration_logs"),
			func(migrationLogs gjson.Result) any {
				return map[string]any{
					"keyword":    schemas.SliceToStrList(migrationLogs.Get("keyword")),
					"log_level":  migrationLogs.Get("log_level").Value(),
					"message":    migrationLogs.Get("message").Value(),
					"log_code":   migrationLogs.Get("log_code").Value(),
					"created_at": migrationLogs.Get("created_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
