// Generated by PMS #690
package dcs

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDcsMigrationTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDcsMigrationTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the migration task name.`,
			},
			"migration_tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the migration task list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"task_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the migration task ID.`,
						},
						"task_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the migration task name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description of a migration task.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the migration task status.`,
						},
						"migration_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the mode of the migration, which can be backup file import or online migration.`,
						},
						"migration_method": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of the migration, which can be **full migration** or **incremental migration**.`,
						},
						"ecs_tenant_private_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the private IP address of the migration ECS on the tenant side.`,
						},
						"data_source": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the source Redis address, which is **ip:port** or a bucket name.`,
						},
						"source_instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the source instance.`,
						},
						"source_instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the source instance.`,
						},
						"source_instance_subnet_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the subnet ID of the source instance.`,
						},
						"source_instance_spec_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the source instance specification code.`,
						},
						"source_instance_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the source instance.`,
						},
						"target_instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the target instance ID.`,
						},
						"target_instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the target instance name.`,
						},
						"target_instance_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the target instance.`,
						},
						"target_instance_subnet_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the subnet ID of the target instance.`,
						},
						"target_instance_addrs": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the target Redis address. The format is **ip:port**.`,
						},
						"target_instance_spec_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the target instance flavor.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the version.`,
						},
						"resume_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the operation mode, which can be **auto** or **manual**.`,
						},
						"supported_features": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the supported features.`,
						},
						"error_message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the error information.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the migration task is created.`,
						},
						"released_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the migration server is released.`,
						},
					},
				},
			},
		},
	}
}

type MigrationTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMigrationTasksDSWrapper(d *schema.ResourceData, meta interface{}) *MigrationTasksDSWrapper {
	return &MigrationTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDcsMigrationTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMigrationTasksDSWrapper(d, meta)
	listMigrationTaskRst, err := wrapper.ListMigrationTask()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listMigrationTaskToSchema(listMigrationTaskRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DCS GET /v2/{project_id}/migration-tasks
func (w *MigrationTasksDSWrapper) ListMigrationTask() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dcs")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/migration-tasks"
	params := map[string]any{
		"name": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("migration_tasks", "offset", "limit", 0).
		Request().
		Result()
}

func (w *MigrationTasksDSWrapper) listMigrationTaskToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("migration_tasks", schemas.SliceToList(body.Get("migration_tasks"),
			func(migrationTasks gjson.Result) any {
				return map[string]any{
					"task_id":                   migrationTasks.Get("task_id").Value(),
					"task_name":                 migrationTasks.Get("task_name").Value(),
					"description":               migrationTasks.Get("description").Value(),
					"status":                    migrationTasks.Get("status").Value(),
					"migration_type":            migrationTasks.Get("migration_type").Value(),
					"migration_method":          migrationTasks.Get("migration_method").Value(),
					"ecs_tenant_private_ip":     migrationTasks.Get("ecs_tenant_private_ip").Value(),
					"data_source":               migrationTasks.Get("data_source").Value(),
					"source_instance_id":        migrationTasks.Get("source_instance_id").Value(),
					"source_instance_name":      migrationTasks.Get("source_instance_name").Value(),
					"source_instance_subnet_id": migrationTasks.Get("source_instance_subnet_id").Value(),
					"source_instance_spec_code": migrationTasks.Get("source_instance_spec_code").Value(),
					"source_instance_status":    migrationTasks.Get("source_instance_status").Value(),
					"target_instance_id":        migrationTasks.Get("target_instance_id").Value(),
					"target_instance_name":      migrationTasks.Get("target_instance_name").Value(),
					"target_instance_status":    migrationTasks.Get("target_instance_status").Value(),
					"target_instance_subnet_id": migrationTasks.Get("target_instance_subnet_id").Value(),
					"target_instance_addrs":     migrationTasks.Get("target_instance_addrs").Value(),
					"target_instance_spec_code": migrationTasks.Get("target_instance_spec_code").Value(),
					"version":                   migrationTasks.Get("version").Value(),
					"resume_mode":               migrationTasks.Get("resume_mode").Value(),
					"supported_features":        schemas.SliceToStrList(migrationTasks.Get("supported_features")),
					"error_message":             migrationTasks.Get("error_message").Value(),
					"created_at":                migrationTasks.Get("created_at").Value(),
					"released_at":               migrationTasks.Get("released_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
