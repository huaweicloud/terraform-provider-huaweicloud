// Generated by PMS #536
package swr

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSwrDomainReports() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrDomainReportsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"resource_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the resource type.`,
			},
			"frequency": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the frequency type.`,
			},
			"reports": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The domain resource reports.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"date": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The date of the domain resource report.`,
						},
						"value": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The value of the domain resource report.`,
						},
					},
				},
			},
		},
	}
}

type DomainReportsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDomainReportsDSWrapper(d *schema.ResourceData, meta interface{}) *DomainReportsDSWrapper {
	return &DomainReportsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrDomainReportsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDomainReportsDSWrapper(d, meta)
	shoDomResRepRst, err := wrapper.ShowDomainResourceReports()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showDomainResourceReportsToSchema(shoDomResRepRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SWR GET /v2/manage/reports/{resource_type}/{frequency}
func (w *DomainReportsDSWrapper) ShowDomainResourceReports() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/manage/reports/{resource_type}/{frequency}"
	uri = strings.ReplaceAll(uri, "{resource_type}", w.Get("resource_type").(string))
	uri = strings.ReplaceAll(uri, "{frequency}", w.Get("frequency").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *DomainReportsDSWrapper) showDomainResourceReportsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("reports", schemas.SliceToList(*body,
			func(report gjson.Result) any {
				return map[string]any{
					"date":  report.Get("date").Value(),
					"value": report.Get("value").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
