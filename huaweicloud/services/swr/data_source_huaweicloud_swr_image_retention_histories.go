// Generated by PMS #239
package swr

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSwrImageRetentionHistories() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrImageRetentionHistoriesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"organization": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the name of the organization.`,
			},
			"repository": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the image repository name.`,
			},
			"records": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The image retention histories.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The ID of the image retention history record.`,
						},
						"retention_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The image retention policy ID.`,
						},
						"organization": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The organization name.`,
						},
						"repository": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The image repository name.`,
						},
						"rule_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The image retention rule type.`,
						},
						"tag": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The image tag.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
					},
				},
			},
		},
	}
}

type ImageRetentionHistoriesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newImageRetentionHistoriesDSWrapper(d *schema.ResourceData, meta interface{}) *ImageRetentionHistoriesDSWrapper {
	return &ImageRetentionHistoriesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrImageRetentionHistoriesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newImageRetentionHistoriesDSWrapper(d, meta)
	lisRetHisRst, err := wrapper.ListRetentionHistories()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listRetentionHistoriesToSchema(lisRetHisRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SWR GET /v2/manage/namespaces/{namespace}/repos/{repository}/retentions/histories
func (w *ImageRetentionHistoriesDSWrapper) ListRetentionHistories() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/manage/namespaces/{namespace}/repos/{repository}/retentions/histories"
	uri = strings.ReplaceAll(uri, "{namespace}", w.Get("organization").(string))
	uri = strings.ReplaceAll(uri, "{repository}", w.Get("repository").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("retention_log", "offset", "limit", 10).
		Request().
		Result()
}

func (w *ImageRetentionHistoriesDSWrapper) listRetentionHistoriesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("records", schemas.SliceToList(body.Get("retention_log"),
			func(records gjson.Result) any {
				return map[string]any{
					"id":           records.Get("id").Value(),
					"retention_id": records.Get("retention_id").Value(),
					"organization": records.Get("namespace").Value(),
					"repository":   records.Get("repo").Value(),
					"rule_type":    records.Get("rule_type").Value(),
					"tag":          records.Get("tag").Value(),
					"created_at":   w.setRetLogCreAt(records),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*ImageRetentionHistoriesDSWrapper) setRetLogCreAt(data gjson.Result) string {
	createdAt := data.Get("created_at").String()
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(createdAt)/1000, false)
}
