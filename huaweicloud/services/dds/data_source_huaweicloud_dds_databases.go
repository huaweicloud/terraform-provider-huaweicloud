// Generated by PMS #403
package dds

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDdsDatabases() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDdsDatabasesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"databases": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the databases list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the database name.`,
						},
						"data_size": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the data size, unit is GB.`,
						},
						"storage_size": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the storage size, unit is GB.`,
						},
						"collection_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the collection num.`,
						},
					},
				},
			},
		},
	}
}

type DatabasesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDatabasesDSWrapper(d *schema.ResourceData, meta interface{}) *DatabasesDSWrapper {
	return &DatabasesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDdsDatabasesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDatabasesDSWrapper(d, meta)
	listDatabasesRst, err := wrapper.ListDatabases()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listDatabasesToSchema(listDatabasesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DDS GET /v3/{project_id}/instances/{instance_id}/databases
func (w *DatabasesDSWrapper) ListDatabases() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/databases"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("databases", "offset", "limit", 0).
		Request().
		Result()
}

func (w *DatabasesDSWrapper) listDatabasesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("databases", schemas.SliceToList(body.Get("databases"),
			func(databases gjson.Result) any {
				return map[string]any{
					"name":           databases.Get("name").Value(),
					"data_size":      databases.Get("data_size").Value(),
					"storage_size":   databases.Get("storage_size").Value(),
					"collection_num": databases.Get("collection_num").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
