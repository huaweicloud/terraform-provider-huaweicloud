// Generated by PMS #413
package dds

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDdsPtApplicableInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDdsPtApplicableInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"configuration_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the parameter template.`,
			},
			"instances": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the applicable instances.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance name.`,
						},
						"entities": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of node group information or node information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"entity_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the group ID or node ID.`,
									},
									"entity_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the group name or node name.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type PtApplicableInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPtApplicableInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *PtApplicableInstancesDSWrapper {
	return &PtApplicableInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDdsPtApplicableInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPtApplicableInstancesDSWrapper(d, meta)
	lisAppInsRst, err := wrapper.ListAppliedInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listAppliedInstancesToSchema(lisAppInsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DDS GET /v3/{project_id}/configurations/{config_id}/applicable-instances
func (w *PtApplicableInstancesDSWrapper) ListAppliedInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/configurations/{config_id}/applicable-instances"
	uri = strings.ReplaceAll(uri, "{config_id}", w.Get("configuration_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("instances", "offset", "limit", 0).
		Request().
		Result()
}

func (w *PtApplicableInstancesDSWrapper) listAppliedInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("instances", schemas.SliceToList(body.Get("instances"),
			func(instances gjson.Result) any {
				return map[string]any{
					"instance_id":   instances.Get("instance_id").Value(),
					"instance_name": instances.Get("instance_name").Value(),
					"entities": schemas.SliceToList(instances.Get("entities"),
						func(entities gjson.Result) any {
							return map[string]any{
								"entity_id":   entities.Get("entity_id").Value(),
								"entity_name": entities.Get("entity_name").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
