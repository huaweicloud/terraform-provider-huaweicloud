// Generated by PMS #399
package dds

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDdsAuditLogLinks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDdsAuditLogLinksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"ids": {
				Type:        schema.TypeList,
				Required:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the list of audit log ids. A maximum of 50 audit log IDs are allowed in the list.`,
			},
			"links": {
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Indicates the list of audit log download links. The validity period is 5 minutes.`,
			},
		},
	}
}

type AuditLogLinksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAuditLogLinksDSWrapper(d *schema.ResourceData, meta interface{}) *AuditLogLinksDSWrapper {
	return &AuditLogLinksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDdsAuditLogLinksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAuditLogLinksDSWrapper(d, meta)
	listAuditlogLinksRst, err := wrapper.ListAuditlogLinks()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listAuditlogLinksToSchema(listAuditlogLinksRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DDS POST /v3/{project_id}/instances/{instance_id}/auditlog-links
func (w *AuditLogLinksDSWrapper) ListAuditlogLinks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/auditlog-links"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"ids": w.ListToArray("ids"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("POST").
		URI(uri).
		Body(params).
		Request().
		Result()
}

func (w *AuditLogLinksDSWrapper) listAuditlogLinksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("links", body.Get("links").Value()),
	)
	return mErr.ErrorOrNil()
}
