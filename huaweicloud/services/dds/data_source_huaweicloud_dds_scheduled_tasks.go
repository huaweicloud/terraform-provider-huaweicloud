// Generated by PMS #464
package dds

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDdsScheduledTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDdsScheduledTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the instance ID.`,
			},
			"job_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task name.`,
			},
			"job_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task execution status.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the start time.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the end time.`,
			},
			"schedules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the tasks list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"job_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task ID.`,
						},
						"job_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task name.`,
						},
						"create_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the create time.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the start time.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the end time.`,
						},
						"job_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task execution status.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance name.`,
						},
						"instance_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance status.`,
						},
					},
				},
			},
		},
	}
}

type ScheduledTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newScheduledTasksDSWrapper(d *schema.ResourceData, meta interface{}) *ScheduledTasksDSWrapper {
	return &ScheduledTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDdsScheduledTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newScheduledTasksDSWrapper(d, meta)
	lisSchTasRst, err := wrapper.ListScheduledTasks()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listScheduledTasksToSchema(lisSchTasRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DDS GET /v3/{project_id}/scheduled-jobs
func (w *ScheduledTasksDSWrapper) ListScheduledTasks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/scheduled-jobs"
	params := map[string]any{
		"job_name":    w.Get("job_name"),
		"job_status":  w.Get("job_status"),
		"instance_id": w.Get("instance_id"),
		"start_time":  w.Get("start_time"),
		"end_time":    w.Get("end_time"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("schedules", "offset", "limit", 0).
		Request().
		Result()
}

func (w *ScheduledTasksDSWrapper) listScheduledTasksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("schedules", schemas.SliceToList(body.Get("schedules"),
			func(schedules gjson.Result) any {
				return map[string]any{
					"job_id":          schedules.Get("job_id").Value(),
					"job_name":        schedules.Get("job_name").Value(),
					"create_time":     schedules.Get("create_time").Value(),
					"start_time":      schedules.Get("start_time").Value(),
					"end_time":        schedules.Get("end_time").Value(),
					"job_status":      schedules.Get("job_status").Value(),
					"instance_id":     schedules.Get("instance_id").Value(),
					"instance_name":   schedules.Get("instance_name").Value(),
					"instance_status": schedules.Get("instance_status").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
