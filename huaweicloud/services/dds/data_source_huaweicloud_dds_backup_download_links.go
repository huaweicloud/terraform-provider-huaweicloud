// Generated by PMS #411
package dds

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDdsBackupDownloadLinks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDdsBackupDownloadLinksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"backup_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the backup ID.`,
			},
			"files": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of backup files.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the file name.`,
						},
						"download_link": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the link for downloading the backup file.`,
						},
						"size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the file size in KB.`,
						},
						"link_expired_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the link expiration time. The format is **yyyy-mm-ddThh:mm:ssZ**.`,
						},
					},
				},
			},
			"bucket": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the name of the bucket where the file is located.`,
			},
		},
	}
}

type BackupDownloadLinksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newBackupDownloadLinksDSWrapper(d *schema.ResourceData, meta interface{}) *BackupDownloadLinksDSWrapper {
	return &BackupDownloadLinksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDdsBackupDownloadLinksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newBackupDownloadLinksDSWrapper(d, meta)
	shoBacDowLinRst, err := wrapper.ShowBackupDownloadLink()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.showBackupDownloadLinkToSchema(shoBacDowLinRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DDS GET /v3/{project_id}/backups/download-file
func (w *BackupDownloadLinksDSWrapper) ShowBackupDownloadLink() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/backups/download-file"
	params := map[string]any{
		"instance_id": w.Get("instance_id"),
		"backup_id":   w.Get("backup_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *BackupDownloadLinksDSWrapper) showBackupDownloadLinkToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("files", schemas.SliceToList(body.Get("files"),
			func(files gjson.Result) any {
				return map[string]any{
					"name":              files.Get("name").Value(),
					"download_link":     files.Get("download_link").Value(),
					"size":              files.Get("size").Value(),
					"link_expired_time": files.Get("link_expired_time").Value(),
				}
			},
		)),
		d.Set("bucket", body.Get("bucket").Value()),
	)
	return mErr.ErrorOrNil()
}
