// Generated by PMS #898
package rds

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceRdsBusinessPartners() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRdsBusinessPartnersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"business_partners": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"order": {
							Type:     schema.TypeInt,
							Computed: true,
						},
						"international": {
							Type:     schema.TypeBool,
							Computed: true,
						},
						"bp_domain_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"bp_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
		},
	}
}

type BusinessPartnersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newBusinessPartnersDSWrapper(d *schema.ResourceData, meta interface{}) *BusinessPartnersDSWrapper {
	return &BusinessPartnersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRdsBusinessPartnersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newBusinessPartnersDSWrapper(d, meta)
	lisBusParRst, err := wrapper.ListBusinessPartners()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listBusinessPartnersToSchema(lisBusParRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API RDS GET /v3/{project_id}/business-partners
func (w *BusinessPartnersDSWrapper) ListBusinessPartners() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/business-partners"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("business_partners", "offset", "limit", 0).
		Request().
		Result()
}

func (w *BusinessPartnersDSWrapper) listBusinessPartnersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("business_partners", schemas.SliceToList(body.Get("business_partners"),
			func(busPartners gjson.Result) any {
				return map[string]any{
					"order":         busPartners.Get("order").Value(),
					"international": busPartners.Get("international").Value(),
					"bp_domain_id":  busPartners.Get("bp_domain_id").Value(),
					"bp_name":       busPartners.Get("bp_name").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
