// Generated by PMS #650
package rds

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceRdsDrInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRdsDrInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_dr_relations": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the DR instance list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"master_instance": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the master instance information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"project_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the project name.`,
									},
									"instance_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the instance ID.`,
									},
									"region": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the region.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the project ID.`,
									},
								},
							},
						},
						"slave_instances": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the DR instance information list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"region": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the region.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the project ID.`,
									},
									"project_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the project name.`,
									},
									"instance_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the instance ID.`,
									},
								},
							},
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the current region instance ID.`,
						},
					},
				},
			},
		},
	}
}

type DrInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDrInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *DrInstancesDSWrapper {
	return &DrInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRdsDrInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDrInstancesDSWrapper(d, meta)
	listDrRelationsRst, err := wrapper.ListDrRelations()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listDrRelationsToSchema(listDrRelationsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API RDS GET /v3/{project_id}/instances/disaster-recovery-relation
func (w *DrInstancesDSWrapper) ListDrRelations() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/disaster-recovery-relation"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *DrInstancesDSWrapper) listDrRelationsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("instance_dr_relations", schemas.SliceToList(body.Get("instance_dr_relations"),
			func(insDrRel gjson.Result) any {
				return map[string]any{
					"master_instance": schemas.SliceToList(insDrRel.Get("master_instance"),
						func(masterInstance gjson.Result) any {
							return map[string]any{
								"project_name": masterInstance.Get("project_name").Value(),
								"instance_id":  masterInstance.Get("instance_id").Value(),
								"region":       masterInstance.Get("region").Value(),
								"project_id":   masterInstance.Get("project_id").Value(),
							}
						},
					),
					"slave_instances": schemas.SliceToList(insDrRel.Get("slave_instances"),
						func(slaveInstances gjson.Result) any {
							return map[string]any{
								"region":       slaveInstances.Get("region").Value(),
								"project_id":   slaveInstances.Get("project_id").Value(),
								"project_name": slaveInstances.Get("project_name").Value(),
								"instance_id":  slaveInstances.Get("instance_id").Value(),
							}
						},
					),
					"instance_id": insDrRel.Get("instance_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
