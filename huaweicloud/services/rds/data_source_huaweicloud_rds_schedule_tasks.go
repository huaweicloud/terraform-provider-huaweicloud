// Generated by PMS #910
package rds

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRdsScheduleTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRdsScheduleTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"instance_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"instance_name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"status": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"start_time": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"end_time": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"schedule_tasks": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"instance_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"instance_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"instance_status": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"datastore_type": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"status": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"order": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"volume_type": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"target_config": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"cpu": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"flavor": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"mem": {
										Type:     schema.TypeString,
										Computed: true,
									},
								},
							},
						},
						"create_time": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"start_time": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"end_time": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
		},
	}
}

type ScheduleTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newScheduleTasksDSWrapper(d *schema.ResourceData, meta interface{}) *ScheduleTasksDSWrapper {
	return &ScheduleTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRdsScheduleTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newScheduleTasksDSWrapper(d, meta)
	listScheduleTasksRst, err := wrapper.ListScheduleTasks()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listScheduleTasksToSchema(listScheduleTasksRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API RDS GET /v3/{project_id}/schedule-tasks
func (w *ScheduleTasksDSWrapper) ListScheduleTasks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/schedule-tasks"
	params := map[string]any{
		"instance_id":   w.Get("instance_id"),
		"instance_name": w.Get("instance_name"),
		"status":        w.Get("status"),
		"start_time":    w.Get("start_time"),
		"end_time":      w.Get("end_time"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("schedule_tasks", "offset", "limit", 50).
		Request().
		Result()
}

func (w *ScheduleTasksDSWrapper) listScheduleTasksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("schedule_tasks", schemas.SliceToList(body.Get("schedule_tasks"),
			func(scheduleTasks gjson.Result) any {
				return map[string]any{
					"id":              scheduleTasks.Get("id").Value(),
					"name":            scheduleTasks.Get("name").Value(),
					"instance_id":     scheduleTasks.Get("instance_id").Value(),
					"instance_name":   scheduleTasks.Get("instance_name").Value(),
					"instance_status": scheduleTasks.Get("instance_status").Value(),
					"datastore_type":  scheduleTasks.Get("datastore_type").Value(),
					"status":          scheduleTasks.Get("status").Value(),
					"order":           scheduleTasks.Get("order").Value(),
					"start_time":      scheduleTasks.Get("start_time").Value(),
					"create_time":     scheduleTasks.Get("create_time").Value(),
					"end_time":        scheduleTasks.Get("end_time").Value(),
					"volume_type":     scheduleTasks.Get("volume_type").Value(),
					"target_config": schemas.SliceToList(scheduleTasks.Get("target_config"),
						func(targetConfig gjson.Result) any {
							return map[string]any{
								"cpu":    targetConfig.Get("cpu").Value(),
								"flavor": targetConfig.Get("flavor").Value(),
								"mem":    targetConfig.Get("mem").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
