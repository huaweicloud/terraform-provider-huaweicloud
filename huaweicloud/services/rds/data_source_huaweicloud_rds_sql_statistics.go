// Generated by PMS #977
package rds

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceRdsSqlStatistics() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRdsSqlStatisticsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the RDS instance.`,
			},
			"list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of SQL statistics.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"query": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the text format of an SQL statement.`,
						},
						"rows": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the scanned rows.`,
						},
						"can_use": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates whether SQL throttling can be applied.`,
						},
						"user_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the username.`,
						},
						"database": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the database name.`,
						},
						"query_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the internal hash code calculated by the SQL parse tree.`,
						},
						"calls": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of calls.`,
						},
					},
				},
			},
		},
	}
}

type SqlStatisticsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSqlStatisticsDSWrapper(d *schema.ResourceData, meta interface{}) *SqlStatisticsDSWrapper {
	return &SqlStatisticsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRdsSqlStatisticsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSqlStatisticsDSWrapper(d, meta)
	listSqlStatisticsRst, err := wrapper.ListSqlStatistics()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSqlStatisticsToSchema(listSqlStatisticsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API RDS GET /v3/{project_id}/instances/{instance_id}/sql-statistics
func (w *SqlStatisticsDSWrapper) ListSqlStatistics() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/sql-statistics"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("list", "offset", "limit", 0).
		Request().
		Result()
}

func (w *SqlStatisticsDSWrapper) listSqlStatisticsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("list", schemas.SliceToList(body.Get("list"),
			func(list gjson.Result) any {
				return map[string]any{
					"query":     list.Get("query").Value(),
					"rows":      list.Get("rows").Value(),
					"can_use":   list.Get("can_use").Value(),
					"user_name": list.Get("user_name").Value(),
					"database":  list.Get("database").Value(),
					"query_id":  list.Get("query_id").Value(),
					"calls":     list.Get("calls").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
