// Generated by PMS #569
package vpc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceVpcSubnetIpAvailabilities() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpcSubnetIpAvailabilitiesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"network_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the subnet ID.`,
			},
			"network_ip_availability": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The network IP address usage objects.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"network_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The network ID.`,
						},
						"network_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The network name.`,
						},
						"total_ips": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total number of IP addresses on a network.`,
						},
						"used_ips": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of in-use IP addresses on a network.`,
						},
						"subnet_ip_availability": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The subnet IP address usage objects.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"used_ips": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of in-use IP addresses on a subnet.`,
									},
									"subnet_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The subnet ID.`,
									},
									"subnet_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The subnet name.`,
									},
									"ip_version": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The IP version of the subnet.`,
									},
									"cidr": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The subnet CIDR block.`,
									},
									"total_ips": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The total number of IP addresses on a subnet.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type SubnetIpAvailabilitiesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSubnetIpAvailabilitiesDSWrapper(d *schema.ResourceData, meta interface{}) *SubnetIpAvailabilitiesDSWrapper {
	return &SubnetIpAvailabilitiesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpcSubnetIpAvailabilitiesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSubnetIpAvailabilitiesDSWrapper(d, meta)
	shoNetIpAvaRst, err := wrapper.ShowNetworkIpAvailabilities()
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(shoNetIpAvaRst.Get("network_ip_availability.network_id").String())

	err = wrapper.showNetworkIpAvailabilitiesToSchema(shoNetIpAvaRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API VPC GET /v2.0/network-ip-availabilities/{network_id}
func (w *SubnetIpAvailabilitiesDSWrapper) ShowNetworkIpAvailabilities() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpc")
	if err != nil {
		return nil, err
	}

	uri := "/v2.0/network-ip-availabilities/{network_id}"
	uri = strings.ReplaceAll(uri, "{network_id}", w.Get("network_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SubnetIpAvailabilitiesDSWrapper) showNetworkIpAvailabilitiesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("network_ip_availability", schemas.ObjectToList(body.Get("network_ip_availability"),
			func(netIpAva gjson.Result) any {
				return map[string]any{
					"network_id":   netIpAva.Get("network_id").Value(),
					"network_name": netIpAva.Get("network_name").Value(),
					"total_ips":    netIpAva.Get("total_ips").Value(),
					"used_ips":     netIpAva.Get("used_ips").Value(),
					"subnet_ip_availability": schemas.SliceToList(netIpAva.Get("subnet_ip_availability"),
						func(subnetIpAvailability gjson.Result) any {
							return map[string]any{
								"used_ips":    subnetIpAvailability.Get("used_ips").Value(),
								"subnet_id":   subnetIpAvailability.Get("subnet_id").Value(),
								"subnet_name": subnetIpAvailability.Get("subnet_name").Value(),
								"ip_version":  subnetIpAvailability.Get("ip_version").Value(),
								"cidr":        subnetIpAvailability.Get("cidr").Value(),
								"total_ips":   subnetIpAvailability.Get("total_ips").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
