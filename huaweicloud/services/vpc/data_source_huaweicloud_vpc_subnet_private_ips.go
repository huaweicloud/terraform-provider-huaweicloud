// Generated by PMS #531
package vpc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceVpcSubnetPrivateIps() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpcSubnetPrivateIpsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"subnet_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the subnet that the private IP address belongs to.`,
			},
			"private_ips": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of private IP addresses.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"device_owner": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource using the private IP address. The parameter is left blank if it is not used.`,
						},
						"ip_address": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The private IP address.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the private IP address.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The private IP address ID`,
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the subnet from which IP addresses are assigned.`,
						},
					},
				},
			},
		},
	}
}

type SubnetPrivateIpsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSubnetPrivateIpsDSWrapper(d *schema.ResourceData, meta interface{}) *SubnetPrivateIpsDSWrapper {
	return &SubnetPrivateIpsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpcSubnetPrivateIpsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSubnetPrivateIpsDSWrapper(d, meta)
	listPrivateipsRst, err := wrapper.ListPrivateips()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPrivateipsToSchema(listPrivateipsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API VPC GET /v1/{project_id}/subnets/{subnet_id}/privateips
func (w *SubnetPrivateIpsDSWrapper) ListPrivateips() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/subnets/{subnet_id}/privateips"
	uri = strings.ReplaceAll(uri, "{subnet_id}", w.Get("subnet_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		MarkerPager("privateips", "privateips[-1].id", "marker").
		Request().
		Result()
}

func (w *SubnetPrivateIpsDSWrapper) listPrivateipsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("private_ips", schemas.SliceToList(body.Get("privateips"),
			func(privateIps gjson.Result) any {
				return map[string]any{
					"device_owner": privateIps.Get("device_owner").Value(),
					"ip_address":   privateIps.Get("ip_address").Value(),
					"status":       privateIps.Get("status").Value(),
					"id":           privateIps.Get("id").Value(),
					"subnet_id":    privateIps.Get("subnet_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
