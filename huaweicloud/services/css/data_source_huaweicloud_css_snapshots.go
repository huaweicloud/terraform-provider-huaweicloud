// Generated by PMS #451
package css

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCssSnapshots() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCssSnapshotsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the cluster.`,
			},
			"backups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The snapshot list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot ID.`,
						},
						"backup_expected_start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot start time.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot version.`,
						},
						"restore_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot restoration status.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot start time.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot description.`,
						},
						"backup_method": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot creation mode.`,
						},
						"backup_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot creation type.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot end time.`,
						},
						"datastore": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The datastore of the cluster snapshot.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The engine type.`,
									},
									"version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The elastic search engine version.`,
									},
								},
							},
						},
						"cluster_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster ID.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the snapshot was updated.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot status.`,
						},
						"backup_keep_day": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The snapshot retention period.`,
						},
						"backup_period": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a snapshot is created every day.`,
						},
						"indices": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The index of the back up.`,
						},
						"total_shards": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total number of shards of the back up index.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The snapshot creation time.`,
						},
						"cluster_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster name.`,
						},
						"failed_shards": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of shards that fail to be backed up.`,
						},
						"bucket_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the bucket that stores snapshot data.`,
						},
					},
				},
			},
		},
	}
}

type SnapshotsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSnapshotsDSWrapper(d *schema.ResourceData, meta interface{}) *SnapshotsDSWrapper {
	return &SnapshotsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCssSnapshotsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSnapshotsDSWrapper(d, meta)
	listSnapshotsRst, err := wrapper.ListSnapshots()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSnapshotsToSchema(listSnapshotsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSS GET /v1.0/{project_id}/clusters/{cluster_id}/index_snapshots
func (w *SnapshotsDSWrapper) ListSnapshots() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "css")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/clusters/{cluster_id}/index_snapshots"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SnapshotsDSWrapper) listSnapshotsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("backups", schemas.SliceToList(body.Get("backups"),
			func(backups gjson.Result) any {
				return map[string]any{
					"id":                         backups.Get("id").Value(),
					"backup_expected_start_time": backups.Get("backupExpectedStartTime").Value(),
					"version":                    backups.Get("version").Value(),
					"restore_status":             backups.Get("restoreStatus").Value(),
					"start_time":                 w.setBackupsStartTime(backups),
					"description":                backups.Get("description").Value(),
					"backup_method":              backups.Get("backupMethod").Value(),
					"backup_type":                backups.Get("backupType").Value(),
					"end_time":                   w.setBackupsEndTime(backups),
					"datastore": schemas.SliceToList(backups.Get("datastore"),
						func(datastore gjson.Result) any {
							return map[string]any{
								"type":    datastore.Get("type").Value(),
								"version": datastore.Get("version").Value(),
							}
						},
					),
					"cluster_id":      backups.Get("clusterId").Value(),
					"updated_at":      backups.Get("updated").Value(),
					"name":            backups.Get("name").Value(),
					"status":          backups.Get("status").Value(),
					"backup_keep_day": backups.Get("backupKeepDay").Value(),
					"backup_period":   backups.Get("backupPeriod").Value(),
					"indices":         backups.Get("indices").Value(),
					"total_shards":    backups.Get("totalShards").Value(),
					"created_at":      backups.Get("created").Value(),
					"cluster_name":    backups.Get("clusterName").Value(),
					"failed_shards":   backups.Get("failedShards").Value(),
					"bucket_name":     backups.Get("bucketName").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*SnapshotsDSWrapper) setBackupsStartTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("startTime").Int()/1000, false)
}

func (*SnapshotsDSWrapper) setBackupsEndTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("endTime").Int()/1000, false)
}
