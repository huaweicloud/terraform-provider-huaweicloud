// Generated by PMS #448
package css

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCssScanTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCssScanTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the CSS cluster.`,
			},
			"scan_tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The scan tasks.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The scan task ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The scan task name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The scan task description.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The execution status of the cluster scan task.`,
						},
						"smn_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The SMN alarm sending status after the cluster scan task is completed.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The scan task creation time.`,
						},
						"smn_fail_reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The reason for failure in sending SMN alarm.`,
						},
						"task_risks": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The risk found by the cluster scan task.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"risk": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The risk item.`,
									},
									"level": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The level of the risk item.`,
									},
									"description": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The description of the risk item.`,
									},
									"suggestion": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The suggestion on how to resolve this risk item.`,
									},
								},
							},
						},
						"summary": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The risk summary after the cluster scan task is completed.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"suggestion": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of suggestions found by the cluster scan task.`,
									},
									"high": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of high-risk items found by the cluster scan task.`,
									},
									"medium": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of medium-risk items found by the cluster scan task.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type ScanTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newScanTasksDSWrapper(d *schema.ResourceData, meta interface{}) *ScanTasksDSWrapper {
	return &ScanTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCssScanTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newScanTasksDSWrapper(d, meta)
	listAiOpsRst, err := wrapper.ListAiOps()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAiOpsToSchema(listAiOpsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSS GET /v1.0/{project_id}/clusters/{cluster_id}/ai-ops
func (w *ScanTasksDSWrapper) ListAiOps() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "css")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/clusters/{cluster_id}/ai-ops"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("aiops_list", "start", "limit", 10).
		Request().
		Result()
}

func (w *ScanTasksDSWrapper) listAiOpsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("scan_tasks", schemas.SliceToList(body.Get("aiops_list"),
			func(scanTasks gjson.Result) any {
				return map[string]any{
					"id":              scanTasks.Get("id").Value(),
					"name":            scanTasks.Get("name").Value(),
					"description":     scanTasks.Get("desc").Value(),
					"status":          scanTasks.Get("status").Value(),
					"smn_status":      scanTasks.Get("smn_status").Value(),
					"created_at":      w.setAiopsListCreateTime(scanTasks),
					"smn_fail_reason": scanTasks.Get("smn_fail_reason").Value(),
					"task_risks": schemas.SliceToList(scanTasks.Get("task_risks"),
						func(taskRisks gjson.Result) any {
							return map[string]any{
								"risk":        taskRisks.Get("riskType").Value(),
								"level":       taskRisks.Get("level").Value(),
								"description": taskRisks.Get("desc").Value(),
								"suggestion":  taskRisks.Get("suggestion").Value(),
							}
						},
					),
					"summary": schemas.SliceToList(scanTasks.Get("summary"),
						func(summary gjson.Result) any {
							return map[string]any{
								"suggestion": summary.Get("suggestion").Value(),
								"high":       summary.Get("high").Value(),
								"medium":     summary.Get("medium").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*ScanTasksDSWrapper) setAiopsListCreateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("create_time").Int()/1000, false)
}
