// Generated by PMS #605
package tms

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceTmsTagKeys() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceTmsTagKeysRead,

		Schema: map[string]*schema.Schema{
			"region_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region ID.`,
			},
			"keys": {
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Indicates the tag keys.`,
			},
		},
	}
}

type TagKeysDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTagKeysDSWrapper(d *schema.ResourceData, meta interface{}) *TagKeysDSWrapper {
	return &TagKeysDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceTmsTagKeysRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTagKeysDSWrapper(d, meta)
	listTagKeysRst, err := wrapper.ListTagKeys()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listTagKeysToSchema(listTagKeysRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API TMS GET /v1.0/tag-keys
func (w *TagKeysDSWrapper) ListTagKeys() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "tms")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/tag-keys"
	params := map[string]any{
		"region_id": w.Get("region_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("keys", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *TagKeysDSWrapper) listTagKeysToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("keys", body.Get("keys").Value()),
	)
	return mErr.ErrorOrNil()
}
