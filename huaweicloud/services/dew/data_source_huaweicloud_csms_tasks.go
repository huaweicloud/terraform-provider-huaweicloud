// Generated by PMS #665
package dew

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCsmsTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCsmsTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"secret_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the secret.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task status.`,
			},
			"task_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task ID.`,
			},
			"tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The secret task list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"operate_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The rotation type.`,
						},
						"task_error_msg": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The task error information.`,
						},
						"task_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The task ID.`,
						},
						"rotation_func_urn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The URN of a FunctionGraph function.`,
						},
						"task_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The task status.`,
						},
						"task_error_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The task error code.`,
						},
						"secret_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The secret name.`,
						},
						"attempt_nums": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of task attempts.`,
						},
						"task_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The time when a task is created.`,
						},
					},
				},
			},
		},
	}
}

type CsmsTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCsmsTasksDSWrapper(d *schema.ResourceData, meta interface{}) *CsmsTasksDSWrapper {
	return &CsmsTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCsmsTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCsmsTasksDSWrapper(d, meta)
	listSecretTaskRst, err := wrapper.ListSecretTask()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSecretTaskToSchema(listSecretTaskRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSMS GET /v1/{project_id}/csms/tasks
func (w *CsmsTasksDSWrapper) ListSecretTask() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "kms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/csms/tasks"
	params := map[string]any{
		"secret_name": w.Get("secret_name"),
		"status":      w.Get("status"),
		"task_id":     w.Get("task_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("tasks", "next_marker", "marker").
		Request().
		Result()
}

func (w *CsmsTasksDSWrapper) listSecretTaskToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("tasks", schemas.SliceToList(body.Get("tasks"),
			func(tasks gjson.Result) any {
				return map[string]any{
					"operate_type":      tasks.Get("operate_type").Value(),
					"task_error_msg":    tasks.Get("task_error_msg").Value(),
					"task_id":           tasks.Get("task_id").Value(),
					"rotation_func_urn": tasks.Get("rotation_func_urn").Value(),
					"task_status":       tasks.Get("task_status").Value(),
					"task_error_code":   tasks.Get("task_error_code").Value(),
					"secret_name":       tasks.Get("secret_name").Value(),
					"attempt_nums":      tasks.Get("attempt_nums").Value(),
					"task_time":         tasks.Get("task_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
