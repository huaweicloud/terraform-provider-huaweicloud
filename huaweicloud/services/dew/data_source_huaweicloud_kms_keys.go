// Generated by PMS #274
package dew

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/chnsz/golangsdk"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

// @API DEW POST /v1.0/{project_id}/kms/list-keys
func DataSourceKmsKeys() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceKmsKeysRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource.`,
			},
			"key_state": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the key current status`,
			},
			"key_algorithm": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the key generation algorithm.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID to which the keys belong.`,
			},
			"keys": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the keys.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key ID.`,
						},
						"keystore_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The keystore ID to which the key belongs`,
						},
						"key_alias": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key alias name.`,
						},
						"key_algorithm": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key generation algorithm.`,
						},
						"key_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key type.`,
						},
						"key_usage": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key usage.`,
						},
						"key_state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key current status.`,
						},
						"key_description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key description.`,
						},
						"default_key_flag": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The master key identifier.`,
						},
						"origin": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key source.`,
						},
						"key_rotation_enabled": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The key rotation status.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID to which the key belongs.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creatiom time of the key.`,
						},
						"expiration_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The expiration time of the key.`,
						},
						"scheduled_deletion_date": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The scheduled deletion time of the key.`,
						},
					},
				},
			},
		},
	}
}

func dataSourceKmsKeysRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	var (
		cfg             = meta.(*config.Config)
		region          = cfg.GetRegion(d)
		listKeysHttpUrl = "v1.0/{project_id}/kms/list-keys"
		listKeysProduct = "kms"
	)
	listKeysClient, err := cfg.NewServiceClient(listKeysProduct, region)
	if err != nil {
		return diag.Errorf("error creating KMS client: %s", err)
	}

	listKeysPath := listKeysClient.Endpoint + listKeysHttpUrl
	listKeysPath = strings.ReplaceAll(listKeysPath, "{project_id}", listKeysClient.ProjectID)

	listKeysOpt := golangsdk.RequestOpts{
		KeepResponseBody: true,
	}

	var nextMarker string
	allKeys := make([]interface{}, 0)

	listKeysOpt.JSONBody = utils.RemoveNil(buildlistKeysBody(d, cfg))
	listKeysJSONBody := listKeysOpt.JSONBody.(map[string]interface{})

	for {
		listKeysResp, err := listKeysClient.Request("POST", listKeysPath, &listKeysOpt)
		if err != nil {
			return diag.Errorf("error retrieving keys: %s", err)
		}
		listKeysRespBody, err := utils.FlattenResponse(listKeysResp)
		if err != nil {
			return diag.FromErr(err)
		}

		keys := utils.PathSearch("key_details", listKeysRespBody, make([]interface{}, 0)).([]interface{})
		allKeys = append(allKeys, keys...)

		nextMarker = utils.PathSearch("next_marker", listKeysRespBody, "").(string)
		if nextMarker == "" {
			break
		}
		listKeysJSONBody["marker"] = nextMarker
	}

	uuId, err := uuid.GenerateUUID()
	if err != nil {
		return diag.Errorf("unable to generate ID: %s", err)
	}
	d.SetId(uuId)

	mErr := multierror.Append(nil,
		d.Set("region", region),
		d.Set("keys", flattenListKeysResponseBody(allKeys)),
	)

	return diag.FromErr(mErr.ErrorOrNil())
}

func buildlistKeysBody(d *schema.ResourceData, _ *config.Config) map[string]interface{} {
	bodyParams := map[string]interface{}{
		"key_state":             utils.ValueIgnoreEmpty(d.Get("key_state")),
		"key_spec":              utils.ValueIgnoreEmpty(d.Get("key_algorithm")),
		"enterprise_project_id": utils.ValueIgnoreEmpty(d.Get("enterprise_project_id")),
		"limit":                 2000,
	}
	return bodyParams
}

func flattenListKeysResponseBody(resp []interface{}) []interface{} {
	if resp == nil {
		return nil
	}

	rst := make([]interface{}, 0, len(resp))
	for _, v := range resp {
		rst = append(rst, map[string]interface{}{
			"id":                    utils.PathSearch("key_id", v, nil),
			"keystore_id":           utils.PathSearch("keystore_id", v, nil),
			"key_alias":             utils.PathSearch("key_alias", v, nil),
			"key_algorithm":         utils.PathSearch("key_spec", v, nil),
			"key_type":              utils.PathSearch("key_type", v, nil),
			"key_usage":             utils.PathSearch("key_usage", v, nil),
			"key_state":             utils.PathSearch("key_state", v, nil),
			"key_description":       utils.PathSearch("key_description", v, nil),
			"default_key_flag":      utils.PathSearch("default_key_flag", v, nil),
			"origin":                utils.PathSearch("origin", v, nil),
			"key_rotation_enabled":  utils.PathSearch("key_rotation_enabled", v, nil),
			"enterprise_project_id": utils.PathSearch("sys_enterprise_project_id", v, nil),
			"created_at":            utils.FormatTimeStampRFC3339(convertStrToInt(utils.PathSearch("creation_date", v, "").(string))/1000, false),
			"expiration_time":       utils.FormatTimeStampRFC3339(convertStrToInt(utils.PathSearch("expiration_time", v, "").(string))/1000, false),
			"scheduled_deletion_date": utils.FormatTimeStampRFC3339(convertStrToInt(
				utils.PathSearch("scheduled_deletion_date", v, "").(string))/1000, false),
		})
	}
	return rst
}
