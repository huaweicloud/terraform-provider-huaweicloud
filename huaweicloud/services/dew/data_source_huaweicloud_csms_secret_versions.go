// Generated by PMS #301
package dew

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDewCsmsSecretVersions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDewCsmsSecretVersionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"secret_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the secret name to which the versions belong.`,
			},
			"versions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the versions.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the secret version.`,
						},
						"kms_key_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the KMS key associated the secret.`,
						},
						"secret_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The secret name to which the version belongs.`,
						},
						"version_stages": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The secret version status list.`,
						},
						"expire_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The expiration time of the secret version, in RFC3339 format.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the secret version, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type CsmsSecretVersionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCsmsSecretVersionsDSWrapper(d *schema.ResourceData, meta interface{}) *CsmsSecretVersionsDSWrapper {
	return &CsmsSecretVersionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDewCsmsSecretVersionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCsmsSecretVersionsDSWrapper(d, meta)
	lisSecVerRst, err := wrapper.ListSecretVersions()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSecretVersionsToSchema(lisSecVerRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSMS GET /v1/{project_id}/secrets/{secret_name}/versions
func (w *CsmsSecretVersionsDSWrapper) ListSecretVersions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "kms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/secrets/{secret_name}/versions"
	uri = strings.ReplaceAll(uri, "{secret_name}", w.Get("secret_name").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		MarkerPager("version_metadatas", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *CsmsSecretVersionsDSWrapper) listSecretVersionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("versions", schemas.SliceToList(body.Get("version_metadatas"),
			func(versions gjson.Result) any {
				return map[string]any{
					"id":             versions.Get("id").Value(),
					"kms_key_id":     versions.Get("kms_key_id").Value(),
					"secret_name":    versions.Get("secret_name").Value(),
					"version_stages": schemas.SliceToStrList(versions.Get("version_stages")),
					"expire_time":    w.setVerMetExpTime(versions),
					"created_at":     w.setVerMetCreTime(versions),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*CsmsSecretVersionsDSWrapper) setVerMetExpTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("expire_time").Int()/1000, false)
}

func (*CsmsSecretVersionsDSWrapper) setVerMetCreTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("create_time").Int()/1000, false)
}
