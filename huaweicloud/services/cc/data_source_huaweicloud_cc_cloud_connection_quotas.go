// Generated by PMS #931
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcCloudConnectionQuotas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcCloudConnectionQuotasRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"quota_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the quota type.`,
			},
			"cloud_connection_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud connection ID.`,
			},
			"region_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region ID.`,
			},
			"quotas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the quota list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cloud_connection_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the cloud connection ID.`,
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region ID.`,
						},
						"quota_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the quota type.`,
						},
						"quota_number": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the total quotas.`,
						},
						"quota_used": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the used quotas.`,
						},
					},
				},
			},
		},
	}
}

type CloudConnectionQuotasDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCloudConnectionQuotasDSWrapper(d *schema.ResourceData, meta interface{}) *CloudConnectionQuotasDSWrapper {
	return &CloudConnectionQuotasDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcCloudConnectionQuotasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCloudConnectionQuotasDSWrapper(d, meta)
	lisCloConQuoRst, err := wrapper.ListCloudConnectionQuotas()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCloudConnectionQuotasToSchema(lisCloConQuoRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/quotas
func (w *CloudConnectionQuotasDSWrapper) ListCloudConnectionQuotas() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/quotas"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"quota_type":          w.Get("quota_type"),
		"cloud_connection_id": w.Get("cloud_connection_id"),
		"region_id":           w.Get("region_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *CloudConnectionQuotasDSWrapper) listCloudConnectionQuotasToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("quotas", schemas.SliceToList(body.Get("quotas"),
			func(quotas gjson.Result) any {
				return map[string]any{
					"cloud_connection_id": quotas.Get("cloud_connection_id").Value(),
					"region_id":           quotas.Get("region_id").Value(),
					"quota_type":          quotas.Get("quota_type").Value(),
					"quota_number":        quotas.Get("quota_number").Value(),
					"quota_used":          quotas.Get("quota_used").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
