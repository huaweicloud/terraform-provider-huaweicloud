// Generated by PMS #932
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCcSupportedAreas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcSupportedAreasRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"areas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the geographic region list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the geographic region ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the geographic region name.`,
						},
						"en_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the geographic region name in English.`,
						},
						"es_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the geographic region name in Spanish.`,
						},
						"pt_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the geographic region name in Portuguese.`,
						},
						"station": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the site.`,
						},
					},
				},
			},
		},
	}
}

type SupportedAreasDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSupportedAreasDSWrapper(d *schema.ResourceData, meta interface{}) *SupportedAreasDSWrapper {
	return &SupportedAreasDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcSupportedAreasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSupportedAreasDSWrapper(d, meta)
	listAreasRst, err := wrapper.ListAreas()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAreasToSchema(listAreasRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/areas
func (w *SupportedAreasDSWrapper) ListAreas() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/areas"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SupportedAreasDSWrapper) listAreasToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("areas", schemas.SliceToList(body.Get("areas"),
			func(areas gjson.Result) any {
				return map[string]any{
					"id":      areas.Get("id").Value(),
					"name":    areas.Get("name").Value(),
					"en_name": areas.Get("en_name").Value(),
					"es_name": areas.Get("es_name").Value(),
					"pt_name": areas.Get("pt_name").Value(),
					"station": areas.Get("station").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
