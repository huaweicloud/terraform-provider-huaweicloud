// Generated by PMS #428
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcCentralNetworkQuotas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcCentralNetworkQuotasRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"quota_type": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the quota type.`,
			},
			"quotas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The quota list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"quota_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network quota type.`,
						},
						"quota_limit": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The quota size.`,
						},
						"used": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The used quotas.`,
						},
						"unit": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The unit of the quota value.`,
						},
					},
				},
			},
		},
	}
}

type CentralNetworkQuotasDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCentralNetworkQuotasDSWrapper(d *schema.ResourceData, meta interface{}) *CentralNetworkQuotasDSWrapper {
	return &CentralNetworkQuotasDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcCentralNetworkQuotasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCentralNetworkQuotasDSWrapper(d, meta)
	lisCenNetQuoRst, err := wrapper.ListCentralNetworkQuotas()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCentralNetworkQuotasToSchema(lisCenNetQuoRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/gcn/quotas
func (w *CentralNetworkQuotasDSWrapper) ListCentralNetworkQuotas() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/gcn/quotas"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"quota_type": w.ListToArray("quota_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *CentralNetworkQuotasDSWrapper) listCentralNetworkQuotasToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("quotas", schemas.SliceToList(body.Get("quotas"),
			func(quotas gjson.Result) any {
				return map[string]any{
					"quota_key":   quotas.Get("quota_key").Value(),
					"quota_limit": quotas.Get("quota_limit").Value(),
					"used":        quotas.Get("used").Value(),
					"unit":        quotas.Get("unit").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
