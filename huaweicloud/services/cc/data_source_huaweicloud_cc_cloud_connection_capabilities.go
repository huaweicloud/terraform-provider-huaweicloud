// Generated by PMS #919
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcCloudConnectionCapabilities() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcCloudConnectionCapabilitiesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"resource_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource type.`,
			},
			"capabilities": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the cloud connection capabilities list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource description.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the resource was created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the resource was updated.`,
						},
						"resource_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource type.`,
						},
						"bandwidth": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the bandwidth.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"min": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the minimum bandwidth.`,
									},
									"max": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the maximum bandwidth.`,
									},
								},
							},
						},
						"support_regions": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the list of regions available to a tenant.`,
						},
					},
				},
			},
		},
	}
}

type CloudConnectionCapabilitiesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCloudConnectionCapabilitiesDSWrapper(d *schema.ResourceData, meta interface{}) *CloudConnectionCapabilitiesDSWrapper {
	return &CloudConnectionCapabilitiesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcCloudConnectionCapabilitiesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCloudConnectionCapabilitiesDSWrapper(d, meta)
	lisCloConCapRst, err := wrapper.ListCloudConnectionCapabilities()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCloudConnectionCapabilitiesToSchema(lisCloConCapRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/capabilities
func (w *CloudConnectionCapabilitiesDSWrapper) ListCloudConnectionCapabilities() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/capabilities"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"resource_type": w.Get("resource_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *CloudConnectionCapabilitiesDSWrapper) listCloudConnectionCapabilitiesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("capabilities", schemas.SliceToList(body.Get("capabilities"),
			func(capabilities gjson.Result) any {
				return map[string]any{
					"id":            capabilities.Get("id").Value(),
					"description":   capabilities.Get("description").Value(),
					"created_at":    capabilities.Get("created_at").Value(),
					"updated_at":    capabilities.Get("updated_at").Value(),
					"resource_type": capabilities.Get("resource_type").Value(),
					"bandwidth": schemas.SliceToList(capabilities.Get("bandwidth"),
						func(bandwidth gjson.Result) any {
							return map[string]any{
								"min": bandwidth.Get("min").Value(),
								"max": bandwidth.Get("max").Value(),
							}
						},
					),
					"support_regions": schemas.SliceToStrList(capabilities.Get("support_regions")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
