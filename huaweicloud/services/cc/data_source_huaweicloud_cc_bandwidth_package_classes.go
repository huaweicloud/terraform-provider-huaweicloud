// Generated by PMS #920
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCcBandwidthPackageClasses() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcBandwidthPackageClassesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"bandwidth_package_levels": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of bandwidth package classes.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the bandwidth package class.`,
						},
						"name_cn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance Chinese name.`,
						},
						"name_en": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance English name.`,
						},
						"display_priority": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the priority of the bandwidth package. A smaller value indicates a higher priority.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time.`,
						},
					},
				},
			},
		},
	}
}

type BandwidthPackageClassesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newBandwidthPackageClassesDSWrapper(d *schema.ResourceData, meta interface{}) *BandwidthPackageClassesDSWrapper {
	return &BandwidthPackageClassesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcBandwidthPackageClassesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newBandwidthPackageClassesDSWrapper(d, meta)
	lisBanPacLevRst, err := wrapper.ListBandwidthPackageLevels()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listBandwidthPackageLevelsToSchema(lisBanPacLevRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/bandwidth-packages/levels
func (w *BandwidthPackageClassesDSWrapper) ListBandwidthPackageLevels() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/bandwidth-packages/levels"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *BandwidthPackageClassesDSWrapper) listBandwidthPackageLevelsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("bandwidth_package_levels", schemas.SliceToList(body.Get("bandwidth_package_levels"),
			func(banPacLevels gjson.Result) any {
				return map[string]any{
					"id":               banPacLevels.Get("id").Value(),
					"level":            banPacLevels.Get("level").Value(),
					"name_cn":          banPacLevels.Get("name_cn").Value(),
					"name_en":          banPacLevels.Get("name_en").Value(),
					"display_priority": banPacLevels.Get("display_priority").Value(),
					"description":      banPacLevels.Get("description").Value(),
					"created_at":       banPacLevels.Get("created_at").Value(),
					"updated_at":       banPacLevels.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
