// Generated by PMS #922
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcBandwidthPackageSites() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcBandwidthPackageSitesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"site_code": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the site code.`,
			},
			"region_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name used for fuzzy search.`,
			},
			"bandwidth_package_sites": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the site list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"site_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the site code.`,
						},
						"site_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the site type. The default type is **region**.`,
						},
						"name_cn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance Chinese name.`,
						},
						"name_en": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the  instance English name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description.`,
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region ID.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time.`,
						},
					},
				},
			},
		},
	}
}

type BandwidthPackageSitesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newBandwidthPackageSitesDSWrapper(d *schema.ResourceData, meta interface{}) *BandwidthPackageSitesDSWrapper {
	return &BandwidthPackageSitesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcBandwidthPackageSitesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newBandwidthPackageSitesDSWrapper(d, meta)
	lisBanPacSitRst, err := wrapper.ListBandwidthPackageSites()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listBandwidthPackageSitesToSchema(lisBanPacSitRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/bandwidth-packages/sites
func (w *BandwidthPackageSitesDSWrapper) ListBandwidthPackageSites() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/bandwidth-packages/sites"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"site_code": w.Get("site_code"),
		"region_id": w.Get("region_id"),
		"name":      w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *BandwidthPackageSitesDSWrapper) listBandwidthPackageSitesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("bandwidth_package_sites", schemas.SliceToList(body.Get("bandwidth_package_sites"),
			func(banPacSites gjson.Result) any {
				return map[string]any{
					"id":          banPacSites.Get("id").Value(),
					"site_code":   banPacSites.Get("site_code").Value(),
					"site_type":   banPacSites.Get("site_type").Value(),
					"name_cn":     banPacSites.Get("name_cn").Value(),
					"name_en":     banPacSites.Get("name_en").Value(),
					"description": banPacSites.Get("description").Value(),
					"region_id":   banPacSites.Get("region_id").Value(),
					"created_at":  banPacSites.Get("created_at").Value(),
					"updated_at":  banPacSites.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
