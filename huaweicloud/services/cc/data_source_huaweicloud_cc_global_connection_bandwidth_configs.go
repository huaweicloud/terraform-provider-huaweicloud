// Generated by PMS #928
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCcGlobalConnectionBandwidthConfigs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcGlobalConnectionBandwidthConfigsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"configs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the dynamic configuration items for purchasing a global connection bandwidth.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"bind_limit": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the maximum number of instances that are allowed to use a shared bandwidth.`,
						},
						"enable_change_95": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether standard 95th percentile bandwidth billing can be changed to billing by`,
						},
						"size_range": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the capacity of global connection bandwidths by billing option.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the billing option of a global connection bandwidth.`,
									},
									"min": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the minimum global connection bandwidth, in Mbit/s.`,
									},
									"max": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the maximum global connection bandwidth, in Mbit/s.`,
									},
								},
							},
						},
						"services": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the instance type.`,
						},
						"gcb_type": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the bandwidth type.`,
						},
						"ratio_95peak_plus": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the percentage of the minimum bandwidth in enhanced 95th percentile bandwidth billing.`,
						},
						"ratio_95peak_guar": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the percentage of the minimum bandwidth in standard 95th percentile bandwidth billing.`,
						},
						"sla_level": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the line grade.`,
						},
						"enable_spec_code": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether multiple line specifications are supported.`,
						},
						"charge_mode": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the list of supported billing options.`,
						},
						"crossborder": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether a cross-border permit is approved.`,
						},
						"quotas": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the quota information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"quota": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the quotas.`,
									},
									"used": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the used quotas.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the quota type.`,
									},
								},
							},
						},
						"enable_area_bandwidth": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether to enable the geographic region bandwidth.`,
						},
					},
				},
			},
		},
	}
}

type GlobalConnectionBandwidthConfigsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newGlobalConnectionBandwidthConfigsDSWrapper(d *schema.ResourceData, meta interface{}) *GlobalConnectionBandwidthConfigsDSWrapper {
	return &GlobalConnectionBandwidthConfigsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcGlobalConnectionBandwidthConfigsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newGlobalConnectionBandwidthConfigsDSWrapper(d, meta)
	lisGloConBanConRst, err := wrapper.ListGlobalConnectionBandwidthConfigs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listGlobalConnectionBandwidthConfigsToSchema(lisGloConBanConRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/gcb/configs
func (w *GlobalConnectionBandwidthConfigsDSWrapper) ListGlobalConnectionBandwidthConfigs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/gcb/configs"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *GlobalConnectionBandwidthConfigsDSWrapper) listGlobalConnectionBandwidthConfigsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("configs", schemas.ObjectToList(body.Get("configs"),
			func(configs gjson.Result) any {
				return map[string]any{
					"bind_limit":       configs.Get("bind_limit").Value(),
					"enable_change_95": configs.Get("enable_change_95").Value(),
					"size_range": schemas.SliceToList(configs.Get("size_range"),
						func(sizeRange gjson.Result) any {
							return map[string]any{
								"type": sizeRange.Get("type").Value(),
								"min":  sizeRange.Get("min").Value(),
								"max":  sizeRange.Get("max").Value(),
							}
						},
					),
					"services":          schemas.SliceToStrList(configs.Get("services")),
					"gcb_type":          schemas.SliceToStrList(configs.Get("gcb_type")),
					"ratio_95peak_plus": configs.Get("ratio_95peak_plus").Value(),
					"ratio_95peak_guar": configs.Get("ratio_95peak_guar").Value(),
					"sla_level":         schemas.SliceToStrList(configs.Get("sla_level")),
					"enable_spec_code":  configs.Get("enable_spec_code").Value(),
					"charge_mode":       schemas.SliceToStrList(configs.Get("charge_mode")),
					"crossborder":       configs.Get("crossborder").Value(),
					"quotas": schemas.SliceToList(configs.Get("quotas"),
						func(quotas gjson.Result) any {
							return map[string]any{
								"quota": quotas.Get("quota").Value(),
								"used":  quotas.Get("used").Value(),
								"type":  quotas.Get("type").Value(),
							}
						},
					),
					"enable_area_bandwidth": configs.Get("enable_area_bandwidth").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
