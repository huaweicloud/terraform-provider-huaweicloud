// Generated by PMS #930
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcAcrossAreaBandwidthPackageFlavors() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcAcrossAreaBandwidthPackageFlavorsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"local_area_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the IDs of a geographic region for querying the list of bandwidth package`,
			},
			"remote_area_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the IDs of another geographic region for querying the list of bandwidth`,
			},
			"area_specifications": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of bandwidth package specifications in a geographic region.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the bandwidth package specification ID.`,
						},
						"local_area_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the geographic region.`,
						},
						"remote_area_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the geographic region.`,
						},
						"spec_codes": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the bandwidth package specifications.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"spec_code": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the specification code of the bandwidth package.`,
									},
									"billing_mode": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth package billing option.`,
									},
									"max_bandwidth": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the maximum bandwidth.`,
									},
									"mim_bandwidth": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the minimum bandwidth.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type AcrossAreaBandwidthPackageFlavorsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAcrossAreaBandwidthPackageFlavorsDSWrapper(d *schema.ResourceData, meta interface{}) *AcrossAreaBandwidthPackageFlavorsDSWrapper {
	return &AcrossAreaBandwidthPackageFlavorsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcAcrossAreaBandwidthPackageFlavorsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAcrossAreaBandwidthPackageFlavorsDSWrapper(d, meta)
	lisAreBanPacSpeRst, err := wrapper.ListAreaBandwidthPackageSpecifications()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAreaBandwidthPackageSpecificationsToSchema(lisAreBanPacSpeRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/bandwidth-packages/area-specifications
func (w *AcrossAreaBandwidthPackageFlavorsDSWrapper) ListAreaBandwidthPackageSpecifications() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/bandwidth-packages/area-specifications"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"local_area_id":  w.ListToArray("local_area_id"),
		"remote_area_id": w.ListToArray("remote_area_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *AcrossAreaBandwidthPackageFlavorsDSWrapper) listAreaBandwidthPackageSpecificationsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("area_specifications", schemas.SliceToList(body.Get("area_specifications"),
			func(areSpe gjson.Result) any {
				return map[string]any{
					"id":             areSpe.Get("id").Value(),
					"local_area_id":  areSpe.Get("local_area_id").Value(),
					"remote_area_id": areSpe.Get("remote_area_id").Value(),
					"spec_codes": schemas.SliceToList(areSpe.Get("spec_codes"),
						func(specCodes gjson.Result) any {
							return map[string]any{
								"spec_code":     specCodes.Get("spec_code").Value(),
								"billing_mode":  specCodes.Get("billing_mode").Value(),
								"max_bandwidth": specCodes.Get("max_bandwidth").Value(),
								"mim_bandwidth": specCodes.Get("mim_bandwidth").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
