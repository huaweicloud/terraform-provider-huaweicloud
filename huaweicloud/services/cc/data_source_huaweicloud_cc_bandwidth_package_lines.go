// Generated by PMS #921
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCcBandwidthPackageLines() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcBandwidthPackageLinesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"bandwidth_package_lines": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of bandwidth package lines.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"local_region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the local region ID.`,
						},
						"remote_region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the remote region ID.`,
						},
						"local_site_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the local site code.`,
						},
						"remote_site_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the remote site code.`,
						},
						"support_levels": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the list of supported classes.`,
						},
						"spec_codes": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the offering code list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"level": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth package class.`,
									},
									"spec_code": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the specification code of the bandwidth package.`,
									},
									"name_cn": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the Chinese instance name.`,
									},
									"name_en": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the English instance name.`,
									},
									"max_bandwidth": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the maximum bandwidth.`,
									},
									"min_bandwidth": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the minimum bandwidth.`,
									},
									"support_billing_modes": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeInt},
										Description: `Indicates the billing mode.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type BandwidthPackageLinesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newBandwidthPackageLinesDSWrapper(d *schema.ResourceData, meta interface{}) *BandwidthPackageLinesDSWrapper {
	return &BandwidthPackageLinesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcBandwidthPackageLinesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newBandwidthPackageLinesDSWrapper(d, meta)
	lisBanPacLinRst, err := wrapper.ListBandwidthPackageLines()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listBandwidthPackageLinesToSchema(lisBanPacLinRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/bandwidth-packages/lines
func (w *BandwidthPackageLinesDSWrapper) ListBandwidthPackageLines() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/bandwidth-packages/lines"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *BandwidthPackageLinesDSWrapper) listBandwidthPackageLinesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("bandwidth_package_lines", schemas.SliceToList(body.Get("bandwidth_package_lines"),
			func(banPacLines gjson.Result) any {
				return map[string]any{
					"local_region_id":  banPacLines.Get("local_region_id").Value(),
					"remote_region_id": banPacLines.Get("remote_region_id").Value(),
					"local_site_code":  banPacLines.Get("local_site_code").Value(),
					"remote_site_code": banPacLines.Get("remote_site_code").Value(),
					"support_levels":   schemas.SliceToStrList(banPacLines.Get("support_levels")),
					"spec_codes": schemas.SliceToList(banPacLines.Get("spec_codes"),
						func(specCodes gjson.Result) any {
							return map[string]any{
								"level":                 specCodes.Get("level").Value(),
								"spec_code":             specCodes.Get("spec_code").Value(),
								"name_cn":               specCodes.Get("name_cn").Value(),
								"name_en":               specCodes.Get("name_en").Value(),
								"max_bandwidth":         specCodes.Get("max_bandwidth").Value(),
								"min_bandwidth":         specCodes.Get("min_bandwidth").Value(),
								"support_billing_modes": schemas.SliceToIntList(specCodes.Get("support_billing_modes")),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
