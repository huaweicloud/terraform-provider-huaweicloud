// Generated by PMS #917
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcSiteNetworkCapabilities() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcSiteNetworkCapabilitiesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"specification": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the site network capabilities. Multiple capabilities can be queried.`,
			},
			"capabilities": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of site network capabilities.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"specification": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the site network capabilities.`,
						},
						"is_support_enterprise_project": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether enterprise projects are supported for site networks.`,
						},
						"is_support_tag": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether site network tagging is supported.`,
						},
						"is_support_intra_region": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether site networks in the same region can be created.`,
						},
						"is_support": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether site networks are supported.`,
						},
						"support_locations": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the support locations list of a site network.`,
						},
						"support_regions": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the region list of a site network.`,
						},
						"support_freeze_regions": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the freeze regions list of a site network.`,
						},
						"support_topologies": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the topology list of a site network.`,
						},
						"support_dscp_regions": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the dscp regions list of a site network.`,
						},
						"charge_mode": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the charge mode list of a site network.`,
						},
						"size_range": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the size_range.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"min": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the minimum value.`,
									},
									"max": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the maximum value.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type SiteNetworkCapabilitiesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSiteNetworkCapabilitiesDSWrapper(d *schema.ResourceData, meta interface{}) *SiteNetworkCapabilitiesDSWrapper {
	return &SiteNetworkCapabilitiesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcSiteNetworkCapabilitiesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSiteNetworkCapabilitiesDSWrapper(d, meta)
	lisSitNetCapRst, err := wrapper.ListSiteNetworkCapabilities()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listSiteNetworkCapabilitiesToSchema(lisSitNetCapRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API CC GET /v3/{domain_id}/dcaas/site-network/capabilities
func (w *SiteNetworkCapabilitiesDSWrapper) ListSiteNetworkCapabilities() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/dcaas/site-network/capabilities"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"specification": w.ListToArray("specification"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("capabilities", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *SiteNetworkCapabilitiesDSWrapper) listSiteNetworkCapabilitiesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("capabilities", schemas.SliceToList(body.Get("capabilities"),
			func(capabilities gjson.Result) any {
				return map[string]any{
					"id":                            capabilities.Get("id").Value(),
					"specification":                 capabilities.Get("specification").Value(),
					"is_support_enterprise_project": capabilities.Get("is_support_enterprise_project").Value(),
					"is_support_tag":                capabilities.Get("is_support_tag").Value(),
					"is_support_intra_region":       capabilities.Get("is_support_intra_region").Value(),
					"is_support":                    capabilities.Get("is_support").Value(),
					"support_locations":             schemas.SliceToStrList(capabilities.Get("support_locations")),
					"support_regions":               schemas.SliceToStrList(capabilities.Get("support_regions")),
					"support_freeze_regions":        schemas.SliceToStrList(capabilities.Get("support_freeze_regions")),
					"support_topologies":            schemas.SliceToStrList(capabilities.Get("support_topologies")),
					"support_dscp_regions":          schemas.SliceToStrList(capabilities.Get("support_dscp_regions")),
					"charge_mode":                   schemas.SliceToStrList(capabilities.Get("charge_mode")),
					"size_range": schemas.SliceToList(capabilities.Get("size_range"),
						func(sizeRange gjson.Result) any {
							return map[string]any{
								"min": sizeRange.Get("min").Value(),
								"max": sizeRange.Get("max").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
