// Generated by PMS #488
package identitycenter

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

// @API IdentityCenter GET /v1/instances/{instance_id}/account-assignments-for-principals
func DataSourceIdentityCenterAccountAssignments() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceIdentityCenterAccountAssignmentsForPrincipalRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of an IAM Identity Center instance.`,
			},
			"principal_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"principal_type": {
				Type:     schema.TypeString,
				Required: true,
			},
			"account_assignments": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"account_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"permission_set_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"principal_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"principal_type": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
		},
	}
}

type AccountAssignmentsForPrincipalDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAccountAssignmentsForPrincipalDSWrapper(d *schema.ResourceData, meta interface{}) *AccountAssignmentsForPrincipalDSWrapper {
	return &AccountAssignmentsForPrincipalDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceIdentityCenterAccountAssignmentsForPrincipalRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAccountAssignmentsForPrincipalDSWrapper(d, meta)
	assignments, err := wrapper.listAccountAssignmentsForPrincipal()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAccountAssignmentsForPrincipalToSchema(assignments)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func (w *AccountAssignmentsForPrincipalDSWrapper) listAccountAssignmentsForPrincipal() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "identitycenter")
	if err != nil {
		return nil, err
	}

	uri := "/v1/instances/{instance_id}/account-assignments-for-principals"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"principal_id":   w.Get("principal_id").(string),
		"principal_type": w.Get("principal_type").(string),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("account_assignments", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *AccountAssignmentsForPrincipalDSWrapper) listAccountAssignmentsForPrincipalToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("account_assignments", schemas.SliceToList(body.Get("account_assignments"),
			func(assignments gjson.Result) any {
				return map[string]any{
					"account_id":        assignments.Get("account_id").Value(),
					"principal_id":      assignments.Get("principal_id").Value(),
					"principal_type":    assignments.Get("principal_type").Value(),
					"permission_set_id": assignments.Get("permission_set_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
