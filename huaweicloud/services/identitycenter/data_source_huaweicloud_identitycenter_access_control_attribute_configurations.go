// Generated by PMS #476
package identitycenter

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceAccessControlAttributeConfigurations() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceIdentitycenterAccessControlAttributeConfigurationsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the IAM Identity Center instance.`,
			},
			"access_control_attributes": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The attributes configured for ABAC in the IAM Identity Center instance.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"value": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The value mapped to identity source from the specified attribute.`,
						},
						"key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the attribute associated with the identity in the identity source.`,
						},
					},
				},
			},
		},
	}
}

type AccessControlAttributeConfigurationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAccessControlAttributeConfigurationsDSWrapper(d *schema.ResourceData, meta interface{}) *AccessControlAttributeConfigurationsDSWrapper {
	return &AccessControlAttributeConfigurationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceIdentitycenterAccessControlAttributeConfigurationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAccessControlAttributeConfigurationsDSWrapper(d, meta)
	diacacr, err := wrapper.DescribeInstanceAccessControlAttributeConfiguration()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.describeInstanceAccessControlAttributeConfigurationToSchema(diacacr)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API IDENTITYCENTER GET /v1/instances/{instance_id}/access-control-attribute-configuration
func (w *AccessControlAttributeConfigurationsDSWrapper) DescribeInstanceAccessControlAttributeConfiguration() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "identitycenter")
	if err != nil {
		return nil, err
	}

	uri := "/v1/instances/{instance_id}/access-control-attribute-configuration"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *AccessControlAttributeConfigurationsDSWrapper) describeInstanceAccessControlAttributeConfigurationToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("access_control_attributes", schemas.SliceToList(body.Get("instance_access_control_attribute_configuration.access_control_attributes"),
			func(accConAtt gjson.Result) any {
				return map[string]any{
					"value": schemas.SliceToStrList(accConAtt.Get("value.source")),
					"key":   accConAtt.Get("key").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
