// Generated by PMS #484
package identitycenter

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceIdentitycenterPermissionSets() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceIdentitycenterPermissionSetsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of an IAM Identity Center instance.`,
			},
			"permission_set_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of a permission set.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of a permission set.`,
			},
			"permission_sets": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The permission set list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of a permission set.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of a permission set.`,
						},
						"permission_set_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a permission set.`,
						},
						"relay_state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The redirection of users within an application during the federated authentication.`,
						},
						"session_duration": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The length of time that the application user sessions are valid.`,
						},
						"permission_urn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The URN of a permission set.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a permission set is created.`,
						},
					},
				},
			},
		},
	}
}

type PermissionSetsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPermissionSetsDSWrapper(d *schema.ResourceData, meta interface{}) *PermissionSetsDSWrapper {
	return &PermissionSetsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceIdentitycenterPermissionSetsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPermissionSetsDSWrapper(d, meta)
	lisPerSetRst, err := wrapper.ListPermissionSets()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPermissionSetsToSchema(lisPerSetRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API IDENTITYCENTER GET /v1/instances/{instance_id}/permission-sets
func (w *PermissionSetsDSWrapper) ListPermissionSets() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "identitycenter")
	if err != nil {
		return nil, err
	}

	uri := "/v1/instances/{instance_id}/permission-sets"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"permission_set_id": w.Get("permission_set_id"),
		"name":              w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("permission_sets", " page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *PermissionSetsDSWrapper) listPermissionSetsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("permission_sets", schemas.SliceToList(body.Get("permission_sets"),
			func(permissionSets gjson.Result) any {
				return map[string]any{
					"description":       permissionSets.Get("description").Value(),
					"name":              permissionSets.Get("name").Value(),
					"permission_set_id": permissionSets.Get("permission_set_id").Value(),
					"relay_state":       permissionSets.Get("relay_state").Value(),
					"session_duration":  permissionSets.Get("session_duration").Value(),
					"permission_urn":    permissionSets.Get("permission_urn").Value(),
					"created_at":        w.setPerSetCreDate(permissionSets),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*PermissionSetsDSWrapper) setPerSetCreDate(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("created_date").Int())/1000, true)
}
