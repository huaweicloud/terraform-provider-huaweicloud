// Generated by PMS #485
package identitycenter

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceIdentitycenterPermissionSetProvisionings() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceIdentitycenterPermissionSetProvisioningsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of an IAM Identity Center instance.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the permission set provisioning process.`,
			},
			"provisionings": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The authorization status of a permission set.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The date when a permission set was created.`,
						},
						"request_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The unique ID of a request.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The authorization status of a permission set.`,
						},
					},
				},
			},
		},
	}
}

type PermissionSetProvisioningsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPermissionSetProvisioningsDSWrapper(d *schema.ResourceData, meta interface{}) *PermissionSetProvisioningsDSWrapper {
	return &PermissionSetProvisioningsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceIdentitycenterPermissionSetProvisioningsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPermissionSetProvisioningsDSWrapper(d, meta)
	lisPerSetProStaRst, err := wrapper.ListPermissionSetProvisioningStatus()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPermissionSetProvisioningStatusToSchema(lisPerSetProStaRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API IDENTITYCENTER GET /v1/instances/{instance_id}/permission-sets/provisioning-statuses
func (w *PermissionSetProvisioningsDSWrapper) ListPermissionSetProvisioningStatus() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "identitycenter")
	if err != nil {
		return nil, err
	}

	uri := "/v1/instances/{instance_id}/permission-sets/provisioning-statuses"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"status": w.Get("status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("permission_sets_provisioning_status", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *PermissionSetProvisioningsDSWrapper) listPermissionSetProvisioningStatusToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("provisionings", schemas.SliceToList(body.Get("permission_sets_provisioning_status"),
			func(provisionings gjson.Result) any {
				return map[string]any{
					"created_at": w.setPerSetProStaCreDate(provisionings),
					"request_id": provisionings.Get("request_id").Value(),
					"status":     provisionings.Get("status").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*PermissionSetProvisioningsDSWrapper) setPerSetProStaCreDate(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("created_date").Int())/1000, false)
}
