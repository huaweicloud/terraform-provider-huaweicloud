// Generated by PMS #609
package lts

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceHosts() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceHostsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"host_id_list": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `The list of the host IDs.`,
			},
			"filter": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: `The filtering parameter to query hosts.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host_name_list": {
							Type:        schema.TypeList,
							Optional:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The list of the host names.`,
						},
						"host_ip_list": {
							Type:        schema.TypeList,
							Optional:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The list of the host IPs.`,
						},
						"host_status": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The status of the host.`,
						},
						"host_version": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The version of the host.`,
						},
					},
				},
			},
			"hosts": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All hosts that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the host.`,
						},
						"host_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the host.`,
						},
						"host_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the host.`,
						},
						"host_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The IP of the host.`,
						},
						"host_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The version of the host.`,
						},
						"host_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the host.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the host, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type HostsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newHostsDSWrapper(d *schema.ResourceData, meta interface{}) *HostsDSWrapper {
	return &HostsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceHostsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newHostsDSWrapper(d, meta)
	listHostRst, err := wrapper.ListHost()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listHostToSchema(listHostRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API LTS POST /v3/{project_id}/lts/host-list
func (w *HostsDSWrapper) ListHost() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "lts")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/lts/host-list"
	params := map[string]any{
		"filter": map[string]any{
			"host_ip_list":   w.ListToArray("filter.0.host_ip_list"),
			"host_name_list": w.ListToArray("filter.0.host_name_list"),
			"host_status":    w.Get("filter.0.host_status"),
			"host_version":   w.Get("filter.0.host_version"),
		},
		"host_id_list": w.ListToArray("host_id_list"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("POST").
		URI(uri).
		Body(params).
		Request().
		Result()
}

func (w *HostsDSWrapper) listHostToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("hosts", schemas.SliceToList(body.Get("result"),
			func(hosts gjson.Result) any {
				return map[string]any{
					"host_id":      hosts.Get("host_id").Value(),
					"host_name":    hosts.Get("host_name").Value(),
					"host_type":    hosts.Get("host_type").Value(),
					"host_ip":      hosts.Get("host_ip").Value(),
					"host_version": hosts.Get("host_version").Value(),
					"host_status":  hosts.Get("host_status").Value(),
					"updated_at":   w.setResultUpdateTime(hosts),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*HostsDSWrapper) setResultUpdateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("update_time").Int()/1000, false)
}
