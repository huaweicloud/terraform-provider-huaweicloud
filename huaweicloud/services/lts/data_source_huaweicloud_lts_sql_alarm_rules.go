// Generated by PMS #654
package lts

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSqlAlarmRules() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSqlAlarmRulesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"sql_alarm_rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the SQL alarm rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the SQL alarm rule.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the SQL alarm rule.`,
						},
						"sql_requests": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The request list of the SQL alarm rule.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"title": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The title of the SQL request.`,
									},
									"sql": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The SQL statement.`,
									},
									"log_stream_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of the log stream.`,
									},
									"log_stream_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the log stream.`,
									},
									"log_group_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of the log group.`,
									},
									"log_group_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the log group.`,
									},
									"search_time_range": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The search time range.`,
									},
									"search_time_range_unit": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The unit of search time range.`,
									},
									"is_time_range_relative": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `The SQL request is relative to time range.`,
									},
								},
							},
						},
						"frequency": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The alarm frequency configuration list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The type of the frequency.`,
									},
									"cron_expression": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The cron expression.`,
									},
									"hour_of_day": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The hour of day.`,
									},
									"day_of_week": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The day of week.`,
									},
									"fixed_rate_unit": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The unit of custom interval for querying alarm.`,
									},
									"fixed_rate": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The times of custom interval for querying alarm.`,
									},
								},
							},
						},
						"condition_expression": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The condition expression.`,
						},
						"alarm_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The level of the alarm.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the SQL alarm rule.`,
						},
						"send_notifications": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to send notification.`,
						},
						"alarm_action_rule_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the alarm action rule associated with the SQL alarm rule.`,
						},
						"trigger_condition_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The count to trigger the alarm.`,
						},
						"trigger_condition_frequency": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The frequency to trigger the alarm.`,
						},
						"send_recovery_notifications": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to send recovery notification.`,
						},
						"recovery_frequency": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The frequency of recovery the alarm notification.`,
						},
						"notification_frequency": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The notification frequency of the alarm, in minutes.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the domain to which the SQL alarm rule belongs.`,
						},
						"topics": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of the SMN topics associated with the SQL alarm rule.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the topic.`,
									},
									"topic_urn": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The URN of the topic.`,
									},
									"display_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The display name of the topic.`,
									},
									"push_policy": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The push policy of the topic.`,
									},
								},
							},
						},
						"template_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The message template name of the alarm action rule associated with the SQL alarm rule.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the SQL alarm rule.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the SQL alarm rule, in RFC3339 format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update of the SQL alarm rule, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type SqlAlarmRulesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSqlAlarmRulesDSWrapper(d *schema.ResourceData, meta interface{}) *SqlAlarmRulesDSWrapper {
	return &SqlAlarmRulesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSqlAlarmRulesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSqlAlarmRulesDSWrapper(d, meta)
	listSqlAlarmRulesRst, err := wrapper.ListSqlAlarmRules()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSqlAlarmRulesToSchema(listSqlAlarmRulesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API LTS GET /v2/{project_id}/lts/alarms/sql-alarm-rule
func (w *SqlAlarmRulesDSWrapper) ListSqlAlarmRules() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "lts")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/lts/alarms/sql-alarm-rule"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SqlAlarmRulesDSWrapper) listSqlAlarmRulesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("sql_alarm_rules", schemas.SliceToList(body.Get("sql_alarm_rules"),
			func(sqlAlarmRules gjson.Result) any {
				return map[string]any{
					"id":   sqlAlarmRules.Get("sql_alarm_rule_id").Value(),
					"name": sqlAlarmRules.Get("sql_alarm_rule_name").Value(),
					"sql_requests": schemas.SliceToList(sqlAlarmRules.Get("sql_requests"),
						func(sqlRequests gjson.Result) any {
							return map[string]any{
								"title":                  sqlRequests.Get("sql_request_title").Value(),
								"sql":                    sqlRequests.Get("sql").Value(),
								"log_stream_id":          sqlRequests.Get("log_stream_id").Value(),
								"log_stream_name":        sqlRequests.Get("log_stream_name").Value(),
								"log_group_id":           sqlRequests.Get("log_group_id").Value(),
								"log_group_name":         sqlRequests.Get("log_group_name").Value(),
								"search_time_range":      sqlRequests.Get("search_time_range").Value(),
								"search_time_range_unit": sqlRequests.Get("search_time_range_unit").Value(),
								"is_time_range_relative": sqlRequests.Get("is_time_range_relative").Value(),
							}
						},
					),
					"frequency": schemas.SliceToList(sqlAlarmRules.Get("frequency"),
						func(frequency gjson.Result) any {
							return map[string]any{
								"type":            frequency.Get("type").Value(),
								"cron_expression": frequency.Get("cron_expr").Value(),
								"hour_of_day":     frequency.Get("hour_of_day").Value(),
								"day_of_week":     frequency.Get("day_of_week").Value(),
								"fixed_rate_unit": frequency.Get("fixed_rate_unit").Value(),
								"fixed_rate":      frequency.Get("fixed_rate").Value(),
							}
						},
					),
					"condition_expression":        sqlAlarmRules.Get("condition_expression").Value(),
					"alarm_level":                 sqlAlarmRules.Get("sql_alarm_level").Value(),
					"description":                 sqlAlarmRules.Get("sql_alarm_rule_description").Value(),
					"send_notifications":          sqlAlarmRules.Get("sql_alarm_send").Value(),
					"alarm_action_rule_name":      sqlAlarmRules.Get("alarm_action_rule_name").Value(),
					"trigger_condition_count":     sqlAlarmRules.Get("trigger_condition_count").Value(),
					"trigger_condition_frequency": sqlAlarmRules.Get("trigger_condition_frequency").Value(),
					"send_recovery_notifications": sqlAlarmRules.Get("whether_recovery_policy").Value(),
					"recovery_frequency":          sqlAlarmRules.Get("recovery_policy").Value(),
					"notification_frequency":      sqlAlarmRules.Get("notification_frequency").Value(),
					"domain_id":                   sqlAlarmRules.Get("domain_id").Value(),
					"topics": schemas.SliceToList(sqlAlarmRules.Get("topics"),
						func(topics gjson.Result) any {
							return map[string]any{
								"name":         topics.Get("name").Value(),
								"topic_urn":    topics.Get("topic_urn").Value(),
								"display_name": topics.Get("display_name").Value(),
								"push_policy":  topics.Get("push_policy").Value(),
							}
						},
					),
					"template_name": sqlAlarmRules.Get("template_name").Value(),
					"status":        sqlAlarmRules.Get("status").Value(),
					"created_at":    w.setSqlAlaRulCreTime(sqlAlarmRules),
					"updated_at":    w.setSqlAlaRulUpdTime(sqlAlarmRules),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*SqlAlarmRulesDSWrapper) setSqlAlaRulCreTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("create_time").Int()/1000, false)
}

func (*SqlAlarmRulesDSWrapper) setSqlAlaRulUpdTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("update_time").Int()/1000, false)
}
