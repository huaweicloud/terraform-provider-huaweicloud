// Generated by PMS #227
package lts

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceLtsStreams() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceLtsStreamsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the log stream.`,
			},
			"log_group_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the log group.`,
			},
			"streams": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All log streams that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the log stream.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the log stream.`,
						},
						"ttl_in_days": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `the log expiration time (days).`,
						},
						"tags": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The key/value pairs to associate with the log stream.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the log stream, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type StreamsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newStreamsDSWrapper(d *schema.ResourceData, meta interface{}) *StreamsDSWrapper {
	return &StreamsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceLtsStreamsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newStreamsDSWrapper(d, meta)
	listLogStreamsRst, err := wrapper.ListLogStreams()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listLogStreamsToSchema(listLogStreamsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API LTS GET /v2/{project_id}/log-streams
func (w *StreamsDSWrapper) ListLogStreams() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "lts")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/log-streams"
	params := map[string]any{
		"log_group_name":  w.Get("log_group_name"),
		"log_stream_name": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *StreamsDSWrapper) listLogStreamsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("streams", schemas.SliceToList(body.Get("log_streams"),
			func(streams gjson.Result) any {
				return map[string]any{
					"id":          streams.Get("log_stream_id").Value(),
					"name":        streams.Get("log_stream_name").Value(),
					"ttl_in_days": streams.Get("ttl_in_days").Value(),
					"tags":        schemas.MapToStrMap(streams.Get("tag")),
					"created_at":  w.setLogStrCreTime(streams),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*StreamsDSWrapper) setLogStrCreTime(data gjson.Result) string {
	// Convert to the time corresponding to the local time zone of the computer.
	return utils.FormatTimeStampRFC3339(data.Get("creation_time").Int()/1000, false)
}
