// Generated by PMS #595
package as

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceAsv2Policies() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAsv2PoliciesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"scaling_policy_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the AS policy ID.`,
			},
			"scaling_policy_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the AS policy type.`,
			},
			"scaling_policy_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the AS policy name.`,
			},
			"scaling_resource_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the resource associate with the AS policy.`,
			},
			"scaling_resource_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource type associate with the AS policy.`,
			},
			"alarm_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the alarm rule ID associate with the AS policy.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"sort_by": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting method of the AS policies.`,
			},
			"order": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting order of the AS policies.`,
			},
			"scaling_policies": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the AS policies.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"scaling_policy_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The AS policy ID.`,
						},
						"scaling_policy_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The AS policy name.`,
						},
						"policy_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The AS policy status.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The AS policy description.`,
						},
						"scaling_policy_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The AS policy type.`,
						},
						"scaling_resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the resource associate with the AS policy.`,
						},
						"scaling_resource_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The  resource type associate with the AS policy.`,
						},
						"alarm_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alarm rule ID associate with the AS policy.`,
						},
						"scaling_policy_action": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The AS policy execute actions.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"operation": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The operation to be performed.`,
									},
									"size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The operation size.`,
									},
									"percentage": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The percentage of instances to be operated.`,
									},
									"limits": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The operation restrictions.`,
									},
								},
							},
						},
						"scheduled_policy": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The schedule and periodic policy contents.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"launch_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The time when the scaling action is triggered.`,
									},
									"recurrence_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The periodic triggering type.`,
									},
									"recurrence_value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The day when a periodic scaling action is triggered.`,
									},
									"start_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The start time of the scaling action triggered periodically.`,
									},
									"end_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The end time of the scaling action triggered periodically.`,
									},
								},
							},
						},
						"meta_data": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The bandwidth policy additional information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"metadata_bandwidth_share_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The bandwidth sharing type in the bandwidth scaling policy.`,
									},
									"metadata_eip_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The EIP ID for the bandwidth in the bandwidth scaling policy.`,
									},
									"metadata_eip_address": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The EIP IP address for the bandwidth in the bandwidth scaling policy.`,
									},
								},
							},
						},
						"cool_down_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The cooldown period, in seconds.`,
						},
						"create_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the AS policy. in UTC format.`,
						},
					},
				},
			},
		},
	}
}

type v2PoliciesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newv2PoliciesDSWrapper(d *schema.ResourceData, meta interface{}) *v2PoliciesDSWrapper {
	return &v2PoliciesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAsv2PoliciesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newv2PoliciesDSWrapper(d, meta)
	lisAllScaV2PolRst, err := wrapper.ListAllScalingV2Policies()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAllScalingV2PoliciesToSchema(lisAllScaV2PolRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API AS GET /autoscaling-api/v2/{project_id}/scaling_policy
func (w *v2PoliciesDSWrapper) ListAllScalingV2Policies() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "autoscaling")
	if err != nil {
		return nil, err
	}

	uri := "/autoscaling-api/v2/{project_id}/scaling_policy"
	params := map[string]any{
		"scaling_resource_id":   w.Get("scaling_resource_id"),
		"scaling_resource_type": w.Get("scaling_resource_type"),
		"scaling_policy_name":   w.Get("scaling_policy_name"),
		"scaling_policy_type":   w.Get("scaling_policy_type"),
		"scaling_policy_id":     w.Get("scaling_policy_id"),
		"sort_by":               w.Get("sort_by"),
		"order":                 w.Get("order"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"alarm_id":              w.Get("alarm_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("scaling_policies", "start_number", "limit", 100).
		Request().
		Result()
}

func (w *v2PoliciesDSWrapper) listAllScalingV2PoliciesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("scaling_policies", schemas.SliceToList(body.Get("scaling_policies"),
			func(scalingPolicies gjson.Result) any {
				return map[string]any{
					"scaling_policy_id":     scalingPolicies.Get("scaling_policy_id").Value(),
					"scaling_policy_name":   scalingPolicies.Get("scaling_policy_name").Value(),
					"policy_status":         scalingPolicies.Get("policy_status").Value(),
					"description":           scalingPolicies.Get("description").Value(),
					"scaling_policy_type":   scalingPolicies.Get("scaling_policy_type").Value(),
					"scaling_resource_id":   scalingPolicies.Get("scaling_resource_id").Value(),
					"scaling_resource_type": scalingPolicies.Get("scaling_resource_type").Value(),
					"alarm_id":              scalingPolicies.Get("alarm_id").Value(),
					"scaling_policy_action": schemas.SliceToList(scalingPolicies.Get("scaling_policy_action"),
						func(scalingPolicyAction gjson.Result) any {
							return map[string]any{
								"operation":  scalingPolicyAction.Get("operation").Value(),
								"size":       scalingPolicyAction.Get("size").Value(),
								"percentage": scalingPolicyAction.Get("percentage").Value(),
								"limits":     scalingPolicyAction.Get("limits").Value(),
							}
						},
					),
					"scheduled_policy": schemas.SliceToList(scalingPolicies.Get("scheduled_policy"),
						func(scheduledPolicy gjson.Result) any {
							return map[string]any{
								"launch_time":      scheduledPolicy.Get("launch_time").Value(),
								"recurrence_type":  scheduledPolicy.Get("recurrence_type").Value(),
								"recurrence_value": scheduledPolicy.Get("recurrence_value").Value(),
								"start_time":       scheduledPolicy.Get("start_time").Value(),
								"end_time":         scheduledPolicy.Get("end_time").Value(),
							}
						},
					),
					"meta_data": schemas.SliceToList(scalingPolicies.Get("meta_data"),
						func(metaData gjson.Result) any {
							return map[string]any{
								"metadata_bandwidth_share_type": metaData.Get("metadata_bandwidth_share_type").Value(),
								"metadata_eip_id":               metaData.Get("metadata_eip_id").Value(),
								"metadata_eip_address":          metaData.Get("metadata_eip_address").Value(),
							}
						},
					),
					"cool_down_time": scalingPolicies.Get("cool_down_time").Value(),
					"create_time":    scalingPolicies.Get("create_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
