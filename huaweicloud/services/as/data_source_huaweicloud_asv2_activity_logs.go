// Generated by PMS #596
package as

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceAsv2ActivityLogs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAsv2ActivityLogsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"scaling_group_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the AS group ID.`,
			},
			"log_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the scaling action log ID.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the start time that complies with UTC for querying scaling action logs.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the end time that complies with UTC for querying scaling action logs.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the types of the scaling actions to be queried.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the scaling action.`,
			},
			"scaling_activity_log": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The scaling action logs.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The scaling action log ID.`,
						},
						"scaling_value": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of added or deleted instances during the scaling.`,
						},
						"desire_value": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The expected number of instances for the scaling action.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the scaling action.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the scaling action.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the scaling action.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The start time of the scaling action. The time format must comply with UTC.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The end time of the scaling action. The time format must comply with UTC.`,
						},
						"instance_value": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of instances in the AS group.`,
						},
						"instance_removed_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The names of the ECSs that are removed from the AS group in a scaling action.`,
							Elem:        scalingInstanceElem(),
						},
						"instance_standby_list": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `The ECSs that are set to standby mode or for which standby mode is canceled in
a scaling action.`,
							Elem: scalingInstanceElem(),
						},
						"instance_failed_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The ECSs for which a scaling action fails.`,
							Elem:        scalingInstanceElem(),
						},
						"instance_deleted_list": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `The names of the ECSs that are removed from the AS group and deleted in a
scaling action.`,
							Elem: scalingInstanceElem(),
						},
						"instance_added_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The names of the ECSs that are added to the AS group in a scaling action.`,
							Elem:        scalingInstanceElem(),
						},
						"lb_bind_failed_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The load balancers that failed to be bound to the AS group.`,
							Elem:        modifyLbElem(),
						},
						"lb_unbind_failed_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The load balancers that failed to be unbound from the AS group.`,
							Elem:        modifyLbElem(),
						},
						"lb_bind_success_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The load balancers that are bound to the AS group.`,
							Elem:        modifyLbElem(),
						},
						"lb_unbind_success_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The load balancers that are unbound from the AS group.`,
							Elem:        modifyLbElem(),
						},
					},
				},
			},
		},
	}
}

func scalingInstanceElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"instance_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The ECS name.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The ECS ID.`,
			},
			"failed_reason": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The cause of the instance scaling failure.`,
			},
			"failed_details": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The details of the instance scaling failure.`,
			},
			"instance_config": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The information about instance configurations.`,
			},
		},
	}
}

func modifyLbElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"lbaas_listener": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The information about an enhanced load balancer.`,
				Elem:        lbaasListenerElem(),
			},
			"listener": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The information about a classic load balancer.`,
			},
			"failed_reason": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The cause of a load balancer migration failure.`,
			},
			"failed_details": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The details of a load balancer migration failure.`,
			},
		},
	}
}

func lbaasListenerElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"listener_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The listener ID.`,
			},
			"pool_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The backend ECS group ID.`,
			},
			"protocol_port": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The backend protocol port, which is the port on which a backend ECS listens for traffic.`,
			},
			"weight": {
				Type:     schema.TypeInt,
				Computed: true,
				Description: `The weight, which determines the portion of requests a backend ECS processes when being
compared to other backend ECSs added to the same listener.`,
			},
		},
	}
}

type v2ActivityLogsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newV2ActivityLogsDSWrapper(d *schema.ResourceData, meta interface{}) *v2ActivityLogsDSWrapper {
	return &v2ActivityLogsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAsv2ActivityLogsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newV2ActivityLogsDSWrapper(d, meta)
	lisScaActV2LogRst, err := wrapper.ListScalingActivityV2Logs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listScalingActivityV2LogsToSchema(lisScaActV2LogRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API AS GET /autoscaling-api/v2/{project_id}/scaling_activity_log/{scaling_group_id}
func (w *v2ActivityLogsDSWrapper) ListScalingActivityV2Logs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "autoscaling")
	if err != nil {
		return nil, err
	}

	uri := "/autoscaling-api/v2/{project_id}/scaling_activity_log/{scaling_group_id}"
	uri = strings.ReplaceAll(uri, "{scaling_group_id}", w.Get("scaling_group_id").(string))
	params := map[string]any{
		"log_id":     w.Get("log_id"),
		"start_time": w.Get("start_time"),
		"end_time":   w.Get("end_time"),
		"type":       w.Get("type"),
		"status":     w.Get("status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("scaling_activity_log", "start_number", "limit", 0).
		Request().
		Result()
}

func (w *v2ActivityLogsDSWrapper) listScalingActivityV2LogsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("scaling_activity_log", schemas.SliceToList(body.Get("scaling_activity_log"),
			func(scaActLog gjson.Result) any {
				return map[string]any{
					"instance_removed_list": schemas.SliceToList(scaActLog.Get("instance_removed_list"),
						func(instanceRemovedList gjson.Result) any {
							return map[string]any{
								"instance_name":   instanceRemovedList.Get("instance_name").Value(),
								"instance_id":     instanceRemovedList.Get("instance_id").Value(),
								"failed_reason":   instanceRemovedList.Get("failed_reason").Value(),
								"failed_details":  instanceRemovedList.Get("failed_details").Value(),
								"instance_config": instanceRemovedList.Get("instance_config").Value(),
							}
						},
					),
					"instance_standby_list": schemas.SliceToList(scaActLog.Get("instance_standby_list"),
						func(instanceStandbyList gjson.Result) any {
							return map[string]any{
								"instance_name":   instanceStandbyList.Get("instance_name").Value(),
								"instance_id":     instanceStandbyList.Get("instance_id").Value(),
								"failed_reason":   instanceStandbyList.Get("failed_reason").Value(),
								"failed_details":  instanceStandbyList.Get("failed_details").Value(),
								"instance_config": instanceStandbyList.Get("instance_config").Value(),
							}
						},
					),
					"description": scaActLog.Get("description").Value(),
					"lb_bind_failed_list": schemas.SliceToList(scaActLog.Get("lb_bind_failed_list"),
						func(lbBindFailedList gjson.Result) any {
							return map[string]any{
								"lbaas_listener": w.setSallbflll(lbBindFailedList),
								"listener":       lbBindFailedList.Get("listener").Value(),
								"failed_reason":  lbBindFailedList.Get("failed_reason").Value(),
								"failed_details": lbBindFailedList.Get("failed_details").Value(),
							}
						},
					),
					"end_time": scaActLog.Get("end_time").Value(),
					"id":       scaActLog.Get("id").Value(),
					"instance_failed_list": schemas.SliceToList(scaActLog.Get("instance_failed_list"),
						func(instanceFailedList gjson.Result) any {
							return map[string]any{
								"instance_name":   instanceFailedList.Get("instance_name").Value(),
								"instance_id":     instanceFailedList.Get("instance_id").Value(),
								"failed_reason":   instanceFailedList.Get("failed_reason").Value(),
								"failed_details":  instanceFailedList.Get("failed_details").Value(),
								"instance_config": instanceFailedList.Get("instance_config").Value(),
							}
						},
					),
					"scaling_value": scaActLog.Get("scaling_value").Value(),
					"desire_value":  scaActLog.Get("desire_value").Value(),
					"lb_unbind_failed_list": schemas.SliceToList(scaActLog.Get("lb_unbind_failed_list"),
						func(lbUnbindFailedList gjson.Result) any {
							return map[string]any{
								"lbaas_listener": w.setSalluflll(lbUnbindFailedList),
								"listener":       lbUnbindFailedList.Get("listener").Value(),
								"failed_reason":  lbUnbindFailedList.Get("failed_reason").Value(),
								"failed_details": lbUnbindFailedList.Get("failed_details").Value(),
							}
						},
					),
					"instance_deleted_list": schemas.SliceToList(scaActLog.Get("instance_deleted_list"),
						func(instanceDeletedList gjson.Result) any {
							return map[string]any{
								"instance_name":   instanceDeletedList.Get("instance_name").Value(),
								"instance_id":     instanceDeletedList.Get("instance_id").Value(),
								"failed_reason":   instanceDeletedList.Get("failed_reason").Value(),
								"failed_details":  instanceDeletedList.Get("failed_details").Value(),
								"instance_config": instanceDeletedList.Get("instance_config").Value(),
							}
						},
					),
					"lb_bind_success_list": schemas.SliceToList(scaActLog.Get("lb_bind_success_list"),
						func(lbBindSuccessList gjson.Result) any {
							return map[string]any{
								"lbaas_listener": w.setSallbslll(lbBindSuccessList),
								"listener":       lbBindSuccessList.Get("listener").Value(),
								"failed_reason":  lbBindSuccessList.Get("failed_reason").Value(),
								"failed_details": lbBindSuccessList.Get("failed_details").Value(),
							}
						},
					),
					"lb_unbind_success_list": schemas.SliceToList(scaActLog.Get("lb_unbind_success_list"),
						func(lbUnbindSuccessList gjson.Result) any {
							return map[string]any{
								"lbaas_listener": w.setSalluslll(lbUnbindSuccessList),
								"listener":       lbUnbindSuccessList.Get("listener").Value(),
								"failed_reason":  lbUnbindSuccessList.Get("failed_reason").Value(),
								"failed_details": lbUnbindSuccessList.Get("failed_details").Value(),
							}
						},
					),
					"type":       scaActLog.Get("type").Value(),
					"status":     scaActLog.Get("status").Value(),
					"start_time": scaActLog.Get("start_time").Value(),
					"instance_added_list": schemas.SliceToList(scaActLog.Get("instance_added_list"),
						func(instanceAddedList gjson.Result) any {
							return map[string]any{
								"instance_name":   instanceAddedList.Get("instance_name").Value(),
								"instance_id":     instanceAddedList.Get("instance_id").Value(),
								"failed_reason":   instanceAddedList.Get("failed_reason").Value(),
								"failed_details":  instanceAddedList.Get("failed_details").Value(),
								"instance_config": instanceAddedList.Get("instance_config").Value(),
							}
						},
					),
					"instance_value": scaActLog.Get("instance_value").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*v2ActivityLogsDSWrapper) setSallbflll(lbBindFailedList gjson.Result) any {
	return schemas.SliceToList(lbBindFailedList.Get("lbaas_listener"), func(lbaasListener gjson.Result) any {
		return map[string]any{
			"listener_id":   lbaasListener.Get("listener_id").Value(),
			"pool_id":       lbaasListener.Get("pool_id").Value(),
			"protocol_port": lbaasListener.Get("protocol_port").Value(),
			"weight":        lbaasListener.Get("weight").Value(),
		}
	})
}

func (*v2ActivityLogsDSWrapper) setSalluflll(lbUnbindFailedList gjson.Result) any {
	return schemas.SliceToList(lbUnbindFailedList.Get("lbaas_listener"), func(lbaasListener gjson.Result) any {
		return map[string]any{
			"listener_id":   lbaasListener.Get("listener_id").Value(),
			"pool_id":       lbaasListener.Get("pool_id").Value(),
			"protocol_port": lbaasListener.Get("protocol_port").Value(),
			"weight":        lbaasListener.Get("weight").Value(),
		}
	})
}

func (*v2ActivityLogsDSWrapper) setSallbslll(lbBindSuccessList gjson.Result) any {
	return schemas.SliceToList(lbBindSuccessList.Get("lbaas_listener"), func(lbaasListener gjson.Result) any {
		return map[string]any{
			"listener_id":   lbaasListener.Get("listener_id").Value(),
			"pool_id":       lbaasListener.Get("pool_id").Value(),
			"protocol_port": lbaasListener.Get("protocol_port").Value(),
			"weight":        lbaasListener.Get("weight").Value(),
		}
	})
}

func (*v2ActivityLogsDSWrapper) setSalluslll(lbUnbindSuccessList gjson.Result) any {
	return schemas.SliceToList(lbUnbindSuccessList.Get("lbaas_listener"), func(lbaasListener gjson.Result) any {
		return map[string]any{
			"listener_id":   lbaasListener.Get("listener_id").Value(),
			"pool_id":       lbaasListener.Get("pool_id").Value(),
			"protocol_port": lbaasListener.Get("protocol_port").Value(),
			"weight":        lbaasListener.Get("weight").Value(),
		}
	})
}
