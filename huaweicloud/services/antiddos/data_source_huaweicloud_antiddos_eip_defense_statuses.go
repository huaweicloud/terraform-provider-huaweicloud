// Generated by PMS #372
package antiddos

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEipDefenseStatuses() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEipDefenseStatusesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the defense status.`,
			},
			"ip": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the IP address. Both IPv4 and IPv6 addresses are supported.`,
			},
			"ddos_status": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The Anti-DDos statuses.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Because this field has no response value and its unit cannot be determined, it remains a numeric type.
						"blackhole_endtime": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The end time of blackhole.`,
						},
						"protect_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The protect type.`,
						},
						"traffic_threshold": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The traffic cleaning threshold in Mbps.`,
						},
						"http_threshold": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The threshold of http traffic.`,
						},
						"eip_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of an EIP.`,
						},
						"public_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The public address of the EIP.`,
						},
						"network_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The EIP type.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The defense status.`,
						},
					},
				},
			},
		},
	}
}

type EipDefenseStatusesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newEipDefenseStatusesDSWrapper(d *schema.ResourceData, meta interface{}) *EipDefenseStatusesDSWrapper {
	return &EipDefenseStatusesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEipDefenseStatusesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newEipDefenseStatusesDSWrapper(d, meta)
	listDDosStatusRst, err := wrapper.ListDDosStatus()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listDDosStatusToSchema(listDDosStatusRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ANTI-DDOS GET /v1/{project_id}/antiddos
func (w *EipDefenseStatusesDSWrapper) ListDDosStatus() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "anti-ddos")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/antiddos"
	params := map[string]any{
		"status": w.Get("status"),
		"ip":     w.Get("ip"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("ddosStatus", "offset", "limit", 0).
		Request().
		Result()
}

func (w *EipDefenseStatusesDSWrapper) listDDosStatusToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("ddos_status", schemas.SliceToList(body.Get("ddosStatus"),
			func(ddosStatus gjson.Result) any {
				return map[string]any{
					"blackhole_endtime": ddosStatus.Get("blackhole_endtime").Value(),
					"protect_type":      ddosStatus.Get("protect_type").Value(),
					"traffic_threshold": w.setTrafficThreshold(ddosStatus),
					"http_threshold":    ddosStatus.Get("http_threshold").Value(),
					"eip_id":            ddosStatus.Get("floating_ip_id").Value(),
					"public_ip":         ddosStatus.Get("floating_ip_address").Value(),
					"network_type":      ddosStatus.Get("network_type").Value(),
					"status":            ddosStatus.Get("status").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*EipDefenseStatusesDSWrapper) setTrafficThreshold(ddosStatus gjson.Result) any {
	return getTrafficThresholdBandwidth(int(ddosStatus.Get("traffic_threshold").Int()))
}
