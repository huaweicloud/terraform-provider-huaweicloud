// Generated by PMS #354
package antiddos

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceConfigRanges() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceConfigRangesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"traffic_limited_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of traffic limits.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"traffic_pos_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The position ID of traffic.`,
						},
						"traffic_per_second": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The threshold of traffic per second (Mbit/s).`,
						},
						"packet_per_second": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The threshold of number of packets per second.`,
						},
					},
				},
			},
			"http_limited_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of HTTP limits.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"http_request_pos_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The position ID of number of HTTP requests.`,
						},
						"http_packet_per_second": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The threshold of number of HTTP requests per second.`,
						},
					},
				},
			},
			"connection_limited_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of limits of numbers of connections.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"new_connection_limited": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of new connections of a source IP address.`,
						},
						"total_connection_limited": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total number of connections of a source IP address.`,
						},
						"cleaning_access_pos_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The position ID of access limit during cleaning.`,
						},
					},
				},
			},
			"extend_ddos_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of extend ddos limits.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"traffic_per_second": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The threshold of traffic per second (Mbit/s).`,
						},
						"packet_per_second": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The threshold of number of packets per second.`,
						},
						"set_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The position ID of config.`,
						},
						"new_connection_limited": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of new connections of a source IP address.`,
						},
						"total_connection_limited": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total number of connections of a source IP address.`,
						},
						"http_packet_per_second": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The threshold of number of HTTP requests per second.`,
						},
					},
				},
			},
		},
	}
}

type ConfigRangesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newConfigRangesDSWrapper(d *schema.ResourceData, meta interface{}) *ConfigRangesDSWrapper {
	return &ConfigRangesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceConfigRangesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newConfigRangesDSWrapper(d, meta)
	listNewConfigsRst, err := wrapper.ListNewConfigs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listNewConfigsToSchema(listNewConfigsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ANTI-DDOS GET /v2/{project_id}/antiddos/query-config-list
func (w *ConfigRangesDSWrapper) ListNewConfigs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "anti-ddosv2")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/antiddos/query-config-list"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *ConfigRangesDSWrapper) listNewConfigsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("traffic_limited_list", schemas.SliceToList(body.Get("traffic_limited_list"),
			func(traLimList gjson.Result) any {
				return map[string]any{
					"traffic_pos_id":     traLimList.Get("traffic_pos_id").Value(),
					"traffic_per_second": traLimList.Get("traffic_per_second").Value(),
					"packet_per_second":  traLimList.Get("packet_per_second").Value(),
				}
			},
		)),
		d.Set("http_limited_list", schemas.SliceToList(body.Get("http_limited_list"),
			func(httpLimitedList gjson.Result) any {
				return map[string]any{
					"http_request_pos_id":    httpLimitedList.Get("http_request_pos_id").Value(),
					"http_packet_per_second": httpLimitedList.Get("http_packet_per_second").Value(),
				}
			},
		)),
		d.Set("connection_limited_list", schemas.SliceToList(body.Get("connection_limited_list"),
			func(conLimList gjson.Result) any {
				return map[string]any{
					"new_connection_limited":   conLimList.Get("new_connection_limited").Value(),
					"total_connection_limited": conLimList.Get("total_connection_limited").Value(),
					"cleaning_access_pos_id":   conLimList.Get("cleaning_access_pos_id").Value(),
				}
			},
		)),
		d.Set("extend_ddos_config", schemas.SliceToList(body.Get("extend_ddos_config"),
			func(extDdoConfig gjson.Result) any {
				return map[string]any{
					"traffic_per_second":       extDdoConfig.Get("traffic_per_second").Value(),
					"packet_per_second":        extDdoConfig.Get("packet_per_second").Value(),
					"set_id":                   extDdoConfig.Get("SetID").Value(),
					"new_connection_limited":   extDdoConfig.Get("new_connection_limited").Value(),
					"total_connection_limited": extDdoConfig.Get("total_connection_limited").Value(),
					"http_packet_per_second":   extDdoConfig.Get("http_packet_per_second").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
