// Generated by PMS #272
package organizations

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceOrganizationsReceivedInvitations() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceOrganizationsReceivedInvitationsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"handshakes": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of invitations (handshakes).`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the unique ID of an invitation (handshake).`,
						},
						"urn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the uniform resource name of the invitation (handshake).`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the current state of the invitation (handshake).`,
						},
						"organization_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the unique ID of an organization.`,
						},
						"management_account_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the unique ID of the organization's management account.`,
						},
						"management_account_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the organization's management account.`,
						},
						"target": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the unique ID of the invited account.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the type of the invited account. It can be account or email.`,
									},
									"entity": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the value of the invited account.`,
									},
								},
							},
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the date and time when an invitation (handshake) request was made.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the date and time when an invitation (handshake) request was updated.`,
						},
						"notes": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the additional information that you want to include in the email to the recipient account owner.`,
						},
					},
				},
			},
		},
	}
}

type ReceivedInvitationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newReceivedInvitationsDSWrapper(d *schema.ResourceData, meta interface{}) *ReceivedInvitationsDSWrapper {
	return &ReceivedInvitationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceOrganizationsReceivedInvitationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newReceivedInvitationsDSWrapper(d, meta)
	lisRecHanRst, err := wrapper.ListReceivedHandshakes()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listReceivedHandshakesToSchema(lisRecHanRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API Organizations GET /v1/received-handshakes
func (w *ReceivedInvitationsDSWrapper) ListReceivedHandshakes() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "organizations")
	if err != nil {
		return nil, err
	}

	uri := "/v1/received-handshakes"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		MarkerPager("handshakes", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *ReceivedInvitationsDSWrapper) listReceivedHandshakesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("handshakes", schemas.SliceToList(body.Get("handshakes"),
			func(handshakes gjson.Result) any {
				return map[string]any{
					"id":                      handshakes.Get("id").Value(),
					"urn":                     handshakes.Get("urn").Value(),
					"status":                  handshakes.Get("status").Value(),
					"organization_id":         handshakes.Get("organization_id").Value(),
					"management_account_id":   handshakes.Get("management_account_id").Value(),
					"management_account_name": handshakes.Get("management_account_name").Value(),
					"target": schemas.SliceToList(handshakes.Get("target"),
						func(target gjson.Result) any {
							return map[string]any{
								"type":   target.Get("type").Value(),
								"entity": target.Get("entity").Value(),
							}
						},
					),
					"created_at": handshakes.Get("created_at").Value(),
					"updated_at": handshakes.Get("updated_at").Value(),
					"notes":      handshakes.Get("notes").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
