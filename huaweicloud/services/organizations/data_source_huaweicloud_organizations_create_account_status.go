// Generated by PMS #611
package organizations

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceOrganizationsCreateAccountStatus() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceOrganizationsCreateAccountStatusRead,

		Schema: map[string]*schema.Schema{
			"states": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the list of states.`,
			},
			"create_account_statuses": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of create account statuses.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of a request.`,
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the asynchronous request for creating an account.`,
						},
						"account_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the newly created account if any.`,
						},
						"account_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the account name.`,
						},
						"failure_reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the reason for a request failure.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the date and time when the create account request was made.`,
						},
						"completed_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the date and time when the account was created and the request was completed.`,
						},
					},
				},
			},
		},
	}
}

type CreateAccountStatusDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCreateAccountStatusDSWrapper(d *schema.ResourceData, meta interface{}) *CreateAccountStatusDSWrapper {
	return &CreateAccountStatusDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceOrganizationsCreateAccountStatusRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCreateAccountStatusDSWrapper(d, meta)
	lisCreAccStaRst, err := wrapper.ListCreateAccountStatuses()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCreateAccountStatusesToSchema(lisCreAccStaRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ORGANIZATIONS GET /v1/organizations/create-account-status
func (w *CreateAccountStatusDSWrapper) ListCreateAccountStatuses() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "organizations")
	if err != nil {
		return nil, err
	}

	uri := "/v1/organizations/create-account-status"
	params := map[string]any{
		"states": w.ListToArray("states"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("create_account_statuses", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *CreateAccountStatusDSWrapper) listCreateAccountStatusesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("create_account_statuses", schemas.SliceToList(body.Get("create_account_statuses"),
			func(creAccStatuses gjson.Result) any {
				return map[string]any{
					"id":             creAccStatuses.Get("id").Value(),
					"state":          creAccStatuses.Get("state").Value(),
					"account_id":     creAccStatuses.Get("account_id").Value(),
					"account_name":   creAccStatuses.Get("account_name").Value(),
					"failure_reason": creAccStatuses.Get("failure_reason").Value(),
					"created_at":     creAccStatuses.Get("created_at").Value(),
					"completed_at":   creAccStatuses.Get("completed_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
