// Generated by PMS #610
package organizations

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceOrganizationsPolicyAttachedEntities() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceOrganizationsPolicyAttachedEntitiesRead,

		Schema: map[string]*schema.Schema{
			"policy_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the policy.`,
			},
			"attached_entities": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the entities that the specified policy is attached to.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the entity.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of the entity.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the entity.`,
						},
					},
				},
			},
		},
	}
}

type PolicyAttachedEntitiesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPolicyAttachedEntitiesDSWrapper(d *schema.ResourceData, meta interface{}) *PolicyAttachedEntitiesDSWrapper {
	return &PolicyAttachedEntitiesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceOrganizationsPolicyAttachedEntitiesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPolicyAttachedEntitiesDSWrapper(d, meta)
	lisEntForPolRst, err := wrapper.ListEntitiesForPolicy()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listEntitiesForPolicyToSchema(lisEntForPolRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API Organizations GET /v1/organizations/policies/{policy_id}/attached-entities
func (w *PolicyAttachedEntitiesDSWrapper) ListEntitiesForPolicy() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "organizations")
	if err != nil {
		return nil, err
	}

	uri := "/v1/organizations/policies/{policy_id}/attached-entities"
	uri = strings.ReplaceAll(uri, "{policy_id}", w.Get("policy_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		MarkerPager("attached_entities", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *PolicyAttachedEntitiesDSWrapper) listEntitiesForPolicyToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("attached_entities", schemas.SliceToList(body.Get("attached_entities"),
			func(attEntities gjson.Result) any {
				return map[string]any{
					"id":   attEntities.Get("id").Value(),
					"type": attEntities.Get("type").Value(),
					"name": attEntities.Get("name").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
