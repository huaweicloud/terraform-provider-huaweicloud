// Generated by PMS #282
package organizations

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceOrganizationsEffectivePolicies() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceOrganizationsEffectivePoliciesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"entity_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the unique ID of an account.`,
			},
			"policy_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the name of a policy type.`,
			},
			"last_updated_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the time when the effective policy is mostly updated.`,
			},
			"policy_content": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the content of the effective policy.`,
			},
		},
	}
}

type EffectivePoliciesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newEffectivePoliciesDSWrapper(d *schema.ResourceData, meta interface{}) *EffectivePoliciesDSWrapper {
	return &EffectivePoliciesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceOrganizationsEffectivePoliciesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newEffectivePoliciesDSWrapper(d, meta)
	shoEffPolRst, err := wrapper.ShowEffectivePolicies()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.showEffectivePoliciesToSchema(shoEffPolRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API Organizations GET /v1/organizations/entities/effective-policies
func (w *EffectivePoliciesDSWrapper) ShowEffectivePolicies() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "organizations")
	if err != nil {
		return nil, err
	}

	uri := "/v1/organizations/entities/effective-policies"
	params := map[string]any{
		"entity_id":   w.Get("entity_id"),
		"policy_type": w.Get("policy_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *EffectivePoliciesDSWrapper) showEffectivePoliciesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("last_updated_at", body.Get("last_updated_at").Value()),
		d.Set("policy_content", body.Get("policy_content").Value()),
	)
	return mErr.ErrorOrNil()
}
