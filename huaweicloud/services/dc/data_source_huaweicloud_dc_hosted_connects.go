// Generated by PMS #774
package dc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDcHostedConnects() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDcHostedConnectsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"hosting_id": {
				Type:        schema.TypeList,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Optional:    true,
				Description: `Specifies the hosting direct connect IDs to which the hosted connects belong.`,
			},
			"hosted_connect_id": {
				Type:        schema.TypeList,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Optional:    true,
				Description: `Specifies the hosted connect IDs.`,
			},
			"name": {
				Type:        schema.TypeList,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Optional:    true,
				Description: `Specifies the hosted connect names.`,
			},
			"sort_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting field.`,
			},
			"sort_dir": {
				Type:        schema.TypeList,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Optional:    true,
				Description: `Specifies the sorting order of returned results.`,
			},
			"hosted_connects": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of hosted connects.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the hosted connect ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the hosted connect name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the hosted connect description.`,
						},
						"hosting_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the hosting direct connect ID.`,
						},
						"vlan": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the VLAN allocated to the hosted connect.`,
						},
						"bandwidth": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the bandwidth of the hosted connect in Mbit/s.`,
						},
						"provider": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the provider of the hosted connect.`,
						},
						"provider_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the provider status of the hosted connect.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of the hosted connect.`,
						},
						"port_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the port type of the hosted connect.`,
						},
						"location": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the location of the hosted connect.`,
						},
						"peer_location": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the peer location of the hosted connect.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the hosted connect.`,
						},
						"apply_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the hosted connect was applied.`,
						},
						"create_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the hosted connect was created.`,
						},
					},
				},
			},
		},
	}
}

type HostedConnectsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newHostedConnectsDSWrapper(d *schema.ResourceData, meta interface{}) *HostedConnectsDSWrapper {
	return &HostedConnectsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDcHostedConnectsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newHostedConnectsDSWrapper(d, meta)
	listHostedConnectsRst, err := wrapper.ListHostedConnects()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listHostedConnectsToSchema(listHostedConnectsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DC GET /v3/{project_id}/dcaas/hosted-connects
func (w *HostedConnectsDSWrapper) ListHostedConnects() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/dcaas/hosted-connects"
	params := map[string]any{
		"hosting_id": w.ListToArray("hosting_id"),
		"id":         w.ListToArray("hosted_connect_id"),
		"name":       w.ListToArray("name"),
		"sort_key":   w.Get("sort_key"),
		"sort_dir":   w.ListToArray("sort_dir"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("hosted_connects", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *HostedConnectsDSWrapper) listHostedConnectsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("hosted_connects", schemas.SliceToList(body.Get("hosted_connects"),
			func(hostedConnects gjson.Result) any {
				return map[string]any{
					"id":              hostedConnects.Get("id").Value(),
					"name":            hostedConnects.Get("name").Value(),
					"description":     hostedConnects.Get("description").Value(),
					"hosting_id":      hostedConnects.Get("hosting_id").Value(),
					"vlan":            hostedConnects.Get("vlan").Value(),
					"bandwidth":       hostedConnects.Get("bandwidth").Value(),
					"provider":        hostedConnects.Get("provider").Value(),
					"provider_status": hostedConnects.Get("provider_status").Value(),
					"type":            hostedConnects.Get("type").Value(),
					"port_type":       hostedConnects.Get("port_type").Value(),
					"location":        hostedConnects.Get("location").Value(),
					"peer_location":   hostedConnects.Get("peer_location").Value(),
					"status":          hostedConnects.Get("status").Value(),
					"apply_time":      hostedConnects.Get("apply_time").Value(),
					"create_time":     hostedConnects.Get("create_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
