// Generated by PMS #774
package dc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDcConnectGatewayGeips() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDcConnectGatewayGeipsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"connect_gateway_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the DC connect gateway ID.`,
			},
			"global_eip_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the global EIP ID.`,
			},
			"global_eip_segment_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the ID of the global EIP range.`,
			},
			"status": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the status by which instances are queried.`,
			},
			"sort_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting field.`,
			},
			"sort_dir": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the sorting order of returned results.`,
			},
			"global_eips": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of the bound global EIPs.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"global_eip_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the global EIP ID.`,
						},
						"global_eip_segment_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the global EIP range.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the global EIP type.`,
						},
						"error_message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the cause of the failure to bind the global EIP.`,
						},
						"gcb_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the global connection bandwidth ID.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates whether the global EIP has been bound.`,
						},
						"cidr": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the global EIP and its subnet mask.`,
						},
						"address_family": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the address family of the global EIP.`,
						},
						"ie_vtep_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the VTEP IP address of the CloudPond cluster.`,
						},
						"created_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the global EIP was bound.`,
						},
					},
				},
			},
		},
	}
}

type ConnectGatewayGeipsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newConnectGatewayGeipsDSWrapper(d *schema.ResourceData, meta interface{}) *ConnectGatewayGeipsDSWrapper {
	return &ConnectGatewayGeipsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDcConnectGatewayGeipsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newConnectGatewayGeipsDSWrapper(d, meta)
	listGlobalEipsRst, err := wrapper.ListGlobalEips()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listGlobalEipsToSchema(listGlobalEipsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DC GET /v3/{project_id}/dcaas/connect-gateways/{connect_gateway_id}/binding-global-eips
func (w *ConnectGatewayGeipsDSWrapper) ListGlobalEips() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/dcaas/connect-gateways/{connect_gateway_id}/binding-global-eips"
	uri = strings.ReplaceAll(uri, "{connect_gateway_id}", w.Get("connect_gateway_id").(string))
	params := map[string]any{
		"sort_key":              w.Get("sort_key"),
		"sort_dir":              w.ListToArray("sort_dir"),
		"status":                w.ListToArray("status"),
		"global_eip_id":         w.ListToArray("global_eip_id"),
		"global_eip_segment_id": w.ListToArray("global_eip_segment_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *ConnectGatewayGeipsDSWrapper) listGlobalEipsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("global_eips", schemas.SliceToList(body.Get("global_eips"),
			func(globalEips gjson.Result) any {
				return map[string]any{
					"global_eip_id":         globalEips.Get("global_eip_id").Value(),
					"global_eip_segment_id": globalEips.Get("global_eip_segment_id").Value(),
					"type":                  globalEips.Get("type").Value(),
					"error_message":         globalEips.Get("error_message").Value(),
					"gcb_id":                globalEips.Get("gcb_id").Value(),
					"status":                globalEips.Get("status").Value(),
					"cidr":                  globalEips.Get("cidr").Value(),
					"address_family":        globalEips.Get("address_family").Value(),
					"ie_vtep_ip":            globalEips.Get("ie_vtep_ip").Value(),
					"created_time":          globalEips.Get("created_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
