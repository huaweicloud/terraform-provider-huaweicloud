// Generated by PMS #836
package dc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDcVirtualInterfaceSwitchoverRecords() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDcVirtualInterfaceSwitchoverRecordsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"resource_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the resource ID used for querying switchover test records.`,
			},
			"switchover_test_records": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of the switchover test records.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the unique ID of the switchover test record.`,
						},
						"resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the resource on which the switchover test is to be performed.`,
						},
						"resource_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of the resource on which the switchover test is to be performed.`,
						},
						"operation": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates whether to perform a switchover test.`,
						},
						"operate_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the switchover test status.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the start time of the switchover test.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the end time of the switchover test.`,
						},
					},
				},
			},
		},
	}
}

type VirtualInterfaceSwitchoverRecordsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newVirtualInterfaceSwitchoverRecordsDSWrapper(d *schema.ResourceData, meta interface{}) *VirtualInterfaceSwitchoverRecordsDSWrapper {
	return &VirtualInterfaceSwitchoverRecordsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDcVirtualInterfaceSwitchoverRecordsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newVirtualInterfaceSwitchoverRecordsDSWrapper(d, meta)
	lisSwiTesRecRst, err := wrapper.ListSwitchoverTestRecords()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSwitchoverTestRecordsToSchema(lisSwiTesRecRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DC GET /v3/{project_id}/dcaas/switchover-test
func (w *VirtualInterfaceSwitchoverRecordsDSWrapper) ListSwitchoverTestRecords() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/dcaas/switchover-test"
	params := map[string]any{
		"resource_id": w.ListToArray("resource_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *VirtualInterfaceSwitchoverRecordsDSWrapper) listSwitchoverTestRecordsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("switchover_test_records", schemas.SliceToList(body.Get("switchover_test_records"),
			func(swiTesRecords gjson.Result) any {
				return map[string]any{
					"id":             swiTesRecords.Get("id").Value(),
					"resource_id":    swiTesRecords.Get("resource_id").Value(),
					"resource_type":  swiTesRecords.Get("resource_type").Value(),
					"operation":      swiTesRecords.Get("operation").Value(),
					"operate_status": swiTesRecords.Get("operate_status").Value(),
					"start_time":     swiTesRecords.Get("start_time").Value(),
					"end_time":       swiTesRecords.Get("end_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
