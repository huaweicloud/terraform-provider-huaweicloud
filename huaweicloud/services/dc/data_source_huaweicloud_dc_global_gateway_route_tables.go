// Generated by PMS #774
package dc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDcGlobalGatewayRouteTables() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDcGlobalGatewayRouteTablesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"gdgw_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the global gateway ID.`,
			},
			"nexthop": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the nexthop IDs to filter the routes.`,
			},
			"destination": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the destination addresses to filter the routes.`,
			},
			"address_family": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the address families to filter the routes.`,
			},
			"gdgw_routetables": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of global gateway route tables.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the route ID.`,
						},
						"gateway_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the gateway ID.`,
						},
						"nexthop": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the nexthop ID.`,
						},
						"obtain_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the route type.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the route description.`,
						},
						"destination": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the route subnet.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the route status.`,
						},
						"address_family": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the address family.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the nexthop type.`,
						},
					},
				},
			},
		},
	}
}

type GlobalGatewayRouteTablesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newGlobalGatewayRouteTablesDSWrapper(d *schema.ResourceData, meta interface{}) *GlobalGatewayRouteTablesDSWrapper {
	return &GlobalGatewayRouteTablesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDcGlobalGatewayRouteTablesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newGlobalGatewayRouteTablesDSWrapper(d, meta)
	listGdgwRouteTablesRst, err := wrapper.ListGdgwRouteTables()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listGdgwRouteTablesToSchema(listGdgwRouteTablesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DC GET /v3/{project_id}/dcaas/gdgw/{gdgw_id}/routetables
func (w *GlobalGatewayRouteTablesDSWrapper) ListGdgwRouteTables() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/dcaas/gdgw/{gdgw_id}/routetables"
	uri = strings.ReplaceAll(uri, "{gdgw_id}", w.Get("gdgw_id").(string))
	params := map[string]any{
		"nexthop":        w.ListToArray("nexthop"),
		"destination":    w.ListToArray("destination"),
		"address_family": w.ListToArray("address_family"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *GlobalGatewayRouteTablesDSWrapper) listGdgwRouteTablesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("gdgw_routetables", schemas.SliceToList(body.Get("gdgw_routetables"),
			func(routeTables gjson.Result) any {
				return map[string]any{
					"id":             routeTables.Get("id").Value(),
					"gateway_id":     routeTables.Get("gateway_id").Value(),
					"nexthop":        routeTables.Get("nexthop").Value(),
					"obtain_mode":    routeTables.Get("obtain_mode").Value(),
					"description":    routeTables.Get("description").Value(),
					"destination":    routeTables.Get("destination").Value(),
					"status":         routeTables.Get("status").Value(),
					"address_family": routeTables.Get("address_family").Value(),
					"type":           routeTables.Get("type").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
