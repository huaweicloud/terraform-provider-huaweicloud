// Generated by PMS #736
package dc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDcConnectGateways() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDcConnectGatewaysRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"connect_gateway_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the IDs of the DC connect gateway.`,
			},
			"name": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the names of the DC connect gateway.`,
			},
			"sort_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sorting field.`,
			},
			"sort_dir": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the sorting order of returned results.`,
			},
			"connect_gateways": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of connect gateway.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the connect gateway.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the connect gateway.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description of the DC connect gateway.`,
						},
						"address_family": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the address family.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the dc connect gateway status.`,
						},
						"gateway_site": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the gateway location.`,
						},
						"gcb_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the global connection bandwidth ID.`,
						},
						"bgp_asn": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the BGP ASN.`,
						},
						"current_geip_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of global EIPs bound to the connect gateway.`,
						},
						"access_site": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the access site of the connect gateway.`,
						},
						"created_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the connect gateway was created.`,
						},
						"updated_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the connect gateway was updated.`,
						},
					},
				},
			},
		},
	}
}

type ConnectGatewaysDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newConnectGatewaysDSWrapper(d *schema.ResourceData, meta interface{}) *ConnectGatewaysDSWrapper {
	return &ConnectGatewaysDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDcConnectGatewaysRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newConnectGatewaysDSWrapper(d, meta)
	lisConGatRst, err := wrapper.ListConnectGateways()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listConnectGatewaysToSchema(lisConGatRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DC GET /v3/{project_id}/dcaas/connect-gateways
func (w *ConnectGatewaysDSWrapper) ListConnectGateways() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/dcaas/connect-gateways"
	params := map[string]any{
		"sort_key": w.Get("sort_key"),
		"sort_dir": w.ListToArray("sort_dir"),
		"id":       w.ListToArray("connect_gateway_id"),
		"name":     w.ListToArray("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("connect_gateways", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *ConnectGatewaysDSWrapper) listConnectGatewaysToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("connect_gateways", schemas.SliceToList(body.Get("connect_gateways"),
			func(connectGateways gjson.Result) any {
				return map[string]any{
					"id":                 connectGateways.Get("id").Value(),
					"name":               connectGateways.Get("name").Value(),
					"description":        connectGateways.Get("description").Value(),
					"address_family":     connectGateways.Get("address_family").Value(),
					"status":             connectGateways.Get("status").Value(),
					"gateway_site":       connectGateways.Get("gateway_site").Value(),
					"gcb_id":             connectGateways.Get("gcb_id").Value(),
					"bgp_asn":            connectGateways.Get("bgp_asn").Value(),
					"current_geip_count": connectGateways.Get("current_geip_count").Value(),
					"access_site":        connectGateways.Get("access_site").Value(),
					"created_time":       connectGateways.Get("created_time").Value(),
					"updated_time":       connectGateways.Get("updated_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
