// Generated by PMS #547
package codeartsinspector

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCodeartsInspectorHosts() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCodeartsInspectorHostsRead,

		Schema: map[string]*schema.Schema{
			"group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the host group ID.`,
			},
			"hosts": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the host list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host name.`,
						},
						"os_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host os type.`,
						},
						"ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host IP.`,
						},
						"ssh_credential_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host ssh credential ID`,
						},
						"jumper_server_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the jumper server ID.`,
						},
						"smb_credential_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the smb credential ID.`,
						},
						"group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host group ID.`,
						},
						"auth_status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the auth status.`,
						},
						"last_scan_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the last scan ID.`,
						},
						"last_scan_info": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the last scan info.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"status": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the scan status.`,
									},
									"enable_weak_passwd": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether weak password check enabled.`,
									},
									"create_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the scan task create time.`,
									},
									"end_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the scan task end time.`,
									},
									"progress": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the task progress.`,
									},
									"reason": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the task description.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type HostsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newHostsDSWrapper(d *schema.ResourceData, meta interface{}) *HostsDSWrapper {
	return &HostsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCodeartsInspectorHostsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newHostsDSWrapper(d, meta)
	listHostsRst, err := wrapper.ListHosts()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listHostsToSchema(listHostsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API VSS GET /v3/{project_id}/hostscan/hosts
func (w *HostsDSWrapper) ListHosts() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/hostscan/hosts"
	params := map[string]any{
		"group_id": w.Get("group_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("items", "offset", "limit", 0).
		Request().
		Result()
}

func (w *HostsDSWrapper) listHostsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("hosts", schemas.SliceToList(body.Get("items"),
			func(hosts gjson.Result) any {
				return map[string]any{
					"id":                hosts.Get("id").Value(),
					"name":              hosts.Get("name").Value(),
					"os_type":           hosts.Get("os_type").Value(),
					"ip":                hosts.Get("ip").Value(),
					"ssh_credential_id": hosts.Get("ssh_credential_id").Value(),
					"jumper_server_id":  hosts.Get("jumper_server_id").Value(),
					"smb_credential_id": hosts.Get("smb_credential_id").Value(),
					"group_id":          hosts.Get("group_id").Value(),
					"auth_status":       hosts.Get("auth_status").Value(),
					"last_scan_id":      hosts.Get("last_scan_id").Value(),
					"last_scan_info": schemas.SliceToList(hosts.Get("last_scan_info"),
						func(lastScanInfo gjson.Result) any {
							return map[string]any{
								"status":             lastScanInfo.Get("status").Value(),
								"enable_weak_passwd": lastScanInfo.Get("enable_weak_passwd").Value(),
								"create_time":        w.setIteLasScaInfCreTime(lastScanInfo),
								"end_time":           w.setIteLasScaInfEndTime(lastScanInfo),
								"progress":           lastScanInfo.Get("progress").Value(),
								"reason":             lastScanInfo.Get("reason").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*HostsDSWrapper) setIteLasScaInfCreTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("create_time").Int()/1000, false)
}

func (*HostsDSWrapper) setIteLasScaInfEndTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("end_time").Int()/1000, false)
}
