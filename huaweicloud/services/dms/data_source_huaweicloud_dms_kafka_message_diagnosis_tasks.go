// Generated by PMS #389
package dms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDmsKafkaMessageDiagnosisTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDmsKafkaMessageDiagnosisTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the kafka instance ID.`,
			},
			"report_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the diagnosis reports.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"report_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the diagnosis report ID.`,
						},
						"group_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the consumer group being diagnosed.`,
						},
						"topic_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the topic being diagnosed.`,
						},
						"accumulated_partitions": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of partitions where accumulated messages are found.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of a message stack diagnosis task.`,
						},
						"begin_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the diagnosis task start time.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the diagnosis task end time.`,
						},
					},
				},
			},
		},
	}
}

type KafkaMessageDiagnosisTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newKafkaMessageDiagnosisTasksDSWrapper(d *schema.ResourceData, meta interface{}) *KafkaMessageDiagnosisTasksDSWrapper {
	return &KafkaMessageDiagnosisTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDmsKafkaMessageDiagnosisTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newKafkaMessageDiagnosisTasksDSWrapper(d, meta)
	lisMesDiaRepRst, err := wrapper.ListMessageDiagnosisReports()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listMessageDiagnosisReportsToSchema(lisMesDiaRepRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API Kafka GET /v2/{project_id}/kafka/instances/{instance_id}/message-diagnosis-tasks
func (w *KafkaMessageDiagnosisTasksDSWrapper) ListMessageDiagnosisReports() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dmsv2")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/kafka/instances/{instance_id}/message-diagnosis-tasks"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("report_list", "offset", "limit", 0).
		Request().
		Result()
}

func (w *KafkaMessageDiagnosisTasksDSWrapper) listMessageDiagnosisReportsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("report_list", schemas.SliceToList(body.Get("report_list"),
			func(reportList gjson.Result) any {
				return map[string]any{
					"report_id":              reportList.Get("report_id").Value(),
					"group_name":             reportList.Get("group_name").Value(),
					"topic_name":             reportList.Get("topic_name").Value(),
					"accumulated_partitions": reportList.Get("accumulated_partitions").Value(),
					"status":                 reportList.Get("status").Value(),
					"begin_time":             reportList.Get("begin_time").Value(),
					"end_time":               reportList.Get("end_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
