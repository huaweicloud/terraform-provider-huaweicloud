// Generated by PMS #379
package dms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDmsRabbitmqUsers() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDmsRabbitmqUsersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the RabbitMQ instance ID.`,
			},
			"users": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the users list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"access_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the user name.`,
						},
						"vhosts": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the virtual hosts to be granted permissions for.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"write": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the granting resource write permissions using regular expressions.`,
									},
									"read": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the granting resource read permissions using regular expressions.`,
									},
									"vhost": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the name of the virtual host to be granted permissions for.`,
									},
									"conf": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the granting resource permissions using regular expressions.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type RabbitmqUsersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRabbitmqUsersDSWrapper(d *schema.ResourceData, meta interface{}) *RabbitmqUsersDSWrapper {
	return &RabbitmqUsersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDmsRabbitmqUsersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRabbitmqUsersDSWrapper(d, meta)
	listUserRst, err := wrapper.ListUser()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listUserToSchema(listUserRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API RabbitMQ GET /v2/{project_id}/instances/{instance_id}/users
func (w *RabbitmqUsersDSWrapper) ListUser() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dmsv2")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/users"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("users", "offset", "limit", 0).
		Request().
		Result()
}

func (w *RabbitmqUsersDSWrapper) listUserToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("users", schemas.SliceToList(body.Get("users"),
			func(users gjson.Result) any {
				return map[string]any{
					"access_key": users.Get("access_key").Value(),
					"vhosts": schemas.SliceToList(users.Get("vhosts"),
						func(vhosts gjson.Result) any {
							return map[string]any{
								"write": vhosts.Get("write").Value(),
								"read":  vhosts.Get("read").Value(),
								"vhost": vhosts.Get("vhost").Value(),
								"conf":  vhosts.Get("conf").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
