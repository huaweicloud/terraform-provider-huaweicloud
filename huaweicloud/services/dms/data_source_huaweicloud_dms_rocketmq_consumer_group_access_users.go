// Generated by PMS #444
package dms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDmsRocketmqConsumerGroupAccessUsers() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDmsRocketmqConsumerGroupAccessUsersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"group": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the consumer group.`,
			},
			"policies": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the user list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"white_remote_address": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the IP address whitelist.`,
						},
						"admin": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the user is an administrator.`,
						},
						"perm": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the permissions.`,
						},
						"access_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the user name.`,
						},
					},
				},
			},
		},
	}
}

type RocketmqConsumerGroupAccessUsersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRocketmqConsumerGroupAccessUsersDSWrapper(d *schema.ResourceData, meta interface{}) *RocketmqConsumerGroupAccessUsersDSWrapper {
	return &RocketmqConsumerGroupAccessUsersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDmsRocketmqConsumerGroupAccessUsersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRocketmqConsumerGroupAccessUsersDSWrapper(d, meta)
	lisConGroAccPolRst, err := wrapper.ListConsumeGroupAccessPolicy()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listConsumeGroupAccessPolicyToSchema(lisConGroAccPolRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API RocketMQ GET /v2/{engine}/{project_id}/instances/{instance_id}/groups/{group_id}/accesspolicy
func (w *RocketmqConsumerGroupAccessUsersDSWrapper) ListConsumeGroupAccessPolicy() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dmsv2")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{engine}/{project_id}/instances/{instance_id}/groups/{group_id}/accesspolicy"
	uri = strings.ReplaceAll(uri, "{engine}", "reliability")
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	uri = strings.ReplaceAll(uri, "{group_id}", w.Get("group").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("policies", "offset", "limit", 0).
		Request().
		Result()
}

func (w *RocketmqConsumerGroupAccessUsersDSWrapper) listConsumeGroupAccessPolicyToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("policies", schemas.SliceToList(body.Get("policies"),
			func(policies gjson.Result) any {
				return map[string]any{
					"white_remote_address": policies.Get("white_remote_address").Value(),
					"admin":                policies.Get("admin").Value(),
					"perm":                 policies.Get("perm").Value(),
					"access_key":           policies.Get("access_key").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
