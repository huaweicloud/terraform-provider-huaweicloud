// Generated by PMS #437
package dms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDmsRocketmqMessageTraces() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDmsRocketmqMessageTracesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"message_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the message ID.`,
			},
			"traces": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Specifies the message trace list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"message_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the message ID.`,
						},
						"consume_status": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Specifies the consumption status.`,
						},
						"message_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the message type.`,
						},
						"keys": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the message keys.`,
						},
						"body_length": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Specifies the message body length.`,
						},
						"offset_message_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the offset message ID.`,
						},
						"time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the time.`,
						},
						"cost_time": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Specifies the time spent.`,
						},
						"topic": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the topic name.`,
						},
						"group_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the producer group or consumer group.`,
						},
						"client_host": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the IP address of the host that generates the message.`,
						},
						"store_host": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the IP address of the host that stores the message.`,
						},
						"transaction_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the transaction ID.`,
						},
						"transaction_state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the transaction status.`,
						},
						"from_transaction_check": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Specifies whether the response is a transaction check response.`,
						},
						"trace_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the trace type.`,
						},
						"retry_times": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Specifies the number of retry times.`,
						},
						"tags": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the message tag.`,
						},
						"request_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the request ID.`,
						},
						"success": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Specifies whether the request is successful.`,
						},
					},
				},
			},
		},
	}
}

type RocketmqMessageTracesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRocketmqMessageTracesDSWrapper(d *schema.ResourceData, meta interface{}) *RocketmqMessageTracesDSWrapper {
	return &RocketmqMessageTracesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDmsRocketmqMessageTracesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRocketmqMessageTracesDSWrapper(d, meta)
	listMessageTraceRst, err := wrapper.ListMessageTrace()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listMessageTraceToSchema(listMessageTraceRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API RorcketMQ GET /v2/{engine}/{project_id}/instances/{instance_id}/trace
func (w *RocketmqMessageTracesDSWrapper) ListMessageTrace() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dmsv2")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{engine}/{project_id}/instances/{instance_id}/trace"
	uri = strings.ReplaceAll(uri, "{engine}", "reliability")
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"msg_id": w.Get("message_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *RocketmqMessageTracesDSWrapper) listMessageTraceToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("traces", schemas.SliceToList(body.Get("trace"),
			func(traces gjson.Result) any {
				return map[string]any{
					"message_id":             traces.Get("msg_id").Value(),
					"consume_status":         traces.Get("consume_status").Value(),
					"message_type":           traces.Get("msg_type").Value(),
					"keys":                   traces.Get("keys").Value(),
					"body_length":            traces.Get("body_length").Value(),
					"offset_message_id":      traces.Get("offset_msg_id").Value(),
					"time":                   w.setTraceTimestamp(traces),
					"cost_time":              traces.Get("cost_time").Value(),
					"topic":                  traces.Get("topic").Value(),
					"group_name":             traces.Get("group_name").Value(),
					"client_host":            traces.Get("client_host").Value(),
					"store_host":             traces.Get("store_host").Value(),
					"transaction_id":         traces.Get("transaction_id").Value(),
					"transaction_state":      traces.Get("transaction_state").Value(),
					"from_transaction_check": traces.Get("from_transaction_check").Value(),
					"trace_type":             traces.Get("trace_type").Value(),
					"retry_times":            traces.Get("retry_times").Value(),
					"tags":                   traces.Get("tags").Value(),
					"request_id":             traces.Get("request_id").Value(),
					"success":                traces.Get("success").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*RocketmqMessageTracesDSWrapper) setTraceTimestamp(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("timestamp").Int())/1000, true)
}
