// Generated by PMS #556
package aom

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceAomAccessCodes() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAomAccessCodesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"access_codes": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the access codes.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"access_code_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the access code ID.`,
						},
						"access_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the access code.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status.`,
						},
						"create_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time.`,
						},
					},
				},
			},
		},
	}
}

type AccessCodesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAccessCodesDSWrapper(d *schema.ResourceData, meta interface{}) *AccessCodesDSWrapper {
	return &AccessCodesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAomAccessCodesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAccessCodesDSWrapper(d, meta)
	listAccessCodeRst, err := wrapper.ListAccessCode()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listAccessCodeToSchema(listAccessCodeRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API AOM GET /v1/{project_id}/access-code
func (w *AccessCodesDSWrapper) ListAccessCode() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "aom")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/access-code"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *AccessCodesDSWrapper) listAccessCodeToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("access_codes", schemas.SliceToList(body.Get("access_codes"),
			func(accessCodes gjson.Result) any {
				return map[string]any{
					"access_code_id": accessCodes.Get("access_code_id").Value(),
					"access_code":    accessCodes.Get("access_code").Value(),
					"status":         accessCodes.Get("status").Value(),
					"create_at":      w.setAccessCodesCreateAt(accessCodes),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AccessCodesDSWrapper) setAccessCodesCreateAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("create_at").Int())/1000000000, true)
}
