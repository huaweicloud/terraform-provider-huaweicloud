// Generated by PMS #204
package kafka

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/chnsz/golangsdk"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

// @API Kafka GET /v2/kafka/{project_id}/instances/{instance_id}/kafka-user-client-quota
func DataSourceDmsKafkaUserClientQuotas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDmsKafkaUserClientQuotasRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"user": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the user name.`,
			},
			"client": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the client ID.`,
			},
			"quotas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the client quotas.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"user": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the username.`,
						},
						"user_default": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether to use the default user settings.`,
						},
						"client": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the client ID.`,
						},
						"client_default": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether to use the default client settings.`,
						},
						"producer_byte_rate": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the production rate limit. The unit is byte/s.`,
						},
						"consumer_byte_rate": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the consumption rate limit. The unit is byte/s.`,
						},
					},
				},
			},
		},
	}
}

func dataSourceDmsKafkaUserClientQuotasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	cfg := meta.(*config.Config)
	region := cfg.GetRegion(d)
	client, err := cfg.NewServiceClient("dmsv2", region)
	if err != nil {
		return diag.Errorf("error creating DMS client: %s", err)
	}

	listQuotasHttpUrl := "v2/kafka/{project_id}/instances/{instance_id}/kafka-user-client-quota"
	listQuotasPath := client.Endpoint + listQuotasHttpUrl
	listQuotasPath = strings.ReplaceAll(listQuotasPath, "{project_id}", client.ProjectID)
	listQuotasPath = strings.ReplaceAll(listQuotasPath, "{instance_id}", d.Get("instance_id").(string))
	listQuotasOpt := golangsdk.RequestOpts{
		KeepResponseBody: true,
		MoreHeaders:      map[string]string{"Content-Type": "application/json"},
	}

	// pagelimit is `10`
	listQuotasPath += fmt.Sprintf("?limit=%v", pageLimit)
	currentTotal := 0
	results := make([]map[string]interface{}, 0)
	for {
		currentPath := listQuotasPath + fmt.Sprintf("&offset=%d", currentTotal)
		listQuotasResp, err := client.Request("GET", currentPath, &listQuotasOpt)
		if err != nil {
			return diag.Errorf("error retrieving quotas: %s", err)
		}
		listQuotasRespBody, err := utils.FlattenResponse(listQuotasResp)
		if err != nil {
			return diag.Errorf("error flatten response: %s", err)
		}

		quotas := utils.PathSearch("quotas", listQuotasRespBody, make([]interface{}, 0)).([]interface{})
		for _, quota := range quotas {
			// filter result
			user := utils.PathSearch("user", quota, "").(string)
			clientName := utils.PathSearch("client", quota, "").(string)
			if val, ok := d.GetOk("user"); ok && user != val {
				continue
			}
			if val, ok := d.GetOk("client"); ok && clientName != val {
				continue
			}

			listRespJson, err := json.Marshal(quota)
			if err != nil {
				return diag.FromErr(err)
			}

			var listRespBody map[string]interface{}
			err = json.Unmarshal(listRespJson, &listRespBody)
			if err != nil {
				return diag.FromErr(err)
			}
			results = append(results, map[string]interface{}{
				"user":               utils.PathSearch("user", quota, nil),
				"user_default":       listRespBody["user-default"],
				"client":             utils.PathSearch("client", quota, nil),
				"client_default":     listRespBody["client-default"],
				"producer_byte_rate": int64(listRespBody["producer-byte-rate"].(float64)),
				"consumer_byte_rate": int64(listRespBody["consumer-byte-rate"].(float64)),
			})
		}

		// `totalCount` means the number of all `Quotas`, and type is float64.
		currentTotal += len(quotas)
		totalCount := utils.PathSearch("count", listQuotasRespBody, float64(0))
		if int(totalCount.(float64)) == currentTotal {
			break
		}
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	mErr := multierror.Append(nil,
		d.Set("region", region),
		d.Set("quotas", results),
	)

	return diag.FromErr(mErr.ErrorOrNil())
}
