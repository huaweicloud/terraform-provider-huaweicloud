// Generated by PMS #231
package kafka

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDmsKafkav2SmartConnectTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDmsKafkav2SmartConnectTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the kafka instance ID.`,
			},
			"tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the smart connect task details.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task ID.`,
						},
						"task_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task name.`,
						},
						"topics": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the task topics name list.`,
						},
						"topics_regex": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the regular expression of the topic of the task.`,
						},
						"source_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the source type of the task.`,
						},
						"destination_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the destination type of the task.`,
						},
						"source_task": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the source configuration of the task.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"current_instance_alias": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the current Kafka instance alias.`,
									},
									"peer_instance_alias": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the peer Kafka instance alias.`,
									},
									"peer_instance_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the peer Kafka instance ID.`,
									},
									"peer_instance_address": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the peer Kafka instance address.`,
									},
									"security_protocol": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the peer Kafka instance authentication.`,
									},
									"sasl_mechanism": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the peer Kafka instance authentication mode.`,
									},
									"user_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the peer Kafka instance username.`,
									},
									"direction": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the sync direction.`,
									},
									"sync_consumer_offsets_enabled": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether to sync the consumption progress.`,
									},
									"replication_factor": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of replicas.`,
									},
									"task_num": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of data replication tasks.`,
									},
									"rename_topic_enabled": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether to rename a topic.`,
									},
									"provenance_header_enabled": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether to add the source header.`,
									},
									"consumer_strategy": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the start offset.`,
									},
									"compression_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates  the compression algorithm to use for copying messages.`,
									},
									"topics_mapping": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the topic mapping.`,
									},
								},
							},
						},
						"destination_task": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the target configuration of the task.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"consumer_strategy": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the consumer strategy of the smart connect task.`,
									},
									"deliver_time_interval": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the dumping period in seconds.`,
									},
									"obs_bucket_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the obs bucket name of the smart connect task.`,
									},
									"partition_format": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the partiton format of the smart connect task.`,
									},
									"obs_path": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the obs path of the smart connect task.`,
									},
									"destination_file_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the destination file type of the smart connect task.`,
									},
									"record_delimiter": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the record delimiter of the smart connect task.`,
									},
									"store_keys": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether to store keys.`,
									},
									"obs_part_size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the size of each file to be uploaded.`,
									},
									"flush_size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the flush size.`,
									},
									"timezone": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the time zone.`,
									},
									"schema_generator_class": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the schema generator class.`,
									},
									"partitioner_class": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the partitioner class.`,
									},
									"key_converter": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the key converter.`,
									},
									"value_converter": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the value converter.`,
									},
									"kv_delimiter": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the kv delimiter.`,
									},
								},
							},
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the smart connect task.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time of the smart connect task.`,
						},
					},
				},
			},
		},
	}
}

type Kafkav2SmartConnectTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newKafkav2SmartConnectTasksDSWrapper(d *schema.ResourceData, meta interface{}) *Kafkav2SmartConnectTasksDSWrapper {
	return &Kafkav2SmartConnectTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDmsKafkav2SmartConnectTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newKafkav2SmartConnectTasksDSWrapper(d, meta)
	lisConTasRst, err := wrapper.ListConnectorTasks()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listConnectorTasksToSchema(lisConTasRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API Kafka GET /v2/{project_id}/instances/{instance_id}/connector/tasks
func (w *Kafkav2SmartConnectTasksDSWrapper) ListConnectorTasks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dmsv2")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/connector/tasks"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("tasks", "offset", "limit", 0).
		Request().
		Result()
}

func (w *Kafkav2SmartConnectTasksDSWrapper) listConnectorTasksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("tasks", schemas.SliceToList(body.Get("tasks"),
			func(tasks gjson.Result) any {
				return map[string]any{
					"id":               tasks.Get("id").Value(),
					"task_name":        tasks.Get("task_name").Value(),
					"topics":           w.setTasksTopics(tasks),
					"topics_regex":     tasks.Get("topics_regex").Value(),
					"source_type":      tasks.Get("source_type").Value(),
					"destination_type": tasks.Get("sink_type").Value(),
					"source_task": schemas.SliceToList(tasks.Get("source_task"),
						func(sourceTask gjson.Result) any {
							return map[string]any{
								"current_instance_alias":        sourceTask.Get("current_cluster_name").Value(),
								"peer_instance_alias":           sourceTask.Get("cluster_name").Value(),
								"peer_instance_id":              sourceTask.Get("instance_id").Value(),
								"peer_instance_address":         w.setTasSouTasBooServers(sourceTask),
								"security_protocol":             sourceTask.Get("security_protocol").Value(),
								"sasl_mechanism":                sourceTask.Get("sasl_mechanism").Value(),
								"user_name":                     sourceTask.Get("user_name").Value(),
								"direction":                     sourceTask.Get("direction").Value(),
								"sync_consumer_offsets_enabled": sourceTask.Get("sync_consumer_offsets_enabled").Value(),
								"replication_factor":            sourceTask.Get("replication_factor").Value(),
								"task_num":                      sourceTask.Get("task_num").Value(),
								"rename_topic_enabled":          sourceTask.Get("rename_topic_enabled").Value(),
								"provenance_header_enabled":     sourceTask.Get("provenance_header_enabled").Value(),
								"consumer_strategy":             sourceTask.Get("consumer_strategy").Value(),
								"compression_type":              sourceTask.Get("compression_type").Value(),
								"topics_mapping":                w.setTasSouTasTopMapping(sourceTask),
							}
						},
					),
					"destination_task": schemas.SliceToList(tasks.Get("sink_task"),
						func(destinationTask gjson.Result) any {
							return map[string]any{
								"consumer_strategy":      destinationTask.Get("consumer_strategy").Value(),
								"deliver_time_interval":  destinationTask.Get("deliver_time_interval").Value(),
								"obs_bucket_name":        destinationTask.Get("obs_bucket_name").Value(),
								"partition_format":       destinationTask.Get("partition_format").Value(),
								"obs_path":               destinationTask.Get("obs_path").Value(),
								"destination_file_type":  destinationTask.Get("destination_file_type").Value(),
								"record_delimiter":       destinationTask.Get("record_delimiter").Value(),
								"store_keys":             destinationTask.Get("store_keys").Value(),
								"obs_part_size":          destinationTask.Get("obs_part_size").Value(),
								"flush_size":             destinationTask.Get("flush_size").Value(),
								"timezone":               destinationTask.Get("timezone").Value(),
								"schema_generator_class": destinationTask.Get("schema_generator_class").Value(),
								"partitioner_class":      destinationTask.Get("partitioner_class").Value(),
								"key_converter":          destinationTask.Get("key_converter").Value(),
								"value_converter":        destinationTask.Get("value_converter").Value(),
								"kv_delimiter":           destinationTask.Get("kv_delimiter").Value(),
							}
						},
					),
					"status":     tasks.Get("status").Value(),
					"created_at": w.setTasksCreateTime(tasks),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*Kafkav2SmartConnectTasksDSWrapper) setTasksTopics(data gjson.Result) []string {
	return flattenStringWithCommaSplitToSlice(data.Get("topics").String())
}

func (*Kafkav2SmartConnectTasksDSWrapper) setTasSouTasBooServers(data gjson.Result) []string {
	return flattenStringWithCommaSplitToSlice(data.Get("bootstrap_servers").String())
}

func (*Kafkav2SmartConnectTasksDSWrapper) setTasSouTasTopMapping(data gjson.Result) []string {
	return flattenStringWithCommaSplitToSlice(data.Get("topics_mapping").String())
}

func (*Kafkav2SmartConnectTasksDSWrapper) setTasksCreateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(
		int64(data.Get("create_time").Value().(float64)/1000), false)
}
