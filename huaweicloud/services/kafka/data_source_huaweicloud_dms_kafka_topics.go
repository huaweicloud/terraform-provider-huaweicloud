// Generated by PMS #197
package kafka

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDmsKafkaTopics() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDmsKafkaTopicsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the DMS kafka instance ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the topic name.`,
			},
			"topics": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the topic list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the topic name.`,
						},
						"partitions": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of topic partitions.`,
						},
						"replicas": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of replicas.`,
						},
						"aging_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the aging time in hours.`,
						},
						"sync_replication": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the synchronous replication is enabled.`,
						},
						"sync_flushing": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the synchronous flushing is enabled.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the topic description.`,
						},
						"configs": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the other topic configurations.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the configuration name.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the configuration value.`,
									},
								},
							},
						},
						"policies_only": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether this policy is the default policy.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the topic type.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the topic create time.`,
						},
					},
				},
			},
			"max_partitions": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the total number of partitions.`,
			},
			"remain_partitions": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of remaining partitions.`,
			},
			"topic_max_partitions": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the maximum number of partitions in a single topic.`,
			},
		},
	}
}

type KafkaTopicsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newKafkaTopicsDSWrapper(d *schema.ResourceData, meta interface{}) *KafkaTopicsDSWrapper {
	return &KafkaTopicsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDmsKafkaTopicsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newKafkaTopicsDSWrapper(d, meta)
	lisInsTopRst, err := wrapper.ListInstanceTopics()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listInstanceTopicsToSchema(lisInsTopRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API Kafka GET /v2/{project_id}/instances/{instance_id}/topics
func (w *KafkaTopicsDSWrapper) ListInstanceTopics() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dmsv2")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/topics"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("topics", "offset", "limit", 0).
		Filter(
			filters.New().From("topics").
				Where("name", "contains", w.Get("name")),
		).
		OkCode(200).
		Request().
		Result()
}

func (w *KafkaTopicsDSWrapper) listInstanceTopicsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("topics", schemas.SliceToList(body.Get("topics"),
			func(topics gjson.Result) any {
				return map[string]any{
					"name":             topics.Get("name").Value(),
					"partitions":       topics.Get("partition").Value(),
					"replicas":         topics.Get("replication").Value(),
					"aging_time":       topics.Get("retention_time").Value(),
					"sync_replication": topics.Get("sync_replication").Value(),
					"sync_flushing":    topics.Get("sync_message_flush").Value(),
					"description":      topics.Get("topic_desc").Value(),
					"configs": schemas.SliceToList(topics.Get("topic_other_configs"),
						func(configs gjson.Result) any {
							return map[string]any{
								"name":  configs.Get("name").Value(),
								"value": configs.Get("value").Value(),
							}
						},
					),
					"policies_only": topics.Get("policiesOnly").Value(),
					"type":          w.setTopicsTopicType(topics),
					"created_at":    w.setTopicsCreatedAt(topics),
				}
			},
		)),
		d.Set("max_partitions", body.Get("max_partitions").Value()),
		d.Set("remain_partitions", body.Get("remain_partitions").Value()),
		d.Set("topic_max_partitions", body.Get("topic_max_partitions").Value()),
	)
	return mErr.ErrorOrNil()
}

func (*KafkaTopicsDSWrapper) setTopicsTopicType(data gjson.Result) string {
	value := data.Get("topic_type").Int()
	topicType := "common topic"
	if value == 1 {
		topicType = "system topic"
	}

	return topicType
}

func (*KafkaTopicsDSWrapper) setTopicsCreatedAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("created_at").Int())/1000, true)
}
