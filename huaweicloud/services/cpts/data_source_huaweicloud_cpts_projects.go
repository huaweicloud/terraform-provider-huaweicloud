// Generated by PMS #538
package cpts

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCptsProjects() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCptsProjectsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"projects": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The project details.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project name.`,
						},
						"source": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The project source.`,
						},
						"variables_no_file": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The file variable.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description.`,
						},
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The project ID.`,
						},
					},
				},
			},
		},
	}
}

type ProjectsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newProjectsDSWrapper(d *schema.ResourceData, meta interface{}) *ProjectsDSWrapper {
	return &ProjectsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCptsProjectsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newProjectsDSWrapper(d, meta)
	listProjectSetsRst, err := wrapper.ListProjectSets()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listProjectSetsToSchema(listProjectSetsRst)
	return diag.FromErr(err)
}

// @API CPTS GET /v1/{project_id}/test-suites
func (w *ProjectsDSWrapper) ListProjectSets() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cpts")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/test-suites"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("projects", "offset", "limit", 0).
		Request().
		Result()
}

func (w *ProjectsDSWrapper) listProjectSetsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("projects", schemas.SliceToList(body.Get("projects"),
			func(projects gjson.Result) any {
				return map[string]any{
					"name":              projects.Get("name").Value(),
					"source":            projects.Get("source").Value(),
					"variables_no_file": schemas.SliceToStrList(projects.Get("variables_no_file")),
					"created_at":        w.setCreateTimeAttribute(projects),
					"updated_at":        w.setUpdateTimeAttribute(projects),
					"description":       projects.Get("description").Value(),
					"id":                projects.Get("id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*ProjectsDSWrapper) setCreateTimeAttribute(data gjson.Result) string {
	createTime := data.Get("CreateTime").String()
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(createTime)/1000, false)
}

func (*ProjectsDSWrapper) setUpdateTimeAttribute(data gjson.Result) string {
	updateTime := data.Get("UpdateTime").String()
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(updateTime)/1000, false)
}
