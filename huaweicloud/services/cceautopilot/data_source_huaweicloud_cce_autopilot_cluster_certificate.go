// Generated by PMS #490
package cceautopilot

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCceAutopilotClusterCertificate() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCceAutopilotClusterCertificateRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the cluster ID to which the cluster certificate belongs.`,
			},
			"duration": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: `Specifies the duration of the cluster certificate.`,
			},
			"kube_config_raw": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Raw Kubernetes config to be used by kubectl and other compatible tools.`,
			},
			"clusters": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The clusters information of the cluster certificate.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster name of the cluster certificate.`,
						},
						"cluster": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The cluster information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"server": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The server address of the cluster certificate.`,
									},
									"certificate_authority_data": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The certificate authority data of the cluster certificate.`,
									},
									"insecure_skip_tls_verify": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Whether insecure skip tls verify of the cluster certificate.`,
									},
								},
							},
						},
					},
				},
			},
			"users": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The users information of cluster the certificate.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The user name of the cluster certificate.`,
						},
						"user": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The user information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"client_certificate_data": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The client certificate data of the cluster certificate.`,
									},
									"client_key_data": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The client key data of the cluster certificate.`,
									},
								},
							},
						},
					},
				},
			},
			"contexts": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The contexts information of the cluster certificate.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The context name of the cluster certificate.`,
						},
						"context": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The user information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"cluster": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The context cluster of the cluster certificate.`,
									},
									"user": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The context user of the cluster certificate.`,
									},
								},
							},
						},
					},
				},
			},
			"current_context": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The current context of the cluster certificate.`,
			},
		},
	}
}

type ClusterCertificateDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newClusterCertificateDSWrapper(d *schema.ResourceData, meta interface{}) *ClusterCertificateDSWrapper {
	return &ClusterCertificateDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCceAutopilotClusterCertificateRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newClusterCertificateDSWrapper(d, meta)
	creAutKubCluCerRst, err := wrapper.CreateAutopilotKubernetesClusterCert()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.createAutopilotKubernetesClusterCertToSchema(creAutKubCluCerRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CCE POST /autopilot/v3/projects/{project_id}/clusters/{cluster_id}/clustercert
func (w *ClusterCertificateDSWrapper) CreateAutopilotKubernetesClusterCert() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cce")
	if err != nil {
		return nil, err
	}

	uri := "/autopilot/v3/projects/{project_id}/clusters/{cluster_id}/clustercert"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	params := map[string]any{
		"duration": w.Get("duration"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("POST").
		URI(uri).
		Body(params).
		Request().
		Result()
}

func (w *ClusterCertificateDSWrapper) createAutopilotKubernetesClusterCertToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("kube_config_raw", utils.JsonToString(body.Value())),
		d.Set("clusters", schemas.SliceToList(body.Get("clusters"),
			func(clusters gjson.Result) any {
				return map[string]any{
					"name": clusters.Get("name").Value(),
					"cluster": schemas.SliceToList(clusters.Get("cluster"),
						func(cluster gjson.Result) any {
							return map[string]any{
								"server":                     cluster.Get("server").Value(),
								"certificate_authority_data": cluster.Get("certificate-authority-data").Value(),
								"insecure_skip_tls_verify":   cluster.Get("insecure-skip-tls-verify").Value(),
							}
						},
					),
				}
			},
		)),
		d.Set("users", schemas.SliceToList(body.Get("users"),
			func(users gjson.Result) any {
				return map[string]any{
					"name": users.Get("name").Value(),
					"user": schemas.SliceToList(users.Get("user"),
						func(user gjson.Result) any {
							return map[string]any{
								"client_certificate_data": user.Get("client-certificate-data").Value(),
								"client_key_data":         user.Get("client-key-data").Value(),
							}
						},
					),
				}
			},
		)),
		d.Set("contexts", schemas.SliceToList(body.Get("contexts"),
			func(contexts gjson.Result) any {
				return map[string]any{
					"name": contexts.Get("name").Value(),
					"context": schemas.SliceToList(contexts.Get("context"),
						func(context gjson.Result) any {
							return map[string]any{
								"cluster": context.Get("cluster").Value(),
								"user":    context.Get("user").Value(),
							}
						},
					),
				}
			},
		)),
		d.Set("current_context", body.Get("current-context").Value()),
	)
	return mErr.ErrorOrNil()
}
