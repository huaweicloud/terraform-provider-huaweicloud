// Generated by PMS #482
package cceautopilot

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCceAutopilotAddonTemplates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCceAutopilotAddonTemplatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"addon_template_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the add-on.`,
			},
			"templates": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of add-on templates.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"alias": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The add-on alias.`,
						},
						"annotations": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The add-on annotations in the format of key-value pairs.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the add-on template.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the add-on.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the add-on.`,
						},
						"versions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The versions of the add-on.`,
							Elem:        versionsElem(),
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the add-on template.`,
						},
						"require": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the add-on is required.`,
						},
						"labels": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The labels of the add-on.`,
						},
					},
				},
			},
		},
	}
}

// versionsElem
// The Elem of "versions"
func versionsElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"input": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The install parameters of the add-on.`,
			},
			"stable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether the version is stable.`,
			},
			"support_versions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of supported cluster versions.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cluster_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The supported cluster type.`,
						},
						"cluster_version": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The supported cluster version.`,
						},
					},
				},
			},
			"version": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The add-on version.`,
			},
		},
	}
}

type AddonTemplatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAddonTemplatesDSWrapper(d *schema.ResourceData, meta interface{}) *AddonTemplatesDSWrapper {
	return &AddonTemplatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCceAutopilotAddonTemplatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAddonTemplatesDSWrapper(d, meta)
	lisAutAddTemRst, err := wrapper.ListAutopilotAddonTemplates()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAutopilotAddonTemplatesToSchema(lisAutAddTemRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CCE GET /autopilot/v3/addontemplates
func (w *AddonTemplatesDSWrapper) ListAutopilotAddonTemplates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cce")
	if err != nil {
		return nil, err
	}

	uri := "/autopilot/v3/addontemplates"
	params := map[string]any{
		"addon_template_name": w.Get("addon_template_name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *AddonTemplatesDSWrapper) listAutopilotAddonTemplatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("templates", schemas.SliceToList(body.Get("items"),
			func(templates gjson.Result) any {
				return map[string]any{
					"alias":       templates.Get("metadata.alias").Value(),
					"annotations": schemas.MapToStrMap(templates.Get("metadata.annotations")),
					"id":          templates.Get("metadata.uid").Value(),
					"name":        templates.Get("metadata.name").Value(),
					"description": templates.Get("spec.description").Value(),
					"versions":    w.setItemsSpecVersions(templates),
					"type":        templates.Get("spec.type").Value(),
					"require":     templates.Get("spec.require").Value(),
					"labels":      schemas.SliceToStrList(templates.Get("spec.labels")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AddonTemplatesDSWrapper) setIteSpeVerInput(data gjson.Result) string {
	return utils.JsonToString(data.Get("input").Value())
}

func (w *AddonTemplatesDSWrapper) setItemsSpecVersions(templates gjson.Result) any {
	return schemas.SliceToList(templates.Get("spec.versions"), func(versions gjson.Result) any {
		return map[string]any{
			"input":  w.setIteSpeVerInput(versions),
			"stable": versions.Get("stable").Value(),
			"support_versions": schemas.SliceToList(versions.Get("supportVersions"),
				func(supportVersions gjson.Result) any {
					return map[string]any{
						"cluster_type":    supportVersions.Get("clusterType").Value(),
						"cluster_version": schemas.SliceToStrList(supportVersions.Get("clusterVersion")),
					}
				},
			),
			"version": versions.Get("version").Value(),
		}
	})
}
