// Generated by PMS #330
package waf

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWafSourceIps() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafSourceIpsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"source_ips": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Origin server information list`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"ips": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `WAF retrieval IP addresses.`,
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time the WAF IP addresses are updated.`,
						},
					},
				},
			},
		},
	}
}

type SourceIpsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSourceIpsDSWrapper(d *schema.ResourceData, meta interface{}) *SourceIpsDSWrapper {
	return &SourceIpsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafSourceIpsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSourceIpsDSWrapper(d, meta)
	showSourceIpRst, err := wrapper.ShowSourceIp()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showSourceIpToSchema(showSourceIpRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API WAF GET /v1/{project_id}/waf/config/source-ip
func (w *SourceIpsDSWrapper) ShowSourceIp() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "waf")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/waf/config/source-ip"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SourceIpsDSWrapper) showSourceIpToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("source_ips", schemas.SliceToList(body.Get("source_ip"),
			func(sourceIp gjson.Result) any {
				return map[string]any{
					"ips":         schemas.SliceToStrList(sourceIp.Get("ips")),
					"update_time": w.setSourceIpUpdateTime(sourceIp),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*SourceIpsDSWrapper) setSourceIpUpdateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("update_time").Int()/1000, false)
}
