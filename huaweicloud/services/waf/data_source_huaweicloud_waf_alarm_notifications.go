// Generated by PMS #647
package waf

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWafAlarmNotifications() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafAlarmNotificationsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			// This parameter does not take effect due to the API itself.
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID to which the alarm notification`,
			},
			"items": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of alarm notifications.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the alarm notification.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the alarm notification.`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable the  alarm notification.`,
						},
						"notice_class": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the  alarm notification.`,
						},
						"times": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The alarm times of the notification alarm.`,
						},
						"sendfreq": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The alarm frequency of the alarm notification, in minutes.`,
						},
						"topic_urn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The theme URN of the SMN associated with the alarm notification.`,
						},
						"locale": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The language type.`,
						},
						"threat": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The type of the event which triggered the alarm.`,
						},
						"nearly_expired_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The advance notification days.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID to which the alarm notification belongs.`,
						},
						"is_all_enterprise_project": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether all enterprise projects are involved.`,
						},
						"update_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The latest update time of the alarm notification.`,
						},
					},
				},
			},
		},
	}
}

type AlarmNotificationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAlarmNotificationsDSWrapper(d *schema.ResourceData, meta interface{}) *AlarmNotificationsDSWrapper {
	return &AlarmNotificationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafAlarmNotificationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAlarmNotificationsDSWrapper(d, meta)
	listNoticeConfigsRst, err := wrapper.ListNoticeConfigs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listNoticeConfigsToSchema(listNoticeConfigsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API WAF GET /v2/{project_id}/waf/alerts
func (w *AlarmNotificationsDSWrapper) ListNoticeConfigs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "waf")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/waf/alerts"
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *AlarmNotificationsDSWrapper) listNoticeConfigsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("items", schemas.SliceToList(body.Get("items"),
			func(items gjson.Result) any {
				return map[string]any{
					"id":                        items.Get("id").Value(),
					"name":                      items.Get("name").Value(),
					"enabled":                   items.Get("enabled").Value(),
					"notice_class":              items.Get("notice_class").Value(),
					"times":                     items.Get("times").Value(),
					"sendfreq":                  items.Get("sendfreq").Value(),
					"topic_urn":                 items.Get("topic_urn").Value(),
					"locale":                    items.Get("locale").Value(),
					"threat":                    schemas.SliceToStrList(items.Get("threat")),
					"nearly_expired_time":       items.Get("nearly_expired_time").Value(),
					"enterprise_project_id":     items.Get("enterprise_project_id").Value(),
					"is_all_enterprise_project": items.Get("is_all_enterprise_project").Value(),
					"update_time":               items.Get("update_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
