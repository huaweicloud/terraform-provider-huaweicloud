// Generated by PMS #648
package waf

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceWafConfig() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafConfigRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"eps": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether EPS is supported.`,
			},
			"tls": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether to support the TLS version.`,
			},
			"ipv6": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether IPv6 protection is supported.`,
			},
			"alert": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether alarm reporting is supported.`,
			},
			"custom": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether precise protection is supported.`,
			},
			"elb_mode": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether ELB mode is supported.`,
			},
			"event_lts": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether LTS logging is supported.`,
			},
			"multi_dns": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether multi-DNS resolution is supported.`,
			},
			"search_ip": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether IP address search is supported.`,
			},
			"cc_enhance": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether CC attack protection is supported.`,
			},
			"cname_switch": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether CNAME switchover is supported.`,
			},
			"custom_block": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether custom block page is supported.`,
			},
			"advanced_ignore": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether false alarm masking is supported.`,
			},
			"js_crawler_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether JS anti-crawler is supported.`,
			},
			"deep_decode_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether deep inspection in basic web protection is supported.`,
			},
			"overview_bandwidth": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether security overview bandwidth statistics is supported.`,
			},
			"proxy_use_oldcname": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether old cname resolution is supported.`,
			},
			"check_all_headers_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether all header inspection is supported.`,
			},
			"geoip_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether to support geolocation access control.`,
			},
			"load_balance_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether to support domain name access load balancing.`,
			},
			"ipv6_protection_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether IPv6 protection is supported.`,
			},
			"policy_sharing_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether to support policy sharing.`,
			},
			"ip_group": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether the IP address group is supported.`,
			},
			"robot_action_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether to support website anti-crawler.`,
			},
			"http2_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether to support HTTP2.`,
			},
			"timeout_config_enable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether to support the timeout configuration.`,
			},
		},
	}
}

type ConfigDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newConfigDSWrapper(d *schema.ResourceData, meta interface{}) *ConfigDSWrapper {
	return &ConfigDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafConfigRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newConfigDSWrapper(d, meta)
	showConsoleConfigRst, err := wrapper.ShowConsoleConfig()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showConsoleConfigToSchema(showConsoleConfigRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API WAF GET /v1/{project_id}/waf/config/console
func (w *ConfigDSWrapper) ShowConsoleConfig() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "waf")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/waf/config/console"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *ConfigDSWrapper) showConsoleConfigToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("eps", body.Get("eps").Value()),
		d.Set("tls", body.Get("tls").Value()),
		d.Set("ipv6", body.Get("ipv6").Value()),
		d.Set("alert", body.Get("alert").Value()),
		d.Set("custom", body.Get("custom").Value()),
		d.Set("elb_mode", body.Get("elb_mode").Value()),
		d.Set("event_lts", body.Get("event_lts").Value()),
		d.Set("multi_dns", body.Get("multi_dns").Value()),
		d.Set("search_ip", body.Get("search_ip").Value()),
		d.Set("cc_enhance", body.Get("cc_enhance").Value()),
		d.Set("cname_switch", body.Get("cname_switch").Value()),
		d.Set("custom_block", body.Get("custom_block").Value()),
		d.Set("advanced_ignore", body.Get("advanced_ignore").Value()),
		d.Set("js_crawler_enable", body.Get("js_crawler_enable").Value()),
		d.Set("deep_decode_enable", body.Get("deep_decode_enable").Value()),
		d.Set("overview_bandwidth", body.Get("overview_bandwidth").Value()),
		d.Set("proxy_use_oldcname", body.Get("proxy_use_oldcname").Value()),
		d.Set("check_all_headers_enable", body.Get("check_all_headers_enable").Value()),
		d.Set("geoip_enable", body.Get("geoip_enable").Value()),
		d.Set("load_balance_enable", body.Get("load_balance_enable").Value()),
		d.Set("ipv6_protection_enable", body.Get("ipv6_protection_enable").Value()),
		d.Set("policy_sharing_enable", body.Get("policy_sharing_enable").Value()),
		d.Set("ip_group", body.Get("ip_group").Value()),
		d.Set("robot_action_enable", body.Get("robot_action_enable").Value()),
		d.Set("http2_enable", body.Get("http2_enable").Value()),
		d.Set("timeout_config_enable", body.Get("timeout_config_enable").Value()),
	)
	return mErr.ErrorOrNil()
}
