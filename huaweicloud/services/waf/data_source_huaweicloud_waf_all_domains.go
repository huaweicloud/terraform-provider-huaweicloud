// Generated by PMS #661
package waf

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWafAllDomains() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafAllDomainsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"hostname": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the domain.`,
			},
			"policyname": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the policy.`,
			},
			"protect_status": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the protection status of the domain.`,
			},
			"waf_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the WAF mode of the domain.`,
			},
			"is_https": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether HTTPS is used for the domain.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"items": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The details about the protected domain.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the domain.`,
						},
						"hostname": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the domain.`,
						},
						"policyid": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the policy.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the domain.`,
						},
						"protect_status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The protection status of the domain.`,
						},
						"access_status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The domain name access status.`,
						},
						"access_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cname prefix.`,
						},
						"proxy": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether a proxy is used for the domain.`,
						},
						"web_tag": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The website name.`,
						},
						"paid_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The package billing mode. The value can be prePaid or postPaid.`,
						},
						"waf_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The mode of the domain.`,
						},
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The region ID.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID.`,
						},
						"timestamp": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The creation time of the domain.`,
						},
						"flag": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The special identifier, which is used on the console.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"pci_3ds": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Whether the website passes the PCI 3DS certification check.`,
									},
									"pci_dss": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Whether the website passed the PCI DSS certification check.`,
									},
									"cname": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The cname record being used.`,
									},
									"ipv6": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Whether IPv6 protection is supported.`,
									},
									"is_dual_az": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Whether WAF support Multi-AZ mode.`,
									},
								},
							},
						},
						"server": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The origin server settings of the domain.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"front_protocol": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The protocol used by the client to request access to the origin server.`,
									},
									"back_protocol": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The protocol used by WAF to forward client requests it received to origin servers.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The origin server type.`,
									},
									"port": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The port used by WAF to forward client requests to the origin server.`,
									},
									"address": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The IP address of origin server requested by the client.`,
									},
									"weight": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The weight of the origin server.`,
									},
									"vpc_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The VPC ID.`,
									},
								},
							},
						},
						"access_progress": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The access progress.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"status": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The status of the access. The value can be **0** or **1**.`,
									},
									"step": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The procedure.`,
									},
								},
							},
						},
						"premium_waf_instances": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of dedicated WAF instances.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of the dedicated WAF instance.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the dedicated WAF instance.`,
									},
									"accessed": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Whether the domain name is added to the dedicated WAF instance.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type AllDomainsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAllDomainsDSWrapper(d *schema.ResourceData, meta interface{}) *AllDomainsDSWrapper {
	return &AllDomainsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafAllDomainsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAllDomainsDSWrapper(d, meta)
	lisComHosRst, err := wrapper.ListCompositeHosts()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCompositeHostsToSchema(lisComHosRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API WAF GET /v1/{project_id}/composite-waf/host
func (w *AllDomainsDSWrapper) ListCompositeHosts() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "waf")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/composite-waf/host"
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"hostname":              w.Get("hostname"),
		"policyname":            w.Get("policyname"),
		"protect_status":        w.Get("protect_status"),
		"waf_type":              w.Get("waf_type"),
		"is_https":              w.Get("is_https"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		PageSizePager("items", "page", "pagesize", 0).
		Request().
		Result()
}

func (w *AllDomainsDSWrapper) listCompositeHostsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("items", schemas.SliceToList(body.Get("items"),
			func(items gjson.Result) any {
				return map[string]any{
					"id":                    items.Get("id").Value(),
					"hostname":              items.Get("hostname").Value(),
					"policyid":              items.Get("policyid").Value(),
					"description":           items.Get("description").Value(),
					"protect_status":        items.Get("protect_status").Value(),
					"access_status":         items.Get("access_status").Value(),
					"access_code":           items.Get("access_code").Value(),
					"proxy":                 items.Get("proxy").Value(),
					"web_tag":               items.Get("web_tag").Value(),
					"paid_type":             items.Get("paid_type").Value(),
					"waf_type":              items.Get("waf_type").Value(),
					"region":                items.Get("region").Value(),
					"enterprise_project_id": items.Get("enterprise_project_id").Value(),
					"timestamp":             items.Get("timestamp").Value(),
					"flag": schemas.SliceToList(items.Get("flag"),
						func(flag gjson.Result) any {
							return map[string]any{
								"pci_3ds":    flag.Get("pci_3ds").Value(),
								"pci_dss":    flag.Get("pci_dss").Value(),
								"cname":      flag.Get("cname").Value(),
								"ipv6":       flag.Get("ipv6").Value(),
								"is_dual_az": flag.Get("is_dual_az").Value(),
							}
						},
					),
					"server": schemas.SliceToList(items.Get("server"),
						func(server gjson.Result) any {
							return map[string]any{
								"front_protocol": server.Get("front_protocol").Value(),
								"back_protocol":  server.Get("back_protocol").Value(),
								"type":           server.Get("type").Value(),
								"port":           server.Get("port").Value(),
								"address":        server.Get("address").Value(),
								"weight":         server.Get("weight").Value(),
								"vpc_id":         server.Get("vpc_id").Value(),
							}
						},
					),
					"access_progress": schemas.SliceToList(items.Get("access_progress"),
						func(accessProgress gjson.Result) any {
							return map[string]any{
								"status": accessProgress.Get("status").Value(),
								"step":   accessProgress.Get("step").Value(),
							}
						},
					),
					"premium_waf_instances": schemas.SliceToList(items.Get("premium_waf_instances"),
						func(premiumWafInstances gjson.Result) any {
							return map[string]any{
								"id":       premiumWafInstances.Get("id").Value(),
								"name":     premiumWafInstances.Get("name").Value(),
								"accessed": premiumWafInstances.Get("accessed").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
