// Generated by PMS #660
package waf

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWafOverviewsClassification() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafOverviewsClassificationRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"from": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: `Specifies the query start time.`,
			},
			"to": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: `Specifies the query end time.`,
			},
			"top": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `The first several results to query.`,
			},
			"hosts": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the domain.`,
			},
			"instances": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the instance.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"domain": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The attacked domain.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"items": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The attacked domain details.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the domain.`,
									},
									"num": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of times attacked.`,
									},
									"web_tag": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The website name.`,
									},
								},
							},
						},
					},
				},
			},
			"attack_type": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The attack event distribution.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"items": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The attack event details.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The attack type.`,
									},
									"num": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of attack event.`,
									},
								},
							},
						},
					},
				},
			},
			"ip": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The attacking source IP address.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"items": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The IP details.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The IP address.`,
									},
									"num": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of the attacking IP address.`,
									},
								},
							},
						},
					},
				},
			},
			"url": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The attacking URL.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"items": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The URL details.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The URL path.`,
									},
									"num": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of the attacking URL.`,
									},
									"host": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The domain name.`,
									},
								},
							},
						},
					},
				},
			},
			"geo": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The attacking source region.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"items": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The source region details.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The source region.`,
									},
									"num": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of the attacking source region.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type OverviewsClassificationDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOverviewsClassificationDSWrapper(d *schema.ResourceData, meta interface{}) *OverviewsClassificationDSWrapper {
	return &OverviewsClassificationDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafOverviewsClassificationRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOverviewsClassificationDSWrapper(d, meta)
	lisOveClaRst, err := wrapper.ListOverviewsClassification()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listOverviewsClassificationToSchema(lisOveClaRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API WAF GET /v1/{project_id}/waf/overviews/classification
func (w *OverviewsClassificationDSWrapper) ListOverviewsClassification() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "waf")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/waf/overviews/classification"
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"from":                  w.Get("from"),
		"to":                    w.Get("to"),
		"top":                   w.Get("top"),
		"hosts":                 w.Get("hosts"),
		"instances":             w.Get("instances"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *OverviewsClassificationDSWrapper) listOverviewsClassificationToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("domain", schemas.ObjectToList(body.Get("domain"),
			func(domain gjson.Result) any {
				return map[string]any{
					"items": schemas.SliceToList(domain.Get("items"),
						func(items gjson.Result) any {
							return map[string]any{
								"key":     items.Get("key").Value(),
								"num":     items.Get("num").Value(),
								"web_tag": items.Get("web_tag").Value(),
							}
						},
					),
				}
			},
		)),
		d.Set("attack_type", schemas.ObjectToList(body.Get("attack_type"),
			func(attackType gjson.Result) any {
				return map[string]any{
					"items": schemas.SliceToList(attackType.Get("items"),
						func(items gjson.Result) any {
							return map[string]any{
								"key": items.Get("key").Value(),
								"num": items.Get("num").Value(),
							}
						},
					),
				}
			},
		)),
		d.Set("ip", schemas.ObjectToList(body.Get("ip"),
			func(ip gjson.Result) any {
				return map[string]any{
					"items": schemas.SliceToList(ip.Get("items"),
						func(items gjson.Result) any {
							return map[string]any{
								"key": items.Get("key").Value(),
								"num": items.Get("num").Value(),
							}
						},
					),
				}
			},
		)),
		d.Set("url", schemas.ObjectToList(body.Get("url"),
			func(url gjson.Result) any {
				return map[string]any{
					"items": schemas.SliceToList(url.Get("items"),
						func(items gjson.Result) any {
							return map[string]any{
								"key":  items.Get("key").Value(),
								"num":  items.Get("num").Value(),
								"host": items.Get("host").Value(),
							}
						},
					),
				}
			},
		)),
		d.Set("geo", schemas.ObjectToList(body.Get("geo"),
			func(geo gjson.Result) any {
				return map[string]any{
					"items": schemas.SliceToList(geo.Get("items"),
						func(items gjson.Result) any {
							return map[string]any{
								"key": items.Get("key").Value(),
								"num": items.Get("num").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
