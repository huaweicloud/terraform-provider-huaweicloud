// Generated by PMS #98
package dns

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceNameservers() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceNameserversRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `The region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The type of the name server.`,
			},
			"server_region": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The region to which the name server belongs.`,
			},
			"nameservers": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All name servers that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the name server.`,
						},
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The region where the name server is located.`,
						},
						"ns_records": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of name servers.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"hostname": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The host name of the public name server.`,
									},
									"address": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The  address of the private name server.`,
									},
									"priority": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The priority of  the name server.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type NameserversDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newNameserversDSWrapper(d *schema.ResourceData, meta interface{}) *NameserversDSWrapper {
	return &NameserversDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceNameserversRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newNameserversDSWrapper(d, meta)
	lisNamSerRst, err := wrapper.ListNameServers()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listNameServersToSchema(lisNamSerRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DNS GET /v2/nameservers
func (w *NameserversDSWrapper) ListNameServers() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dns_region")
	if err != nil {
		return nil, err
	}

	uri := "/v2/nameservers"
	params := map[string]any{
		"type":   w.Get("type"),
		"region": w.Get("server_region"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *NameserversDSWrapper) listNameServersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("nameservers", schemas.SliceToList(body.Get("nameservers"),
			func(nameserver gjson.Result) any {
				return map[string]any{
					"type":   nameserver.Get("type").Value(),
					"region": nameserver.Get("region").Value(),
					"ns_records": schemas.SliceToList(nameserver.Get("ns_records"),
						func(nsRecord gjson.Result) any {
							return map[string]any{
								"hostname": nsRecord.Get("hostname").Value(),
								"address":  nsRecord.Get("address").Value(),
								"priority": nsRecord.Get("priority").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
