// Generated by PMS #834
package dns

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDNSEndpointVpcs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDNSEndpointVpcsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"vpc_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the VPC to be queried.`,
			},
			"vpcs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the VPCs of an endpoint.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the VPC ID, which is a UUID used to identify the VPC.`,
						},
						"inbound_endpoint_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of inbound endpoints in a VPC.`,
						},
						"outbound_endpoint_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of outbound endpoints in a VPC.`,
						},
					},
				},
			},
		},
	}
}

type EndpointVpcsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newEndpointVpcsDSWrapper(d *schema.ResourceData, meta interface{}) *EndpointVpcsDSWrapper {
	return &EndpointVpcsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDNSEndpointVpcsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newEndpointVpcsDSWrapper(d, meta)
	listEndpointVpcsRst, err := wrapper.ListEndpointVpcs()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listEndpointVpcsToSchema(listEndpointVpcsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DNS GET /v2.1/vpcs
func (w *EndpointVpcsDSWrapper) ListEndpointVpcs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dns_region")
	if err != nil {
		return nil, err
	}

	uri := "/v2.1/vpcs"
	params := map[string]any{
		"vpc_id": w.Get("vpc_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("vpcs", "offset", "limit", 0).
		Request().
		Result()
}

func (w *EndpointVpcsDSWrapper) listEndpointVpcsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("vpcs", schemas.SliceToList(body.Get("vpcs"),
			func(vpcs gjson.Result) any {
				return map[string]any{
					"id":                      vpcs.Get("id").Value(),
					"inbound_endpoint_count":  vpcs.Get("inbound_endpoint_count").Value(),
					"outbound_endpoint_count": vpcs.Get("outbound_endpoint_count").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
