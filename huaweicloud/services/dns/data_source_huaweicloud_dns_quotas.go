// Generated by PMS #207
package dns

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceQuotas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceQuotasRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"domain_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specified the account ID of IAM user.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource type.`,
			},
			"quotas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All quotas that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource type corresponding to quota.`,
						},
						"max": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The maximum quota of resource.`,
						},
						"used": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The used quota of resource.`,
						},
						"unit": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The unit of the quota.`,
						},
					},
				},
			},
		},
	}
}

type QuotasDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newQuotasDSWrapper(d *schema.ResourceData, meta interface{}) *QuotasDSWrapper {
	return &QuotasDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceQuotasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newQuotasDSWrapper(d, meta)
	showDomainQuotaRst, err := wrapper.ShowDomainQuota()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showDomainQuotaToSchema(showDomainQuotaRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DNS GET /v2/quotamg/dns/quotas
func (w *QuotasDSWrapper) ShowDomainQuota() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dns_region")
	if err != nil {
		return nil, err
	}

	uri := "/v2/quotamg/dns/quotas"
	params := map[string]any{
		"domain_id": w.Get("domain_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Filter(
			filters.New().From("quotas").
				Where("quota_key", "=", w.Get("type")),
		).
		Request().
		Result()
}

func (w *QuotasDSWrapper) showDomainQuotaToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("quotas", schemas.SliceToList(body.Get("quotas"),
			func(quotas gjson.Result) any {
				return map[string]any{
					"type": quotas.Get("quota_key").Value(),
					"max":  quotas.Get("quota_limit").Value(),
					"used": quotas.Get("used").Value(),
					"unit": quotas.Get("unit").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
