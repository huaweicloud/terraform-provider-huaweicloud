// Generated by PMS #76
package dns

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceLineGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceLineGroupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `The region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"line_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The ID of the line group. Fuzzy search is supported.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The name of the line group. Fuzzy search is supported.`,
			},
			"groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the line groups.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the line group.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the line group.`,
						},
						"lines": {
							Type:        schema.TypeSet,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The list of the resolution line IDs corresponding to line group.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the line group.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current status of the line group.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the line group.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the line group.`,
						},
					},
				},
			},
		},
	}
}

type LineGroupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newLineGroupsDSWrapper(d *schema.ResourceData, meta interface{}) *LineGroupsDSWrapper {
	return &LineGroupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceLineGroupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newLineGroupsDSWrapper(d, meta)
	lisLinGroRst, err := wrapper.ListLineGroups()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listLineGroupsToSchema(lisLinGroRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DNS GET /v2.1/linegroups
func (w *LineGroupsDSWrapper) ListLineGroups() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dns_region")
	if err != nil {
		return nil, err
	}

	uri := "/v2.1/linegroups"
	params := map[string]any{
		"line_id": w.Get("line_id"),
		"name":    w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("linegroups", "offset", "limit", 0).
		Request().
		Result()
}

func (w *LineGroupsDSWrapper) listLineGroupsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("groups", schemas.SliceToList(body.Get("linegroups"),
			func(group gjson.Result) any {
				return map[string]any{
					"id":          group.Get("line_id").Value(),
					"name":        group.Get("name").Value(),
					"lines":       schemas.SliceToStrList(group.Get("lines")),
					"description": group.Get("description").Value(),
					"status":      group.Get("status").Value(),
					"created_at":  group.Get("created_at").Value(),
					"updated_at":  group.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
