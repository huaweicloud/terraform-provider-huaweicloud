// Generated by PMS #839
package dns

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDNSPublicZoneLines() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDNSPublicZoneLinesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"zone_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the zone ID.`,
			},
			"lines": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the lines.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the line ID.`,
						},
						"line": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the line name.`,
						},
						"create_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.`,
						},
					},
				},
			},
		},
	}
}

type PublicZoneLinesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPublicZoneLinesDSWrapper(d *schema.ResourceData, meta interface{}) *PublicZoneLinesDSWrapper {
	return &PublicZoneLinesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDNSPublicZoneLinesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPublicZoneLinesDSWrapper(d, meta)
	lisPubZonLinRst, err := wrapper.ListPublicZoneLines()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listPublicZoneLinesToSchema(lisPubZonLinRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DNS GET /v2.1/zones/{zone_id}/lines
func (w *PublicZoneLinesDSWrapper) ListPublicZoneLines() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dns_region")
	if err != nil {
		return nil, err
	}

	uri := "/v2.1/zones/{zone_id}/lines"
	uri = strings.ReplaceAll(uri, "{zone_id}", w.Get("zone_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("lines", "offset", "limit", 0).
		Request().
		Result()
}

func (w *PublicZoneLinesDSWrapper) listPublicZoneLinesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("lines", schemas.SliceToList(body.Get("lines"),
			func(lines gjson.Result) any {
				return map[string]any{
					"id":          lines.Get("id").Value(),
					"line":        lines.Get("line").Value(),
					"create_time": lines.Get("create_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
