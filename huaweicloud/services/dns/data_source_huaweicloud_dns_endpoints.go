// Generated by PMS #830
package dns

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDNSEndpoints() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDNSEndpointsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"direction": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the direction of the endpoint.`,
			},
			"vpc_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the VPC to which the endpoint belongs.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the endpoint.`,
			},
			"endpoints": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the returned endpoints.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the endpoint ID, which is a UUID used to identify the endpoint.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the endpoint name.`,
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the VPC to which the endpoint belongs.`,
						},
						"direction": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the direction of the endpoint.`,
						},
						"ipaddress_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of IP addresses of the endpoint.`,
						},
						"resolver_rule_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of endpoint rules in the endpoint.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource status.`,
						},
						"create_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.`,
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.`,
						},
					},
				},
			},
		},
	}
}

type EndpointsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newEndpointsDSWrapper(d *schema.ResourceData, meta interface{}) *EndpointsDSWrapper {
	return &EndpointsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDNSEndpointsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newEndpointsDSWrapper(d, meta)
	listEndpointsRst, err := wrapper.ListEndpoints()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listEndpointsToSchema(listEndpointsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DNS GET /v2.1/endpoints
func (w *EndpointsDSWrapper) ListEndpoints() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dns_region")
	if err != nil {
		return nil, err
	}

	uri := "/v2.1/endpoints"
	params := map[string]any{
		"direction": w.Get("direction"),
		"vpc_id":    w.Get("vpc_id"),
		"name":      w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("endpoints", "offset", "limit", 0).
		Request().
		Result()
}

func (w *EndpointsDSWrapper) listEndpointsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("endpoints", schemas.SliceToList(body.Get("endpoints"),
			func(endpoints gjson.Result) any {
				return map[string]any{
					"id":                  endpoints.Get("id").Value(),
					"name":                endpoints.Get("name").Value(),
					"vpc_id":              endpoints.Get("vpc_id").Value(),
					"direction":           endpoints.Get("direction").Value(),
					"ipaddress_count":     endpoints.Get("ipaddress_count").Value(),
					"resolver_rule_count": endpoints.Get("resolver_rule_count").Value(),
					"status":              endpoints.Get("status").Value(),
					"create_time":         endpoints.Get("create_time").Value(),
					"update_time":         endpoints.Get("update_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
