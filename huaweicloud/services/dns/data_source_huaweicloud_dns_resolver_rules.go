// Generated by PMS #835
package dns

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDNSResolverRules() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDNSResolverRulesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"domain_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the domain name of the endpoint rule to be queried.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the endpoint rule to be queried.`,
			},
			"endpoint_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the endpoint ID.`,
			},
			"resolver_rule_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of an endpoint rule.`,
			},
			"resolver_rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of endpoint rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of an endpoint rule.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the rule name.`,
						},
						"endpoint_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the endpoint to which the current rule belongs.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource status.`,
						},
						"rule_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the rule type.`,
						},
						"routers": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the VPC associated with the endpoint rule.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"router_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the associated VPC.`,
									},
									"router_region": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the region where the associated VPC is located.`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the resource status.`,
									},
								},
							},
						},
						"domain_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the domain name.`,
						},
						"ipaddress_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of IP addresses in the endpoint rule.`,
						},
						"create_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.`,
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.`,
						},
					},
				},
			},
		},
	}
}

type ResolverRulesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newResolverRulesDSWrapper(d *schema.ResourceData, meta interface{}) *ResolverRulesDSWrapper {
	return &ResolverRulesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDNSResolverRulesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newResolverRulesDSWrapper(d, meta)
	listResolverRulesRst, err := wrapper.ListResolverRules()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listResolverRulesToSchema(listResolverRulesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API DNS GET /v2.1/resolverrules
func (w *ResolverRulesDSWrapper) ListResolverRules() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dns_region")
	if err != nil {
		return nil, err
	}

	uri := "/v2.1/resolverrules"
	params := map[string]any{
		"domain_name": w.Get("domain_name"),
		"name":        w.Get("name"),
		"endpoint_id": w.Get("endpoint_id"),
		"id":          w.Get("resolver_rule_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("resolver_rules", "offset", "limit", 0).
		Request().
		Result()
}

func (w *ResolverRulesDSWrapper) listResolverRulesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("resolver_rules", schemas.SliceToList(body.Get("resolver_rules"),
			func(resolverRules gjson.Result) any {
				return map[string]any{
					"id":          resolverRules.Get("id").Value(),
					"name":        resolverRules.Get("name").Value(),
					"endpoint_id": resolverRules.Get("endpoint_id").Value(),
					"status":      resolverRules.Get("status").Value(),
					"rule_type":   resolverRules.Get("rule_type").Value(),
					"routers": schemas.SliceToList(resolverRules.Get("routers"),
						func(routers gjson.Result) any {
							return map[string]any{
								"router_id":     routers.Get("router_id").Value(),
								"router_region": routers.Get("router_region").Value(),
								"status":        routers.Get("status").Value(),
							}
						},
					),
					"domain_name":     resolverRules.Get("domain_name").Value(),
					"ipaddress_count": resolverRules.Get("ipaddress_count").Value(),
					"create_time":     resolverRules.Get("create_time").Value(),
					"update_time":     resolverRules.Get("update_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
