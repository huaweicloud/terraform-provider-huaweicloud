// Generated by PMS #374
package dbss

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDbssInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDbssInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instances": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The instance information list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The instance name.`,
						},
						"remain_days": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Days to expiry.`,
						},
						"availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The availability zone.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource ID.`,
						},
						"resource_spec_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The instance specifications.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current version of the instance.`,
						},
						"ram": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The memory size.`,
						},
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The region where the instance is located.`,
						},
						"scene": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The scene information.`,
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The subnet ID.`,
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The VPC ID.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The remark information.`,
						},
						"keep_days": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Days until expiration.`,
						},
						"specification": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The instance specifications.`,
						},
						"effect": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The effects of freezing.`,
						},
						"new_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The new version.`,
						},
						"security_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The security group ID.`,
						},
						"task": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The task status.`,
						},
						"connect_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The connection IP address.`,
						},
						"cpu": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of CPUs.`,
						},
						"charge_model": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The payment mode.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The instance ID.`,
						},
						"port_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the port that the EIP is bound to.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The instance status.`,
						},
						"config_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total number of configured databases.`,
						},
						"database_limit": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total number of supported databases.`,
						},
						"expired_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The expired time.`,
						},
						"connect_ipv6": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The IPv6 address.`,
						},
					},
				},
			},
		},
	}
}

type InstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *InstancesDSWrapper {
	return &InstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDbssInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newInstancesDSWrapper(d, meta)
	lisAudInsRst, err := wrapper.ListAuditInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAuditInstancesToSchema(lisAudInsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DBSS GET /v1/{project_id}/dbss/audit/instances
func (w *InstancesDSWrapper) ListAuditInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dbss")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/dbss/audit/instances"
	// When no paging parameters are configured, all queries are performed by default.
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *InstancesDSWrapper) listAuditInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("instances", schemas.SliceToList(body.Get("servers"),
			func(instances gjson.Result) any {
				return map[string]any{
					"name": instances.Get("name").Value(),
					// Because of openapi, both camel case and underline style fields will exist.
					"remain_days":        instances.Get("remainDays").Value(),
					"availability_zone":  instances.Get("zone").Value(),
					"created_at":         instances.Get("created").Value(),
					"resource_id":        instances.Get("resource_id").Value(),
					"resource_spec_code": instances.Get("resource_spec_code").Value(),
					"version":            instances.Get("version").Value(),
					"ram":                instances.Get("ram").Value(),
					"region":             instances.Get("region").Value(),
					"scene":              instances.Get("scene").Value(),
					"subnet_id":          instances.Get("subnetId").Value(),
					"vpc_id":             instances.Get("vpc_id").Value(),
					"description":        instances.Get("comment").Value(),
					"keep_days":          instances.Get("keep_days").Value(),
					"specification":      instances.Get("specification").Value(),
					"effect":             instances.Get("effect").Value(),
					"new_version":        instances.Get("new_version").Value(),
					"security_group_id":  instances.Get("security_group_id").Value(),
					"task":               instances.Get("task").Value(),
					"connect_ip":         instances.Get("connect_ip").Value(),
					"cpu":                instances.Get("cpu").Value(),
					"charge_model":       instances.Get("chargeModel").Value(),
					"instance_id":        instances.Get("id").Value(),
					"port_id":            instances.Get("port_id").Value(),
					"status":             instances.Get("status").Value(),
					"config_num":         instances.Get("configNum").Value(),
					"database_limit":     instances.Get("database_limit").Value(),
					"expired_at":         instances.Get("expired").Value(),
					"connect_ipv6":       instances.Get("connectIpv6").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
