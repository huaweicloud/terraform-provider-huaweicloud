// Generated by PMS #363
package dbss

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDbssAvailabilityZones() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDbssAvailabilityZonesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"availability_zones": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the availability zones.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the availability zone.`,
						},
						"number": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of the availability zone.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the availability zone.`,
						},
						"alias": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alias of the availability zone.`,
						},
						"alias_us": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alias in English of the availability zone.`,
						},
					},
				},
			},
		},
	}
}

type AvailabilityZonesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAvailabilityZonesDSWrapper(d *schema.ResourceData, meta interface{}) *AvailabilityZonesDSWrapper {
	return &AvailabilityZonesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDbssAvailabilityZonesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAvailabilityZonesDSWrapper(d, meta)
	lisAvaZonInfRst, err := wrapper.ListAvailabilityZoneInfos()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAvailabilityZoneInfosToSchema(lisAvaZonInfRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DBSS GET /v2/{project_id}/dbss/audit/availability-zone
func (w *AvailabilityZonesDSWrapper) ListAvailabilityZoneInfos() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dbss")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/dbss/audit/availability-zone"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *AvailabilityZonesDSWrapper) listAvailabilityZoneInfosToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("availability_zones", schemas.SliceToList(body.Get("azs"),
			func(avaZones gjson.Result) any {
				return map[string]any{
					"name":     avaZones.Get("zone_name").Value(),
					"number":   avaZones.Get("zone_number").Value(),
					"type":     avaZones.Get("az_type").Value(),
					"alias":    avaZones.Get("alias").Value(),
					"alias_us": avaZones.Get("alias_us").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
