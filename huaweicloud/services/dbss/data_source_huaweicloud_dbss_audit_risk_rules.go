// Generated by PMS #356
package dbss

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDbssAuditRiskRules() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDbssAuditRiskRulesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the audit instance ID to which the risk rules belong.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the risk rule. Supports fuzzy search.`,
			},
			"risk_level": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies  the risk level of the risk rule.`,
			},
			"rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the risk rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the risk rule.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the risk rule.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the risk rule.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the risk rule.`,
						},
						"feature": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The risk characteristics of the risk rule.`,
						},
						"rank": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The priority of the risk rule.`,
						},
						"risk_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The risk level of the risk rule.`,
						},
					},
				},
			},
		},
	}
}

type AuditRiskRulesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAuditRiskRulesDSWrapper(d *schema.ResourceData, meta interface{}) *AuditRiskRulesDSWrapper {
	return &AuditRiskRulesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDbssAuditRiskRulesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAuditRiskRulesDSWrapper(d, meta)
	lisAudRulRisRst, err := wrapper.ListAuditRuleRisks()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAuditRuleRisksToSchema(lisAudRulRisRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DBSS GET /v1/{project_id}/{instance_id}/dbss/audit/rule/risk
func (w *AuditRiskRulesDSWrapper) ListAuditRuleRisks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dbss")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/{instance_id}/dbss/audit/rule/risk"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"name":        w.Get("name"),
		"risk_levels": w.Get("risk_level"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *AuditRiskRulesDSWrapper) listAuditRuleRisksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("rules", schemas.SliceToList(body.Get("rules"),
			func(rules gjson.Result) any {
				return map[string]any{
					"id":         rules.Get("id").Value(),
					"name":       rules.Get("name").Value(),
					"type":       rules.Get("type").Value(),
					"status":     rules.Get("status").Value(),
					"feature":    rules.Get("feature").Value(),
					"rank":       rules.Get("rank").Value(),
					"risk_level": rules.Get("risk_level").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
