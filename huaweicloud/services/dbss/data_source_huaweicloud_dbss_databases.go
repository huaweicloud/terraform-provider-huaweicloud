// Generated by PMS #365
package dbss

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDbssDatabases() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDbssDatabasesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the audit instance ID to which the databases belong.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the database.`,
			},
			"databases": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the databases.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the database.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the database.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the database.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the added database.`,
						},
						"ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The IP address of the database.`,
						},
						"os": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The operation system of the database.`,
						},
						"port": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The port of the database.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The version of the database.`,
						},
						"charset": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The character set of the database.`,
						},
						"instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the database instance.`,
						},
						"agent_url": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The unique ID of the agent.`,
						},
						"audit_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The running status of the database.`,
						},
						"db_classification": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The classification of the database.`,
						},
					},
				},
			},
		},
	}
}

type DatabasesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDatabasesDSWrapper(d *schema.ResourceData, meta interface{}) *DatabasesDSWrapper {
	return &DatabasesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDbssDatabasesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDatabasesDSWrapper(d, meta)
	lisAudDatRst, err := wrapper.ListAuditDatabases()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAuditDatabasesToSchema(lisAudDatRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DBSS GET /v1/{project_id}/{instance_id}/dbss/audit/databases
func (w *DatabasesDSWrapper) ListAuditDatabases() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dbss")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/{instance_id}/dbss/audit/databases"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"status": w.Get("status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("databases", "offset", "limit", 0).
		Request().
		Result()
}

func (w *DatabasesDSWrapper) listAuditDatabasesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("databases", schemas.SliceToList(body.Get("databases"),
			func(databases gjson.Result) any {
				return map[string]any{
					"id":                databases.Get("database.id").Value(),
					"name":              databases.Get("database.name").Value(),
					"status":            databases.Get("database.status").Value(),
					"type":              databases.Get("database.type").Value(),
					"ip":                databases.Get("database.ip").Value(),
					"os":                databases.Get("database.os").Value(),
					"port":              databases.Get("database.port").Value(),
					"version":           databases.Get("database.version").Value(),
					"charset":           databases.Get("database.charset").Value(),
					"instance_name":     databases.Get("database.instance_name").Value(),
					"agent_url":         schemas.SliceToStrList(databases.Get("database.agent_url")),
					"audit_status":      databases.Get("database.audit_status").Value(),
					"db_classification": databases.Get("database.db_classification").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
