// Generated by PMS #420
package cph

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCphPhoneCustomImages() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCphPhoneCustomImagesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the image type. The valid value can be **public**, **private** or **share**.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the image status.`,
			},
			"image_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the image ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the image name.`,
			},
			"create_since": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the image creation since time.`,
			},
			"create_until": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the image creation until time.`,
			},
			"src_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the project ID of the share image account.`,
			},
			"images": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The image list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The image name.`,
						},
						"size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The image size, the unit is byte.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project ID of the image.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The image ID.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The image AOSP version.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The image status.`,
						},
						"src_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project ID of the share image account.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The domain ID to which the image belongs.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The image update time.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The image creation time.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The image type.`,
						},
					},
				},
			},
		},
	}
}

type PhoneCustomImagesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPhoneCustomImagesDSWrapper(d *schema.ResourceData, meta interface{}) *PhoneCustomImagesDSWrapper {
	return &PhoneCustomImagesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCphPhoneCustomImagesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPhoneCustomImagesDSWrapper(d, meta)
	listImagesRst, err := wrapper.ListImages()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listImagesToSchema(listImagesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CPH GET /v1/{project_id}/cloud-phone/images
func (w *PhoneCustomImagesDSWrapper) ListImages() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cph")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cloud-phone/images"
	params := map[string]any{
		"image_type":     w.Get("type"),
		"status":         w.Get("status"),
		"image_id":       w.Get("image_id"),
		"image_name":     w.Get("name"),
		"src_project_id": w.Get("src_project_id"),
	}
	createSince := w.Get("create_since")
	createUntil := w.Get("create_until")
	if createSince != nil {
		sinceTimeStamp, err := utils.FormatUTCTimeStamp(createSince.(string))
		if err != nil {
			return nil, err
		}
		params["create_since"] = sinceTimeStamp
	}
	if createUntil != nil {
		untilTimeStamp, err := utils.FormatUTCTimeStamp(createUntil.(string))
		if err != nil {
			return nil, err
		}
		params["create_until"] = untilTimeStamp
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *PhoneCustomImagesDSWrapper) listImagesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("images", schemas.SliceToList(body.Get("image_infos"),
			func(images gjson.Result) any {
				return map[string]any{
					"name":           images.Get("image_name").Value(),
					"size":           images.Get("image_size").Value(),
					"project_id":     images.Get("project_id").Value(),
					"id":             images.Get("image_id").Value(),
					"version":        images.Get("image_version").Value(),
					"status":         images.Get("status").Value(),
					"src_project_id": images.Get("src_project_id").Value(),
					"domain_id":      images.Get("domain_id").Value(),
					"updated_at":     images.Get("update_time").Value(),
					"created_at":     images.Get("create_time").Value(),
					"type":           images.Get("image_type").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
