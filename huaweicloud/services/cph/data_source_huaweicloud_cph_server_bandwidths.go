// Generated by PMS #434
package cph

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCphServerBandwidths() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCphServerBandwidthsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"bandwidths": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The bandwidth list of CPH server.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"bandwidth_type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The bandwidth type.`,
						},
						"bandwidth_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The bandwidth name.`,
						},
						"bandwidth_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The bandwidth ID.`,
						},
						"bandwidth_size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The bandwidth size.`,
						},
						"bandwidth_charge_mode": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The bandwidth charge mode.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The bandwidth creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The bandwidth update time.`,
						},
					},
				},
			},
		},
	}
}

type ServerBandwidthsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newServerBandwidthsDSWrapper(d *schema.ResourceData, meta interface{}) *ServerBandwidthsDSWrapper {
	return &ServerBandwidthsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCphServerBandwidthsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newServerBandwidthsDSWrapper(d, meta)
	shoBanDetRst, err := wrapper.ShowBandwidthDetail()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showBandwidthDetailToSchema(shoBanDetRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CPH GET /v1/{project_id}/cloud-phone/bandwidths
func (w *ServerBandwidthsDSWrapper) ShowBandwidthDetail() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cph")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cloud-phone/bandwidths"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("band_widths", "offset", "limit", 50).
		Request().
		Result()
}

func (w *ServerBandwidthsDSWrapper) showBandwidthDetailToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("bandwidths", schemas.SliceToList(body.Get("band_widths"),
			func(bandwidths gjson.Result) any {
				return map[string]any{
					"bandwidth_type":        bandwidths.Get("band_width_share_type").Value(),
					"bandwidth_name":        bandwidths.Get("band_width_name").Value(),
					"bandwidth_id":          bandwidths.Get("band_width_id").Value(),
					"bandwidth_size":        bandwidths.Get("band_width_size").Value(),
					"bandwidth_charge_mode": bandwidths.Get("band_width_charge_mode").Value(),
					"created_at":            bandwidths.Get("create_time").Value(),
					"updated_at":            bandwidths.Get("update_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
