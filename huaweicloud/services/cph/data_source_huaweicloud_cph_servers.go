// Generated by PMS #378
package cph

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCphServers() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCphServersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"server_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud phone server name and support fuzzy query.`,
			},
			"server_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud phone server ID.`,
			},
			"network_version": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether the cloud phone server is a custom network identifier.`,
			},
			"phone_flavor": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud phone flavor name.`,
			},
			"create_since": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The creation start time. For example, **2024-10-15 15:04:05**.`,
			},
			"create_until": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The creation end time. For example, **2024-10-15 15:04:05**.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the server status.`,
			},
			"servers": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The cloud phone server list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"server_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cloud phone server ID.`,
						},
						"server_flavor": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cloud phone server flavor name.`,
						},
						"keypair_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the key pair used to connect to the cloud phone.`,
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the subnet to which the cloud phone server belongs.`,
						},
						"subnet_cidr": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The subnet CIDR to which the cloud phone server belongs.`,
						},
						"addresses": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The IP related information of the cloud phone server.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"server_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The intranet IP of cloud phone server.`,
									},
									"public_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The public IP of cloud phone server.`,
									},
								},
							},
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID to which the cloud phone server belongs.`,
						},
						"availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The availability zone where the cloud mobile server is located.`,
						},
						"phone_flavor": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cloud phone flavor name.`,
						},
						"cidr": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The network segment of VPC to which the cloud phone server belongs.`,
						},
						"network_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Whether the cloud phone server is a custom network identifier.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The cloud phone server status.`,
						},
						"vpc_cidr": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The VPC CIDR.`,
						},
						"resource_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project ID of the cloud phone server.`,
						},
						"metadata": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The order and product related information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"product_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The product ID.`,
									},
									"order_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The order ID.`,
									},
								},
							},
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
						"server_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cloud phone server name.`,
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the virtual private cloud (VPC for short) to which the cloud mobile server belongs.`,
						},
						"create_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
					},
				},
			},
		},
	}
}

type ServersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newServersDSWrapper(d *schema.ResourceData, meta interface{}) *ServersDSWrapper {
	return &ServersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCphServersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newServersDSWrapper(d, meta)
	lisCloPhoSerRst, err := wrapper.ListCloudPhoneServers()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCloudPhoneServersToSchema(lisCloPhoSerRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CPH GET /v1/{project_id}/cloud-phone/servers
func (w *ServersDSWrapper) ListCloudPhoneServers() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cph")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cloud-phone/servers"
	params := map[string]any{
		"server_name":      w.Get("server_name"),
		"server_id":        w.Get("server_id"),
		"network_version":  w.Get("network_version"),
		"phone_model_name": w.Get("phone_flavor"),
		"status":           w.Get("status"),
	}
	createSince := w.Get("create_since")
	createUntil := w.Get("create_until")
	if createSince != nil {
		sinceTimeStamp, err := utils.FormatUTCTimeStamp(createSince.(string))
		if err != nil {
			return nil, err
		}
		params["create_since"] = sinceTimeStamp
	}
	if createUntil != nil {
		untilTimeStamp, err := utils.FormatUTCTimeStamp(createUntil.(string))
		if err != nil {
			return nil, err
		}
		params["create_until"] = untilTimeStamp
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("servers", "offset", "limit", 100).
		Request().
		Result()
}

func (w *ServersDSWrapper) listCloudPhoneServersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("servers", schemas.SliceToList(body.Get("servers"),
			func(servers gjson.Result) any {
				return map[string]any{
					"server_id":     servers.Get("server_id").Value(),
					"server_flavor": servers.Get("server_model_name").Value(),
					"keypair_name":  servers.Get("keypair_name").Value(),
					"subnet_id":     servers.Get("subnet_id").Value(),
					"subnet_cidr":   servers.Get("subnet_cidr").Value(),
					"addresses": schemas.SliceToList(servers.Get("addresses"),
						func(addresses gjson.Result) any {
							return map[string]any{
								"server_ip": addresses.Get("server_ip").Value(),
								"public_ip": addresses.Get("public_ip").Value(),
							}
						},
					),
					"enterprise_project_id": servers.Get("enterprise_project_id").Value(),
					"availability_zone":     servers.Get("availability_zone").Value(),
					"phone_flavor":          servers.Get("phone_model_name").Value(),
					"cidr":                  servers.Get("cidr").Value(),
					"network_version":       servers.Get("network_version").Value(),
					"status":                servers.Get("status").Value(),
					"vpc_cidr":              servers.Get("vpc_cidr").Value(),
					"resource_project_id":   servers.Get("resource_project_id").Value(),
					"metadata": schemas.SliceToList(servers.Get("metadata"),
						func(metadata gjson.Result) any {
							return map[string]any{
								"product_id": metadata.Get("product_id").Value(),
								"order_id":   metadata.Get("order_id").Value(),
							}
						},
					),
					"update_time": servers.Get("update_time").Value(),
					"server_name": servers.Get("server_name").Value(),
					"vpc_id":      servers.Get("vpc_id").Value(),
					"create_time": servers.Get("create_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
