// Generated by PMS #526
package cph

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCphPhoneConnections() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCphPhoneConnectionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"phone_ids": {
				Type:        schema.TypeList,
				Required:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the phone ids.`,
			},
			"client_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the client type applying for access.`,
			},
			"connect_infos": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The phone connection list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"phone_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The phone ID.`,
						},
						"access_info": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The phone access information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"access_port": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The access port of cloud phone instance.`,
									},
									"session_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The session ID of this access.`,
									},
									"access_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The time of this access.`,
									},
									"ticket": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ticket of this access.`,
									},
									"access_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The IP of this access.`,
									},
									"intranet_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The intranet IP address of this access.`,
									},
									"access_ipv6": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The IPv6 address of this access.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type PhoneConnectionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPhoneConnectionsDSWrapper(d *schema.ResourceData, meta interface{}) *PhoneConnectionsDSWrapper {
	return &PhoneConnectionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCphPhoneConnectionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPhoneConnectionsDSWrapper(d, meta)
	batShoPhoConInfRst, err := wrapper.BatchShowPhoneConnectInfos()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.batchShowPhoneConnectInfosToSchema(batShoPhoConInfRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CPH POST /v1/{project_id}/cloud-phone/phones/batch-connection
func (w *PhoneConnectionsDSWrapper) BatchShowPhoneConnectInfos() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cph")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cloud-phone/phones/batch-connection"
	params := map[string]any{
		"client_type": w.Get("client_type"),
		"phone_ids":   w.ListToArray("phone_ids"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("POST").
		URI(uri).
		Body(params).
		Request().
		Result()
}

func (w *PhoneConnectionsDSWrapper) batchShowPhoneConnectInfosToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("connect_infos", schemas.SliceToList(body.Get("connect_infos"),
			func(connectInfos gjson.Result) any {
				return map[string]any{
					"phone_id": connectInfos.Get("phone_id").Value(),
					"access_info": schemas.SliceToList(connectInfos.Get("access_info"),
						func(accessInfo gjson.Result) any {
							return map[string]any{
								"access_port": accessInfo.Get("access_port").Value(),
								"session_id":  accessInfo.Get("session_id").Value(),
								"access_time": w.setConInfAccInfTim(accessInfo),
								"ticket":      accessInfo.Get("ticket").Value(),
								"access_ip":   accessInfo.Get("access_ip").Value(),
								"intranet_ip": accessInfo.Get("intranet_ip").Value(),
								"access_ipv6": accessInfo.Get("access_ipv6").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*PhoneConnectionsDSWrapper) setConInfAccInfTim(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339((data.Get("timestamp").Int())/1000, false)
}
