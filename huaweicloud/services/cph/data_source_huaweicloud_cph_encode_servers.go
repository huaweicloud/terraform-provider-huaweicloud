// Generated by PMS #435
package cph

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCphEncodeServers() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCphEncodeServersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the encode server type. The valid value can be **0** (server), **1** (container).`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the encode server status.`,
			},
			"server_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the CPH server ID.`,
			},
			"encode_servers": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The encode server list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"keypair_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The encode server keypair name.`,
						},
						"encode_server_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The encode server ID.`,
						},
						"server_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The CPH server ID.`,
						},
						"type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The encode server type.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The encode server status.`,
						},
						"access_infos": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The encode server access list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"listen_port": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The listen port of the encode server access.`,
									},
									"public_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The public IP of the encode server access.`,
									},
									"server_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The server IP of the encode server access.`,
									},
									"access_port": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The access port of the encode server access.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The type of the encode server access.`,
									},
									"server_ipv6": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The server IPv6 of the encode server access.`,
									},
								},
							},
						},
						"encode_server_ipv6": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The server IPv6 of the encode server.`,
						},
						"encode_server_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The server name of the encode server.`,
						},
						"encode_server_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The encode server IP.`,
						},
					},
				},
			},
		},
	}
}

type EncodeServersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newEncodeServersDSWrapper(d *schema.ResourceData, meta interface{}) *EncodeServersDSWrapper {
	return &EncodeServersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCphEncodeServersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newEncodeServersDSWrapper(d, meta)
	listEncodeServersRst, err := wrapper.ListEncodeServers()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listEncodeServersToSchema(listEncodeServersRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CPH GET /v1/{project_id}/cloud-phone/encode-servers
func (w *EncodeServersDSWrapper) ListEncodeServers() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cph")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cloud-phone/encode-servers"
	params := map[string]any{
		"type":      w.Get("type"),
		"status":    w.Get("status"),
		"server_id": w.Get("server_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("encode_servers", "offset", "limit", 100).
		Request().
		Result()
}

func (w *EncodeServersDSWrapper) listEncodeServersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("encode_servers", schemas.SliceToList(body.Get("encode_servers"),
			func(encodeServers gjson.Result) any {
				return map[string]any{
					"keypair_name":     encodeServers.Get("keypair_name").Value(),
					"encode_server_id": encodeServers.Get("encode_server_id").Value(),
					"server_id":        encodeServers.Get("server_id").Value(),
					"type":             encodeServers.Get("type").Value(),
					"status":           encodeServers.Get("status").Value(),
					"access_infos": schemas.SliceToList(encodeServers.Get("access_infos"),
						func(accessInfos gjson.Result) any {
							return map[string]any{
								"listen_port": accessInfos.Get("listen_port").Value(),
								"public_ip":   accessInfos.Get("public_ip").Value(),
								"server_ip":   accessInfos.Get("server_ip").Value(),
								"access_port": accessInfos.Get("access_port").Value(),
								"type":        accessInfos.Get("type").Value(),
								"server_ipv6": accessInfos.Get("server_ipv6").Value(),
							}
						},
					),
					"encode_server_ipv6": encodeServers.Get("encode_server_ipv6").Value(),
					"encode_server_name": encodeServers.Get("encode_server_name").Value(),
					"encode_server_ip":   encodeServers.Get("encode_server_ip").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
