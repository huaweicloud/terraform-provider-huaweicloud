// Generated by PMS #516
package cae

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCaeNotificationRules() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCaeNotificationRulesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the event notification rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the event notification rule.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the event notification rule.`,
						},
						"event_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The trigger event of the event notification.`,
						},
						"scope": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The scope in which event notification rule takes effect.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The type to which the event notification rule takes effect.`,
									},
									"environments": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The list of the environment IDs.`,
									},
									"applications": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The list of the application IDs.`,
									},
									"components": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The list of the component IDs.`,
									},
								},
							},
						},
						"trigger_policy": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The trigger policy of the event notification rule.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The type of the trigger.`,
									},
									"period": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The trigger period of the event.`,
									},
									"count": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of times the event occurred.`,
									},
									"operator": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The condition of the event notification.`,
									},
								},
							},
						},
						"notification": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The configuration of the event notification.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"protocol": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The protocol of the event notification.`,
									},
									"endpoint": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The endpoint of the event notification.`,
									},
									"template": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The template language of the event notification.`,
									},
								},
							},
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the event notification rule is enabled.`,
						},
					},
				},
			},
		},
	}
}

type NotificationRulesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newNotificationRulesDSWrapper(d *schema.ResourceData, meta interface{}) *NotificationRulesDSWrapper {
	return &NotificationRulesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCaeNotificationRulesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newNotificationRulesDSWrapper(d, meta)
	listNoticeRulesRst, err := wrapper.ListNoticeRules()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listNoticeRulesToSchema(listNoticeRulesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CAE GET /v1/{project_id}/cae/notice-rules
func (w *NotificationRulesDSWrapper) ListNoticeRules() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cae")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cae/notice-rules"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *NotificationRulesDSWrapper) listNoticeRulesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("rules", schemas.SliceToList(body.Get("items"),
			func(rules gjson.Result) any {
				return map[string]any{
					"id":         rules.Get("id").Value(),
					"name":       rules.Get("name").Value(),
					"event_name": rules.Get("event_name").Value(),
					"scope": schemas.SliceToList(rules.Get("scope"),
						func(scope gjson.Result) any {
							return map[string]any{
								"type":         scope.Get("type").Value(),
								"environments": schemas.SliceToStrList(scope.Get("environments")),
								"applications": schemas.SliceToStrList(scope.Get("applications")),
								"components":   schemas.SliceToStrList(scope.Get("components")),
							}
						},
					),
					"trigger_policy": schemas.SliceToList(rules.Get("trigger_policy"),
						func(triggerPolicy gjson.Result) any {
							return map[string]any{
								"type":     triggerPolicy.Get("trigger_type").Value(),
								"period":   triggerPolicy.Get("period").Value(),
								"count":    triggerPolicy.Get("count").Value(),
								"operator": triggerPolicy.Get("operator").Value(),
							}
						},
					),
					"notification": schemas.SliceToList(rules.Get("notification"),
						func(notification gjson.Result) any {
							return map[string]any{
								"protocol": notification.Get("protocol").Value(),
								"endpoint": notification.Get("endpoint").Value(),
								"template": notification.Get("template").Value(),
							}
						},
					),
					"enabled": rules.Get("enable").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
