// Generated by PMS #677
package sms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSmsTaskConsistencyResults() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmsTaskConsistencyResultsRead,

		Schema: map[string]*schema.Schema{
			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the task ID.`,
			},
			"result_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the consistency verification results.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"finished_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the verification completion time.`,
						},
						"check_result": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the verification execution result.`,
						},
						"consistency_result": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the verification results.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"dir_check": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the directory verified.`,
									},
									"num_total_files": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the total number of files verified.`,
									},
									"num_different_files": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of files inconsistent.`,
									},
									"num_target_miss_files": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of files missing at the target.`,
									},
									"num_target_more_files": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of files redundant at the target.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type TaskConsistencyResultsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTaskConsistencyResultsDSWrapper(d *schema.ResourceData, meta interface{}) *TaskConsistencyResultsDSWrapper {
	return &TaskConsistencyResultsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmsTaskConsistencyResultsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTaskConsistencyResultsDSWrapper(d, meta)
	shoConResRst, err := wrapper.ShowConsistencyResult()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showConsistencyResultToSchema(shoConResRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMS GET /v3/tasks/{task_id}/consistency-result
func (w *TaskConsistencyResultsDSWrapper) ShowConsistencyResult() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sms")
	if err != nil {
		return nil, err
	}

	uri := "/v3/tasks/{task_id}/consistency-result"
	uri = strings.ReplaceAll(uri, "{task_id}", w.Get("task_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *TaskConsistencyResultsDSWrapper) showConsistencyResultToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("result_list", schemas.SliceToList(body.Get("result_list"),
			func(resultList gjson.Result) any {
				return map[string]any{
					"finished_time": resultList.Get("finished_time").Value(),
					"check_result":  resultList.Get("check_result").Value(),
					"consistency_result": schemas.SliceToList(resultList.Get("consistency_result"),
						func(consistencyResult gjson.Result) any {
							return map[string]any{
								"dir_check":             consistencyResult.Get("dir_check").Value(),
								"num_total_files":       consistencyResult.Get("num_total_files").Value(),
								"num_different_files":   consistencyResult.Get("num_different_files").Value(),
								"num_target_miss_files": consistencyResult.Get("num_target_miss_files").Value(),
								"num_target_more_files": consistencyResult.Get("num_target_more_files").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
