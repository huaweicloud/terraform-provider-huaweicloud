// Generated by PMS #672
package sms

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSmsSourceServerOverview() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmsSourceServerOverviewRead,

		Schema: map[string]*schema.Schema{
			"waiting": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that are in a waiting migration status.`,
			},
			"replicate": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that are in a replicating migration status.`,
			},
			"syncing": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that are in a synchronizing migration status.`,
			},
			"stopped": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that are in a paused migration status.`,
			},
			"deleting": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that are in a deleting migration status.`,
			},
			"cutovering": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers whose paired target servers are being launched.`,
			},
			"unavailable": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that fail the environment check.`,
			},
			"stopping": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that are in a stopping migration status.`,
			},
			"skipping": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that are in a skipping migration status.`,
			},
			"finished": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers whose paired target servers have been launched.`,
			},
			"initialize": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that are in an initializing migration status.`,
			},
			"error": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that are in an error migration status.`,
			},
			"cloning": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers whose paired target servers are being cloned.`,
			},
			"unconfigured": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of servers that do not have target server configurations.`,
			},
		},
	}
}

type SourceServerOverviewDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSourceServerOverviewDSWrapper(d *schema.ResourceData, meta interface{}) *SourceServerOverviewDSWrapper {
	return &SourceServerOverviewDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmsSourceServerOverviewRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSourceServerOverviewDSWrapper(d, meta)
	showOverviewRst, err := wrapper.ShowOverview()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showOverviewToSchema(showOverviewRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMS GET /v3/sources/overview
func (w *SourceServerOverviewDSWrapper) ShowOverview() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sms")
	if err != nil {
		return nil, err
	}

	uri := "/v3/sources/overview"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SourceServerOverviewDSWrapper) showOverviewToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("waiting", body.Get("waiting").Value()),
		d.Set("replicate", body.Get("replicate").Value()),
		d.Set("syncing", body.Get("syncing").Value()),
		d.Set("stopped", body.Get("stopped").Value()),
		d.Set("deleting", body.Get("deleting").Value()),
		d.Set("cutovering", body.Get("cutovering").Value()),
		d.Set("unavailable", body.Get("unavailable").Value()),
		d.Set("stopping", body.Get("stopping").Value()),
		d.Set("skipping", body.Get("skipping").Value()),
		d.Set("finished", body.Get("finished").Value()),
		d.Set("initialize", body.Get("initialize").Value()),
		d.Set("error", body.Get("error").Value()),
		d.Set("cloning", body.Get("cloning").Value()),
		d.Set("unconfigured", body.Get("unconfigured").Value()),
	)
	return mErr.ErrorOrNil()
}
