// Generated by PMS #671
package sms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSmsSourceServerCommand() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmsSourceServerCommandRead,

		Schema: map[string]*schema.Schema{
			"server_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the source server that the command is sent to.`,
			},
			"command_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the command name.`,
			},
			"command_param": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the command response parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"task_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task ID.`,
						},
						"bucket": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the bucket name.`,
						},
					},
				},
			},
		},
	}
}

type SourceServerCommandDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSourceServerCommandDSWrapper(d *schema.ResourceData, meta interface{}) *SourceServerCommandDSWrapper {
	return &SourceServerCommandDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmsSourceServerCommandRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSourceServerCommandDSWrapper(d, meta)
	showCommandRst, err := wrapper.ShowCommand()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showCommandToSchema(showCommandRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMS GET /v3/sources/{server_id}/command
func (w *SourceServerCommandDSWrapper) ShowCommand() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sms")
	if err != nil {
		return nil, err
	}

	uri := "/v3/sources/{server_id}/command"
	uri = strings.ReplaceAll(uri, "{server_id}", w.Get("server_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SourceServerCommandDSWrapper) showCommandToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("command_name", body.Get("command_name").Value()),
		d.Set("command_param", schemas.ObjectToList(body.Get("command_param"),
			func(commandParam gjson.Result) any {
				return map[string]any{
					"task_id": commandParam.Get("task_id").Value(),
					"bucket":  commandParam.Get("bucket").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
