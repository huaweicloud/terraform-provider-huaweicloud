// Generated by PMS #678
package sms

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSmsServerTemplates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmsServerTemplatesRead,

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the template name.`,
			},
			"availability_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the availability zone.`,
			},
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region ID.`,
			},
			"templates": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the template information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the template ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the template name.`,
						},
						"is_template": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates whether the template is general.`,
						},
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the project ID.`,
						},
						"target_server_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the target server.`,
						},
						"availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the availability zone.`,
						},
						"volume_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the disk type.`,
						},
						"flavor": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the server flavor.`,
						},
						"vpc": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the VPC information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the VPC ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the VPC name.`,
									},
									"cidr": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the VPC CIDR block.`,
									},
								},
							},
						},
						"nics": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the NIC information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the subnet ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the subnet name.`,
									},
									"cidr": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the subnet gateway/mask.`,
									},
									"ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the server IP address.`,
									},
								},
							},
						},
						"security_groups": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the security group information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the security group ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the security group name.`,
									},
								},
							},
						},
						"publicip": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the public IP address information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the EIP type.`,
									},
									"bandwidth_size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the bandwidth size, the unit is Mbit/s.`,
									},
									"bandwidth_share_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth type.`,
									},
								},
							},
						},
						"disk": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the disk information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the disk ID.`,
									},
									"index": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the disk serial number.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the disk name.`,
									},
									"disktype": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the disk type.`,
									},
									"size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the disk size, the unit is GB.`,
									},
									"device_use": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the used disk space.`,
									},
								},
							},
						},
						"data_volume_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the data disk type.`,
						},
						"target_password": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the server login password.`,
						},
						"image_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the selected image.`,
						},
					},
				},
			},
		},
	}
}

type ServerTemplatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newServerTemplatesDSWrapper(d *schema.ResourceData, meta interface{}) *ServerTemplatesDSWrapper {
	return &ServerTemplatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmsServerTemplatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newServerTemplatesDSWrapper(d, meta)
	listTemplatesRst, err := wrapper.ListTemplates()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listTemplatesToSchema(listTemplatesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMS GET /v3/vm/templates
func (w *ServerTemplatesDSWrapper) ListTemplates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sms")
	if err != nil {
		return nil, err
	}

	uri := "/v3/vm/templates"
	params := map[string]any{
		"name":              w.Get("name"),
		"availability_zone": w.Get("availability_zone"),
		"region":            w.Get("region"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("templates", "offset", "limit", 100).
		Request().
		Result()
}

func (w *ServerTemplatesDSWrapper) listTemplatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("templates", schemas.SliceToList(body.Get("templates"),
			func(templates gjson.Result) any {
				return map[string]any{
					"id":                 templates.Get("id").Value(),
					"name":               templates.Get("name").Value(),
					"is_template":        templates.Get("is_template").Value(),
					"region":             templates.Get("region").Value(),
					"project_id":         templates.Get("projectid").Value(),
					"target_server_name": templates.Get("target_server_name").Value(),
					"availability_zone":  templates.Get("availability_zone").Value(),
					"volume_type":        templates.Get("volumetype").Value(),
					"flavor":             templates.Get("flavor").Value(),
					"vpc": schemas.SliceToList(templates.Get("vpc"),
						func(vpc gjson.Result) any {
							return map[string]any{
								"id":   vpc.Get("id").Value(),
								"name": vpc.Get("name").Value(),
								"cidr": vpc.Get("cidr").Value(),
							}
						},
					),
					"nics": schemas.SliceToList(templates.Get("nics"),
						func(nics gjson.Result) any {
							return map[string]any{
								"id":   nics.Get("id").Value(),
								"name": nics.Get("name").Value(),
								"cidr": nics.Get("cidr").Value(),
								"ip":   nics.Get("ip").Value(),
							}
						},
					),
					"security_groups": schemas.SliceToList(templates.Get("security_groups"),
						func(securityGroups gjson.Result) any {
							return map[string]any{
								"id":   securityGroups.Get("id").Value(),
								"name": securityGroups.Get("name").Value(),
							}
						},
					),
					"publicip": schemas.SliceToList(templates.Get("publicip"),
						func(publicip gjson.Result) any {
							return map[string]any{
								"type":                 publicip.Get("type").Value(),
								"bandwidth_size":       publicip.Get("bandwidth_size").Value(),
								"bandwidth_share_type": publicip.Get("bandwidth_share_type").Value(),
							}
						},
					),
					"disk": schemas.SliceToList(templates.Get("disk"),
						func(disk gjson.Result) any {
							return map[string]any{
								"id":         disk.Get("id").Value(),
								"index":      disk.Get("index").Value(),
								"name":       disk.Get("name").Value(),
								"disktype":   disk.Get("disktype").Value(),
								"size":       disk.Get("size").Value(),
								"device_use": disk.Get("device_use").Value(),
							}
						},
					),
					"data_volume_type": templates.Get("data_volume_type").Value(),
					"target_password":  templates.Get("target_password").Value(),
					"image_id":         templates.Get("image_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
