// Generated by PMS #646
package sms

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSmsMigrationProjects() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmsMigrationProjectsRead,

		Schema: map[string]*schema.Schema{
			"migprojects": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the details of the queried migration projects.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the migration project ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the migration project name.`,
						},
						"use_public_ip": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether to use a public IP address for migration.`,
						},
						"isdefault": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the migration project is the default project.`,
						},
						"start_target_server": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether to start the target server after the migration.`,
						},
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the region name.`,
						},
						"speed_limit": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the migration rate limit configured in the project.`,
						},
						"exist_server": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether there are servers in the migration project.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the migration project description.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of the migration project.`,
						},
						"enterprise_project": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the enterprise project to which the migration project belongs.`,
						},
						"syncing": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether to perform a continuous synchronization after the full replication is complete.`,
						},
						"start_network_check": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether to enable network performance measurement.`,
						},
					},
				},
			},
		},
	}
}

type MigrationProjectsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMigrationProjectsDSWrapper(d *schema.ResourceData, meta interface{}) *MigrationProjectsDSWrapper {
	return &MigrationProjectsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmsMigrationProjectsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMigrationProjectsDSWrapper(d, meta)
	listMigprojectsRst, err := wrapper.ListMigprojects()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listMigprojectsToSchema(listMigprojectsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMS GET /v3/migprojects
func (w *MigrationProjectsDSWrapper) ListMigprojects() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sms")
	if err != nil {
		return nil, err
	}

	uri := "/v3/migprojects"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("migprojects", "offset", "limit", 0).
		Request().
		Result()
}

func (w *MigrationProjectsDSWrapper) listMigprojectsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("migprojects", schemas.SliceToList(body.Get("migprojects"),
			func(migprojects gjson.Result) any {
				return map[string]any{
					"id":                  migprojects.Get("id").Value(),
					"name":                migprojects.Get("name").Value(),
					"use_public_ip":       migprojects.Get("use_public_ip").Value(),
					"isdefault":           migprojects.Get("isdefault").Value(),
					"start_target_server": migprojects.Get("start_target_server").Value(),
					"region":              migprojects.Get("region").Value(),
					"speed_limit":         migprojects.Get("speed_limit").Value(),
					"exist_server":        migprojects.Get("exist_server").Value(),
					"description":         migprojects.Get("description").Value(),
					"type":                migprojects.Get("type").Value(),
					"enterprise_project":  migprojects.Get("enterprise_project").Value(),
					"syncing":             migprojects.Get("syncing").Value(),
					"start_network_check": migprojects.Get("start_network_check").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
