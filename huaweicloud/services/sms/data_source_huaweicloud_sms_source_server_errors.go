// Generated by PMS #674
package sms

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSmsSourceServerErrors() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmsSourceServerErrorsRead,

		Schema: map[string]*schema.Schema{
			"migproject": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the migration project ID.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"migration_errors": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the details of failed source servers.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"error_json": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the error message in JSON format.`,
						},
						"host_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host name of the source server.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the source server name in SMS.`,
						},
						"source_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the source server ID.`,
						},
						"source_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the IP address of the source server.`,
						},
						"target_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the IP address of the target server.`,
						},
					},
				},
			},
		},
	}
}

type SourceServerErrorsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSourceServerErrorsDSWrapper(d *schema.ResourceData, meta interface{}) *SourceServerErrorsDSWrapper {
	return &SourceServerErrorsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmsSourceServerErrorsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSourceServerErrorsDSWrapper(d, meta)
	listErrorServersRst, err := wrapper.ListErrorServers()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listErrorServersToSchema(listErrorServersRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMS GET /v3/errors
func (w *SourceServerErrorsDSWrapper) ListErrorServers() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sms")
	if err != nil {
		return nil, err
	}

	uri := "/v3/errors"
	params := map[string]any{
		"migproject":            w.Get("migproject"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("source_servers", "offset", "limit", 100).
		Request().
		Result()
}

func (w *SourceServerErrorsDSWrapper) listErrorServersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("migration_errors", schemas.SliceToList(body.Get("migration_errors"),
			func(migrationErrors gjson.Result) any {
				return map[string]any{
					"error_json": migrationErrors.Get("error_json").Value(),
					"host_name":  migrationErrors.Get("host_name").Value(),
					"name":       migrationErrors.Get("name").Value(),
					"source_id":  migrationErrors.Get("source_id").Value(),
					"source_ip":  migrationErrors.Get("source_ip").Value(),
					"target_ip":  migrationErrors.Get("target_ip").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
