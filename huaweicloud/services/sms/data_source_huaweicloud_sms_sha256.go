// Generated by PMS #651
package sms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSmsSha256() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmsSha256Read,

		Schema: map[string]*schema.Schema{
			"key": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The keyword.`,
			},
			"value": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The SHA256 hash value.`,
			},
		},
	}
}

type Sha256DSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSha256DSWrapper(d *schema.ResourceData, meta interface{}) *Sha256DSWrapper {
	return &Sha256DSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmsSha256Read(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSha256DSWrapper(d, meta)
	showSha256Rst, err := wrapper.ShowSha256()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showSha256ToSchema(showSha256Rst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMS GET /v3/sha256/{key}
func (w *Sha256DSWrapper) ShowSha256() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sms")
	if err != nil {
		return nil, err
	}

	uri := "/v3/sha256/{key}"
	uri = strings.ReplaceAll(uri, "{key}", w.Get("key").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *Sha256DSWrapper) showSha256ToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("value", body.Get("value").Value()),
	)
	return mErr.ErrorOrNil()
}
