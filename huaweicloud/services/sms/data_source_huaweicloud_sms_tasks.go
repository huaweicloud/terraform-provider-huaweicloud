// Generated by PMS #673
package sms

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSmsTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmsTasksRead,

		Schema: map[string]*schema.Schema{
			"state": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the migration task status.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task name.`,
			},
			"task_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task ID.`,
			},
			"source_server_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the source server ID.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the enterprise project to be queried.`,
			},
			"tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the information about the queried tasks.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the migration task ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task type.`,
						},
						"os_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the OS type.`,
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task status.`,
						},
						"estimate_complete_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the estimated completion time.`,
						},
						"create_date": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the task creation time.`,
						},
						"priority": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the migration process priority.`,
						},
						"speed_limit": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the migration rate limit.`,
						},
						"migrate_speed": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the migration rate, the unit is MB/s.`,
						},
						"compress_rate": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the compression rate.`,
						},
						"start_target_server": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the target server is started after the migration is complete.`,
						},
						"error_json": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the error message.`,
						},
						"total_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the task duration.`,
						},
						"migration_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the IP address of the target server.`,
						},
						"sub_tasks": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the information about subtasks associated with the migration task`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the subtask ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the subtask name.`,
									},
									"progress": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the progress of the subtask.`,
									},
									"start_date": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the start time of the subtask.`,
									},
									"end_date": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the end time of the subtask.`,
									},
									"process_trace": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the detailed progress of the migration or synchronization.`,
									},
								},
							},
						},
						"source_server": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the information about the source server associated with the migration task.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the source server in the SMS database.`,
									},
									"ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the IP address of the source server.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the source server name in SMS.`,
									},
									"os_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the OS type of the source server.`,
									},
									"os_version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the OS version.`,
									},
									"oem_system": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether the OS is an OEM version (Windows).`,
									},
									"state": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the source server status.`,
									},
								},
							},
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the migration project ID.`,
						},
						"target_server": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the information about the target server associated with the migration task.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the target server in the SMS database.`,
									},
									"vm_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the target server.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the name of the target server.`,
									},
									"ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the IP address of the target server.`,
									},
									"os_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the OS type of the target server.`,
									},
									"os_version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the OS version.`,
									},
								},
							},
						},
						"log_collect_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the log collection status.`,
						},
						"clone_server": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the information about the cloned server.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"vm_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the cloned server.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the name of the cloned server.`,
									},
								},
							},
						},
						"syncing": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether synchronization is enabled.`,
						},
						"network_check_info": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the network performance metrics and measurement results.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"domain_connectivity": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates the connectivity to domain names.`,
									},
									"destination_connectivity": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates the connectivity to the target server.`,
									},
									"network_delay": {
										Type:        schema.TypeFloat,
										Computed:    true,
										Description: `Indicates the network latency.`,
									},
									"network_jitter": {
										Type:        schema.TypeFloat,
										Computed:    true,
										Description: `Indicates the network jitter.`,
									},
									"migration_speed": {
										Type:        schema.TypeFloat,
										Computed:    true,
										Description: `Indicates the bandwidth.`,
									},
									"loss_percentage": {
										Type:        schema.TypeFloat,
										Computed:    true,
										Description: `Indicates the packet loss rate.`,
									},
									"cpu_usage": {
										Type:        schema.TypeFloat,
										Computed:    true,
										Description: `Indicates the CPU usage.`,
									},
									"mem_usage": {
										Type:        schema.TypeFloat,
										Computed:    true,
										Description: `Indicates the memory usage.`,
									},
									"evaluation_result": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the network evaluation result.`,
									},
								},
							},
						},
						"special_config": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the configuration information of advanced migration options.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"config_key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the advanced migration option.`,
									},
									"config_value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the value specified for the advanced migration option.`,
									},
									"config_status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the reserved field that describes the configuration status.`,
									},
								},
							},
						},
						"total_cpu_usage": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the CPU usage of the server, the unit is percentage.`,
						},
						"agent_cpu_usage": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the CPU usage of the agent, the unit is percentage.`,
						},
						"total_mem_usage": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the memory usage of the server, the unit is MB.`,
						},
						"agent_mem_usage": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the memory usage of the agent, the unit is MB.`,
						},
						"total_disk_io": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the disk I/O of the server, the unit is MB/s.`,
						},
						"agent_disk_io": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the disk I/O of the agent, the unit is MB/s.`,
						},
						"need_migration_test": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether migration drilling is enabled.`,
						},
					},
				},
			},
		},
	}
}

type TasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTasksDSWrapper(d *schema.ResourceData, meta interface{}) *TasksDSWrapper {
	return &TasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmsTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTasksDSWrapper(d, meta)
	listTasksRst, err := wrapper.ListTasks()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listTasksToSchema(listTasksRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMS GET /v3/tasks
func (w *TasksDSWrapper) ListTasks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sms")
	if err != nil {
		return nil, err
	}

	uri := "/v3/tasks"
	params := map[string]any{
		"state":                 w.Get("state"),
		"name":                  w.Get("name"),
		"id":                    w.Get("task_id"),
		"source_server_id":      w.Get("source_server_id"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("tasks", "offset", "limit", 100).
		Request().
		Result()
}

func (w *TasksDSWrapper) listTasksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("tasks", schemas.SliceToList(body.Get("tasks"),
			func(tasks gjson.Result) any {
				return map[string]any{
					"id":                     tasks.Get("id").Value(),
					"name":                   tasks.Get("name").Value(),
					"type":                   tasks.Get("type").Value(),
					"os_type":                tasks.Get("os_type").Value(),
					"state":                  tasks.Get("state").Value(),
					"estimate_complete_time": tasks.Get("estimate_complete_time").Value(),
					"create_date":            tasks.Get("create_date").Value(),
					"priority":               tasks.Get("priority").Value(),
					"speed_limit":            tasks.Get("speed_limit").Value(),
					"migrate_speed":          tasks.Get("migrate_speed").Value(),
					"compress_rate":          tasks.Get("compress_rate").Value(),
					"start_target_server":    tasks.Get("start_target_server").Value(),
					"error_json":             tasks.Get("error_json").Value(),
					"total_time":             tasks.Get("total_time").Value(),
					"migration_ip":           tasks.Get("migration_ip").Value(),
					"sub_tasks": schemas.SliceToList(tasks.Get("sub_tasks"),
						func(subTasks gjson.Result) any {
							return map[string]any{
								"id":            subTasks.Get("id").Value(),
								"name":          subTasks.Get("name").Value(),
								"progress":      subTasks.Get("progress").Value(),
								"start_date":    subTasks.Get("start_date").Value(),
								"end_date":      subTasks.Get("end_date").Value(),
								"process_trace": subTasks.Get("process_trace").Value(),
							}
						},
					),
					"source_server": schemas.SliceToList(tasks.Get("source_server"),
						func(sourceServer gjson.Result) any {
							return map[string]any{
								"id":         sourceServer.Get("id").Value(),
								"ip":         sourceServer.Get("ip").Value(),
								"name":       sourceServer.Get("name").Value(),
								"os_type":    sourceServer.Get("os_type").Value(),
								"os_version": sourceServer.Get("os_version").Value(),
								"oem_system": sourceServer.Get("oem_system").Value(),
								"state":      sourceServer.Get("state").Value(),
							}
						},
					),
					"enterprise_project_id": tasks.Get("enterprise_project_id").Value(),
					"target_server": schemas.SliceToList(tasks.Get("target_server"),
						func(targetServer gjson.Result) any {
							return map[string]any{
								"id":         targetServer.Get("id").Value(),
								"vm_id":      targetServer.Get("vm_id").Value(),
								"name":       targetServer.Get("name").Value(),
								"ip":         targetServer.Get("ip").Value(),
								"os_type":    targetServer.Get("os_type").Value(),
								"os_version": targetServer.Get("os_version").Value(),
							}
						},
					),
					"log_collect_status": tasks.Get("log_collect_status").Value(),
					"clone_server": schemas.SliceToList(tasks.Get("clone_server"),
						func(cloneServer gjson.Result) any {
							return map[string]any{
								"vm_id": cloneServer.Get("vm_id").Value(),
								"name":  cloneServer.Get("name").Value(),
							}
						},
					),
					"syncing": tasks.Get("syncing").Value(),
					"network_check_info": schemas.SliceToList(tasks.Get("network_check_info"),
						func(networkCheckInfo gjson.Result) any {
							return map[string]any{
								"domain_connectivity":      networkCheckInfo.Get("domain_connectivity").Value(),
								"destination_connectivity": networkCheckInfo.Get("destination_connectivity").Value(),
								"network_delay":            networkCheckInfo.Get("network_delay").Value(),
								"network_jitter":           networkCheckInfo.Get("network_jitter").Value(),
								"migration_speed":          networkCheckInfo.Get("migration_speed").Value(),
								"loss_percentage":          networkCheckInfo.Get("loss_percentage").Value(),
								"cpu_usage":                networkCheckInfo.Get("cpu_usage").Value(),
								"mem_usage":                networkCheckInfo.Get("mem_usage").Value(),
								"evaluation_result":        networkCheckInfo.Get("evaluation_result").Value(),
							}
						},
					),
					"special_config": schemas.SliceToList(tasks.Get("special_config"),
						func(specialConfig gjson.Result) any {
							return map[string]any{
								"config_key":    specialConfig.Get("config_key").Value(),
								"config_value":  specialConfig.Get("config_value").Value(),
								"config_status": specialConfig.Get("config_status").Value(),
							}
						},
					),
					"total_cpu_usage":     tasks.Get("total_cpu_usage").Value(),
					"agent_cpu_usage":     tasks.Get("agent_cpu_usage").Value(),
					"total_mem_usage":     tasks.Get("total_mem_usage").Value(),
					"agent_mem_usage":     tasks.Get("agent_mem_usage").Value(),
					"total_disk_io":       tasks.Get("total_disk_io").Value(),
					"agent_disk_io":       tasks.Get("agent_disk_io").Value(),
					"need_migration_test": tasks.Get("need_migration_test").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
