// Generated by PMS #679
package sms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSmsTaskSslCertificateAndPrivateKey() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSmsTaskSslCertificateAndPrivateKeyRead,

		Schema: map[string]*schema.Schema{
			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the migration task ID.`,
			},
			"enable_ca_cert": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Specifies whether to generate a CA certificate. The default value is **false**.`,
			},
			"cert": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the source certificate.`,
			},
			"private_key": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the source private key.`,
			},
			"ca": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the CA certificate.`,
			},
			"target_mgmt_cert": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the certificate of the target server for migration task management.`,
			},
			"target_mgmt_private_key": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the private key of the target server for migration task management.`,
			},
			"target_data_cert": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the certificate of the target server for data migration.`,
			},
			"target_data_private_key": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the private key of the target server for data migration.`,
			},
		},
	}
}

type TaskSslCertificateAndPrivateKeyDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTaskSslCertificateAndPrivateKeyDSWrapper(d *schema.ResourceData, meta interface{}) *TaskSslCertificateAndPrivateKeyDSWrapper {
	return &TaskSslCertificateAndPrivateKeyDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSmsTaskSslCertificateAndPrivateKeyRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTaskSslCertificateAndPrivateKeyDSWrapper(d, meta)
	showCertKeyRst, err := wrapper.ShowCertKey()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showCertKeyToSchema(showCertKeyRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API SMS GET /v3/tasks/{task_id}/certkey
func (w *TaskSslCertificateAndPrivateKeyDSWrapper) ShowCertKey() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "sms")
	if err != nil {
		return nil, err
	}

	uri := "/v3/tasks/{task_id}/certkey"
	uri = strings.ReplaceAll(uri, "{task_id}", w.Get("task_id").(string))
	params := map[string]any{
		"enable_ca_cert": w.Get("enable_ca_cert"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *TaskSslCertificateAndPrivateKeyDSWrapper) showCertKeyToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("cert", body.Get("cert").Value()),
		d.Set("private_key", body.Get("private_key").Value()),
		d.Set("ca", body.Get("ca").Value()),
		d.Set("target_mgmt_cert", body.Get("target_mgmt_cert").Value()),
		d.Set("target_mgmt_private_key", body.Get("target_mgmt_private_key").Value()),
		d.Set("target_data_cert", body.Get("target_data_cert").Value()),
		d.Set("target_data_private_key", body.Get("target_data_private_key").Value()),
	)
	return mErr.ErrorOrNil()
}
