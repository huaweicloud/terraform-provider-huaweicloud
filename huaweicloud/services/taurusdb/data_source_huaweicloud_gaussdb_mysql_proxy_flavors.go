// Generated by PMS #236
package taurusdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceGaussdbMysqlProxyFlavors() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbMysqlProxyFlavorsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of GaussDB MySQL Instance.`,
			},
			"flavor_groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of flavor groups.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the group type. The value can be **arm** or **x86**.`,
						},
						"flavors": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of flavors.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the proxy flavor.`,
									},
									"db_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the database type.`,
									},
									"vcpus": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the number of vCPUs.`,
									},
									"ram": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the memory size in GB.`,
									},
									"spec_code": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the proxy specification code.`,
									},
									"az_status": {
										Type:        schema.TypeMap,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the key/value pairs of the availability zone status.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type MysqlProxyFlavorsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMysqlProxyFlavorsDSWrapper(d *schema.ResourceData, meta interface{}) *MysqlProxyFlavorsDSWrapper {
	return &MysqlProxyFlavorsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbMysqlProxyFlavorsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMysqlProxyFlavorsDSWrapper(d, meta)
	shoGauMySqlProFlaRst, err := wrapper.ShowGaussMySqlProxyFlavors()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showGaussMySqlProxyFlavorsToSchema(shoGauMySqlProFlaRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDBforMySQL GET /v3/{project_id}/instances/{instance_id}/proxy/flavors
func (w *MysqlProxyFlavorsDSWrapper) ShowGaussMySqlProxyFlavors() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "gaussdb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/proxy/flavors"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *MysqlProxyFlavorsDSWrapper) showGaussMySqlProxyFlavorsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("flavor_groups", schemas.SliceToList(body.Get("proxy_flavor_groups"),
			func(flavorGroups gjson.Result) any {
				return map[string]any{
					"type": flavorGroups.Get("group_type").Value(),
					"flavors": schemas.SliceToList(flavorGroups.Get("proxy_flavors"),
						func(flavors gjson.Result) any {
							return map[string]any{
								"id":        flavors.Get("id").Value(),
								"db_type":   flavors.Get("db_type").Value(),
								"vcpus":     flavors.Get("vcpus").Value(),
								"ram":       flavors.Get("ram").Value(),
								"spec_code": flavors.Get("spec_code").Value(),
								"az_status": flavors.Get("az_status").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
