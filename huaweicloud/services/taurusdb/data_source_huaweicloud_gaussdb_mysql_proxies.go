// Generated by PMS #257
package taurusdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceGaussdbMysqlProxies() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbMysqlProxiesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the GaussDB MySQL instance.`,
			},
			"proxy_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of proxies.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the proxy ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the proxy name.`,
						},
						"flavor": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the flavor of the proxy.`,
						},
						"port": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the proxy port.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the proxy instance.`,
						},
						"delay_threshold_in_seconds": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the delay threshold in seconds.`,
						},
						"node_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of proxy nodes.`,
						},
						"ram": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the memory size of the proxy.`,
						},
						"connection_pool_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the connection pool type.`,
						},
						"switch_connection_pool_type_enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the proxy version supports session-level connection pool.`,
						},
						"mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the proxy mode.`,
						},
						"elb_vip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the virtual IP address in ELB mode.`,
						},
						"vcpus": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the number of vCPUs of the proxy.`,
						},
						"transaction_split": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates whether the proxy transaction splitting is enabled.`,
						},
						"balance_route_mode_enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the proxy version supports load balancing.`,
						},
						"route_mode": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the routing policy of the proxy instance.`,
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the network ID of a subnet.`,
						},
						"consistence_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the consistency mode of the proxy.`,
						},
						"ssl_option": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates whether to enable or disable SSL.`,
						},
						"new_node_auto_add_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates whether new nodes are automatically associate with proxy.`,
						},
						"new_node_weight": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the read weight of the new node.`,
						},
						"address": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the address of the proxy.`,
						},
						"nodes": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the node information of the proxy.`,
							Elem:        nodesElem(),
						},
						"master_node_weight": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the read weight of the master node.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the node ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the node name.`,
									},
									"weight": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the weight assigned to the node.`,
									},
								},
							},
						},
						"readonly_nodes_weight": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the read weight of the read-only node.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the node ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the node name.`,
									},
									"weight": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the weight assigned to the node.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// nodesElem
// The Elem of "nodes"
func nodesElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the proxy node ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the proxy node name.`,
			},
			"role": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the proxy node role.`,
			},
			"az_code": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the proxy node AZ.`,
			},
			"status": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the proxy node status.`,
			},
			"frozen_flag": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates whether the proxy node is frozen.`,
			},
		},
	}
}

type MysqlProxiesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMysqlProxiesDSWrapper(d *schema.ResourceData, meta interface{}) *MysqlProxiesDSWrapper {
	return &MysqlProxiesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbMysqlProxiesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMysqlProxiesDSWrapper(d, meta)
	shoGauMySqlProLisRst, err := wrapper.ShowGaussMySqlProxyList()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showGaussMySqlProxyListToSchema(shoGauMySqlProLisRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDBforMySQL GET /v3/{project_id}/instances/{instance_id}/proxies
func (w *MysqlProxiesDSWrapper) ShowGaussMySqlProxyList() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "gaussdb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/proxies"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("proxy_list", "offset", "limit", 0).
		Request().
		Result()
}

func (w *MysqlProxiesDSWrapper) showGaussMySqlProxyListToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("proxy_list", schemas.SliceToList(body.Get("proxy_list"),
			func(proxyList gjson.Result) any {
				return map[string]any{
					"id":                                  proxyList.Get("proxy.pool_id").Value(),
					"name":                                proxyList.Get("proxy.name").Value(),
					"flavor":                              proxyList.Get("proxy.flavor_ref").Value(),
					"port":                                proxyList.Get("proxy.port").Value(),
					"status":                              proxyList.Get("proxy.status").Value(),
					"delay_threshold_in_seconds":          proxyList.Get("proxy.delay_threshold_in_seconds").Value(),
					"node_num":                            proxyList.Get("proxy.node_num").Value(),
					"ram":                                 proxyList.Get("proxy.ram").Value(),
					"connection_pool_type":                proxyList.Get("proxy.connection_pool_type").Value(),
					"switch_connection_pool_type_enabled": proxyList.Get("proxy.switch_connection_pool_type_enabled").Value(),
					"mode":                                proxyList.Get("proxy.mode").Value(),
					"elb_vip":                             proxyList.Get("proxy.elb_vip").Value(),
					"vcpus":                               proxyList.Get("proxy.vcpus").Value(),
					"transaction_split":                   w.setProLisProTraSplit(proxyList),
					"balance_route_mode_enabled":          proxyList.Get("proxy.balance_route_mode_enabled").Value(),
					"route_mode":                          proxyList.Get("proxy.route_mode").Value(),
					"subnet_id":                           proxyList.Get("proxy.subnet_id").Value(),
					"consistence_mode":                    proxyList.Get("proxy.consistence_mode").Value(),
					"ssl_option":                          proxyList.Get("proxy.ssl_option").Value(),
					"new_node_auto_add_status":            proxyList.Get("proxy.new_node_auto_add_status").Value(),
					"new_node_weight":                     proxyList.Get("proxy.new_node_weight").Value(),
					"address":                             proxyList.Get("proxy.address").Value(),
					"nodes":                               w.setProxyListProxyNodes(proxyList),
					"master_node_weight": schemas.SliceToList(proxyList.Get("master_node"),
						func(masterNodeWeight gjson.Result) any {
							return map[string]any{
								"id":     masterNodeWeight.Get("id").Value(),
								"name":   masterNodeWeight.Get("name").Value(),
								"weight": masterNodeWeight.Get("weight").Value(),
							}
						},
					),
					"readonly_nodes_weight": schemas.SliceToList(proxyList.Get("readonly_nodes"),
						func(readonlyNodesWeight gjson.Result) any {
							return map[string]any{
								"id":     readonlyNodesWeight.Get("id").Value(),
								"name":   readonlyNodesWeight.Get("name").Value(),
								"weight": readonlyNodesWeight.Get("weight").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*MysqlProxiesDSWrapper) setProLisProTraSplit(data gjson.Result) string {
	transactionSplit := data.Get("transaction_split").String()
	if transactionSplit == "true" {
		return "ON"
	}
	return "OFF"
}

func (*MysqlProxiesDSWrapper) setProxyListProxyNodes(proxyList gjson.Result) any {
	return schemas.SliceToList(proxyList.Get("proxy.nodes"), func(nodes gjson.Result) any {
		return map[string]any{
			"id":          nodes.Get("id").Value(),
			"name":        nodes.Get("name").Value(),
			"role":        nodes.Get("role").Value(),
			"az_code":     nodes.Get("az_code").Value(),
			"status":      nodes.Get("status").Value(),
			"frozen_flag": nodes.Get("frozen_flag").Value(),
		}
	})
}
