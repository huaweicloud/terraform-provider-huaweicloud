// Generated by PMS #171
package taurusdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbMysqlDatabases() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbMysqlDatabasesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of GaussDB MySQL Instance.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the database name.`,
			},
			"character_set": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the database character set,`,
			},
			"databases": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list databases.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the  database name.`,
						},
						"character_set": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the  database character set.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the  database comment.`,
						},
						"users": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of authorized database users.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the  database username.`,
									},
									"host": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the  host IP address.`,
									},
									"readonly": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Indicates whether the database permission is read-only.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type MysqlDatabasesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMysqlDatabasesDSWrapper(d *schema.ResourceData, meta interface{}) *MysqlDatabasesDSWrapper {
	return &MysqlDatabasesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbMysqlDatabasesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMysqlDatabasesDSWrapper(d, meta)
	lisGauMySqlDatRst, err := wrapper.ListGaussMySqlDatabase()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listGaussMySqlDatabaseToSchema(lisGauMySqlDatRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GAUSSDB GET /v3/{project_id}/instances/{instance_id}/databases
func (w *MysqlDatabasesDSWrapper) ListGaussMySqlDatabase() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "gaussdb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/databases"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"name":    w.Get("name"),
		"charset": w.Get("character_set"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("databases", "offset", "limit", 0).
		OkCode(200).
		Request().
		Result()
}

func (w *MysqlDatabasesDSWrapper) listGaussMySqlDatabaseToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("databases", schemas.SliceToList(body.Get("databases"),
			func(databases gjson.Result) any {
				return map[string]any{
					"name":          databases.Get("name").Value(),
					"character_set": databases.Get("charset").Value(),
					"description":   databases.Get("comment").Value(),
					"users": schemas.SliceToList(databases.Get("users"),
						func(users gjson.Result) any {
							return map[string]any{
								"name":     users.Get("name").Value(),
								"host":     users.Get("host").Value(),
								"readonly": users.Get("readonly").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
