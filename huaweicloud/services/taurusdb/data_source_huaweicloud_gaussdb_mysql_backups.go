// Generated by PMS #75
package taurusdb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbMysqlBackups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbMysqlBackupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the GaussDB MySQL instance.`,
			},
			"backup_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the backup.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the backup name.`,
			},
			"backup_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the backup type.`,
			},
			"instance_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the instance name.`,
			},
			"begin_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the backup start time. The format is **yyyy-mm-ddThh:mm:ssZ**.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the backup end time.The format is **yyyy-mm-ddThh:mm:ssZ**.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the backup type.`,
			},
			"backups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of backups.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the backup.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the backup.`,
						},
						"instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the GaussDB MySQL instance.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the GaussDB MySQL instance.`,
						},
						"begin_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
						},
						"take_up_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the backup duration in minutes.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup type.`,
						},
						"size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the backup size in MB.`,
						},
						"datastore": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the database information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the database engine.`,
									},
									"version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the database version.`,
									},
								},
							},
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup type.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description of the backup.`,
						},
					},
				},
			},
		},
	}
}

type MysqlBackupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMysqlBackupsDSWrapper(d *schema.ResourceData, meta interface{}) *MysqlBackupsDSWrapper {
	return &MysqlBackupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbMysqlBackupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMysqlBackupsDSWrapper(d, meta)
	shoGauMySqlBacLisRst, err := wrapper.ShowGaussMySqlBackupList()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showGaussMySqlBackupListToSchema(shoGauMySqlBacLisRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDBforMySQL GET /v3/{project_id}/backups
func (w *MysqlBackupsDSWrapper) ShowGaussMySqlBackupList() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "gaussdb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/backups"
	params := map[string]any{
		"instance_id":   w.Get("instance_id"),
		"backup_id":     w.Get("backup_id"),
		"backup_type":   w.Get("backup_type"),
		"begin_time":    w.Get("begin_time"),
		"end_time":      w.Get("end_time"),
		"name":          w.Get("name"),
		"instance_name": w.Get("instance_name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("backups", "offset", "limit", 0).
		Filter(
			filters.New().From("backups").
				Where("status", "=", w.Get("status")),
		).
		Request().
		Result()
}

func (w *MysqlBackupsDSWrapper) showGaussMySqlBackupListToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("backups", schemas.SliceToList(body.Get("backups"),
			func(backup gjson.Result) any {
				return map[string]any{
					"id":            backup.Get("id").Value(),
					"name":          backup.Get("name").Value(),
					"instance_name": backup.Get("instance_name").Value(),
					"instance_id":   backup.Get("instance_id").Value(),
					"begin_time":    backup.Get("begin_time").Value(),
					"end_time":      backup.Get("end_time").Value(),
					"take_up_time":  backup.Get("take_up_time").Value(),
					"type":          backup.Get("type").Value(),
					"size":          backup.Get("size").Value(),
					"datastore": schemas.SliceToList(backup.Get("datastore"),
						func(datastore gjson.Result) any {
							return map[string]any{
								"type":    datastore.Get("type").Value(),
								"version": datastore.Get("version").Value(),
							}
						},
					),
					"status":      backup.Get("status").Value(),
					"description": backup.Get("description").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
