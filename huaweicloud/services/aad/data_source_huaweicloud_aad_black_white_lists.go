// Generated by PMS #637
package aad

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceAadBlackWhiteLists() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAadBlackWhiteListsRead,

		Schema: map[string]*schema.Schema{
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the AAD instance ID.`,
			},
			"type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the rule type.`,
			},
			"ips": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The IP address list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"desc": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description.`,
						},
						"ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The black white IP address.`,
						},
					},
				},
			},
		},
	}
}

type BlackWhiteListsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newBlackWhiteListsDSWrapper(d *schema.ResourceData, meta interface{}) *BlackWhiteListsDSWrapper {
	return &BlackWhiteListsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAadBlackWhiteListsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newBlackWhiteListsDSWrapper(d, meta)
	lisWhiBlaIpRulRst, err := wrapper.ListWhiteBlackIpRule()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listWhiteBlackIpRuleToSchema(lisWhiBlaIpRulRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API AAD GET /v2/aad/policies/ddos/blackwhite-list
func (w *BlackWhiteListsDSWrapper) ListWhiteBlackIpRule() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "aad")
	if err != nil {
		return nil, err
	}

	uri := "/v2/aad/policies/ddos/blackwhite-list"
	params := map[string]any{
		"type":        w.Get("type"),
		"instance_id": w.Get("instance_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *BlackWhiteListsDSWrapper) listWhiteBlackIpRuleToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("ips", schemas.SliceToList(body.Get("ips"),
			func(ips gjson.Result) any {
				return map[string]any{
					"desc": ips.Get("desc").Value(),
					"ip":   ips.Get("ip").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
