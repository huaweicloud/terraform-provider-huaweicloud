// Generated by PMS #681
package aad

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceAadSourceIps() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAadSourceIpsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"ips": {
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `The list of back-to-origin IP address.`,
			},
		},
	}
}

type SourceIpsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSourceIpsDSWrapper(d *schema.ResourceData, meta interface{}) *SourceIpsDSWrapper {
	return &SourceIpsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAadSourceIpsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSourceIpsDSWrapper(d, meta)
	listSourceIpsRst, err := wrapper.ListSourceIps()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSourceIpsToSchema(listSourceIpsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API AAD GET /v1/{project_id}/aad/external/source-ip
func (w *SourceIpsDSWrapper) ListSourceIps() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "aad")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/aad/external/source-ip"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SourceIpsDSWrapper) listSourceIpsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("ips", body.Get("ips").Value()),
	)
	return mErr.ErrorOrNil()
}
