// Generated by PMS #643
package aad

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceAadWebProtectionPolicies() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAadWebProtectionPoliciesRead,

		Schema: map[string]*schema.Schema{
			"domain_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the domain name.`,
			},
			"overseas_type": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: `Specifies the overseas type.`,
			},
			"options": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The protection options.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"geoip": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable regional ban protection.`,
						},
						"whiteblackip": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable blacklist and whitelist protection.`,
						},
						"modulex_enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable intelligent CC protection.`,
						},
						"cc": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable CC (frequency control).`,
						},
						"custom": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable precise access protection.`,
						},
					},
				},
			},
			"level": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The intelligent CC protection level.`,
			},
			"mode": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The smart CC mode.`,
			},
		},
	}
}

type WebProtectionPoliciesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newWebProtectionPoliciesDSWrapper(d *schema.ResourceData, meta interface{}) *WebProtectionPoliciesDSWrapper {
	return &WebProtectionPoliciesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAadWebProtectionPoliciesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newWebProtectionPoliciesDSWrapper(d, meta)
	showWafPolicyRst, err := wrapper.ShowWafPolicy()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showWafPolicyToSchema(showWafPolicyRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API AAD GET /v2/aad/policies/waf
func (w *WebProtectionPoliciesDSWrapper) ShowWafPolicy() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "aad")
	if err != nil {
		return nil, err
	}

	uri := "/v2/aad/policies/waf"
	params := map[string]any{
		"domain_name":   w.Get("domain_name"),
		"overseas_type": w.Get("overseas_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *WebProtectionPoliciesDSWrapper) showWafPolicyToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("options", schemas.ObjectToList(body.Get("options"),
			func(options gjson.Result) any {
				return map[string]any{
					"geoip":           options.Get("geoip").Value(),
					"whiteblackip":    options.Get("whiteblackip").Value(),
					"modulex_enabled": options.Get("modulex_enabled").Value(),
					"cc":              options.Get("cc").Value(),
					"custom":          options.Get("custom").Value(),
				}
			},
		)),
		d.Set("level", body.Get("level").Value()),
		d.Set("mode", body.Get("mode").Value()),
	)
	return mErr.ErrorOrNil()
}
