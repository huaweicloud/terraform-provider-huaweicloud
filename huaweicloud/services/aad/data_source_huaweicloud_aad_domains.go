// Generated by PMS #680
package aad

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceAadDomains() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAadDomainsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"items": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of domains.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"domain_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The domain name.`,
						},
						"cname": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The domain cname.`,
						},
						"protocol": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The domain protocol.`,
						},
						"real_server_type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The type of real server.`,
						},
						"real_servers": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The real servers.`,
						},
						"waf_status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The WAF status.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The domain ID.`,
						},
					},
				},
			},
		},
	}
}

type DomainsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDomainsDSWrapper(d *schema.ResourceData, meta interface{}) *DomainsDSWrapper {
	return &DomainsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAadDomainsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDomainsDSWrapper(d, meta)
	listDomainRst, err := wrapper.ListDomain()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listDomainToSchema(listDomainRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API AAD GET /v1/aad/protected-domains
func (w *DomainsDSWrapper) ListDomain() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "aad")
	if err != nil {
		return nil, err
	}

	uri := "/v1/aad/protected-domains"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *DomainsDSWrapper) listDomainToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("items", schemas.SliceToList(body.Get("items"),
			func(items gjson.Result) any {
				return map[string]any{
					"domain_name":           items.Get("domain_name").Value(),
					"cname":                 items.Get("cname").Value(),
					"protocol":              schemas.SliceToStrList(items.Get("protocol")),
					"real_server_type":      items.Get("real_server_type").Value(),
					"real_servers":          items.Get("real_servers").Value(),
					"waf_status":            items.Get("waf_status").Value(),
					"enterprise_project_id": items.Get("enterprise_project_id").Value(),
					"domain_id":             items.Get("domain_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
