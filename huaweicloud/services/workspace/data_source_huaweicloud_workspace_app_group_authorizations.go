// Generated by PMS #449
package workspace

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWorkspaceAppGroupAuthorizations() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWorkspaceAppGroupAuthorizationsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the authorizations. If omitted, the provider-level region will be used.`,
			},
			"app_group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the authorized application group ID.`,
			},
			"account": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the authorized account. Fuzzy search is supported.`,
			},
			"account_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the authorized account.`,
			},
			"authorizations": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All authorizations that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The authorized ID.`,
						},
						"account_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the authorized account.`,
						},
						"account": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the authorized account.`,
						},
						"account_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the authorized account.`,
						},
						"app_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The application group ID corresponding to the authorized account.`,
						},
						"app_group_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The application group name corresponding to the authorized account.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the account is authorized to the specified application group, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type AppGroupAuthorizationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAppGroupAuthorizationsDSWrapper(d *schema.ResourceData, meta interface{}) *AppGroupAuthorizationsDSWrapper {
	return &AppGroupAuthorizationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWorkspaceAppGroupAuthorizationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAppGroupAuthorizationsDSWrapper(d, meta)
	lisAppGroAutRst, err := wrapper.ListAppGroupAuthorization()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAppGroupAuthorizationToSchema(lisAppGroAutRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API Workspace GET /v1/{project_id}/app-groups/actions/list-authorizations
func (w *AppGroupAuthorizationsDSWrapper) ListAppGroupAuthorization() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "appstream")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/app-groups/actions/list-authorizations"
	params := map[string]any{
		"app_group_id": w.Get("app_group_id"),
		"account":      w.Get("account"),
		"account_type": w.Get("account_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("authorizations", "offset", "limit", 100).
		Request().
		Result()
}

func (w *AppGroupAuthorizationsDSWrapper) listAppGroupAuthorizationToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("authorizations", schemas.SliceToList(body.Get("authorizations"),
			func(authorizations gjson.Result) any {
				return map[string]any{
					"id":             authorizations.Get("id").Value(),
					"account_id":     authorizations.Get("account_id").Value(),
					"account":        authorizations.Get("account").Value(),
					"account_type":   authorizations.Get("account_type").Value(),
					"app_group_id":   authorizations.Get("app_group_id").Value(),
					"app_group_name": authorizations.Get("app_group_name").Value(),
					"created_at":     w.setAutCreAt(authorizations),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AppGroupAuthorizationsDSWrapper) setAutCreAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("create_at").String())/1000, false)
}
