// Generated by PMS #452
package workspace

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWorkspaceAppGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWorkspaceAppGroupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"server_group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the server group ID associated with the application group.`,
			},
			"group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the application group.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the application group.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the application group.`,
			},
			"groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All application groups that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the application group.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the application group.`,
						},
						"server_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The server group ID associated with the application group.`,
						},
						"server_group_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The server group name associated with the application group.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the application group.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the application group.`,
						},
						"app_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of associated applications.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the application group, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type AppGroupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAppGroupsDSWrapper(d *schema.ResourceData, meta interface{}) *AppGroupsDSWrapper {
	return &AppGroupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWorkspaceAppGroupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAppGroupsDSWrapper(d, meta)
	listAppGroupRst, err := wrapper.ListAppGroup()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAppGroupToSchema(listAppGroupRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API Workspace GET /v1/{project_id}/app-groups
func (w *AppGroupsDSWrapper) ListAppGroup() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "appstream")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/app-groups"
	params := map[string]any{
		"app_server_group_id": w.Get("server_group_id"),
		"app_group_id":        w.Get("group_id"),
		"name":                w.Get("name"),
		"app_type":            w.Get("type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("items", "offset", "limit", 100).
		Request().
		Result()
}

func (w *AppGroupsDSWrapper) listAppGroupToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("groups", schemas.SliceToList(body.Get("items"),
			func(groups gjson.Result) any {
				return map[string]any{
					"id":                groups.Get("id").Value(),
					"name":              groups.Get("name").Value(),
					"server_group_id":   groups.Get("app_server_group_id").Value(),
					"server_group_name": groups.Get("app_server_group_name").Value(),
					"description":       groups.Get("description").Value(),
					"type":              groups.Get("app_type").Value(),
					"app_count":         groups.Get("app_count").Value(),
					"created_at":        w.setItemsCreateAt(groups),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AppGroupsDSWrapper) setItemsCreateAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("create_at").String())/1000, false)
}
