// Generated by PMS #445
package workspace

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWorkspaceAppImageServers() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWorkspaceAppImageServersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specified the name of the image server.`,
			},
			"server_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specified the ID of the image server.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the enterprise project to which the image server belong.`,
			},
			"servers": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All image servers that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the image server.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the image server.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the image server.`,
						},
						"image_generated_product_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the generated image product.`,
						},
						"image_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the basic image to which the image server belongs.`,
						},
						"image_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the basic image to which the image server belongs.`,
						},
						"spce_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The specification code of the basic image to which the image server belongs.`,
						},
						"aps_server_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the APS server group associated with the image server.`,
						},
						"aps_server_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the APS server associated with the image server.`,
						},
						"app_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the application group associated with the image server.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current status of the image server.`,
						},
						"authorize_accounts": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of authorized users of the application group associated with the image server.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"account": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the account.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The type of the account.`,
									},
									"domain": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The domain name of the Workspace service.`,
									},
								},
							},
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID to which the image server belongs.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the image server, in RFC3339 format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the image server, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type AppImageServersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAppImageServersDSWrapper(d *schema.ResourceData, meta interface{}) *AppImageServersDSWrapper {
	return &AppImageServersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWorkspaceAppImageServersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAppImageServersDSWrapper(d, meta)
	listImageServersRst, err := wrapper.ListImageServers()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listImageServersToSchema(listImageServersRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API Workspace GET /v1/{project_id}/image-servers
func (w *AppImageServersDSWrapper) ListImageServers() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "appstream")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/image-servers"
	params := map[string]any{
		"server_name":           w.Get("name"),
		"server_id":             w.Get("server_id"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("items", "offset", "limit", 100).
		Request().
		Result()
}

func (w *AppImageServersDSWrapper) listImageServersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("servers", schemas.SliceToList(body.Get("items"),
			func(servers gjson.Result) any {
				return map[string]any{
					"image_id":                   servers.Get("image_ref.id").Value(),
					"image_type":                 servers.Get("image_ref.image_type").Value(),
					"spce_code":                  servers.Get("image_ref.spce_code").Value(),
					"id":                         servers.Get("id").Value(),
					"name":                       servers.Get("name").Value(),
					"description":                servers.Get("description").Value(),
					"image_generated_product_id": servers.Get("image_id").Value(),
					"aps_server_group_id":        servers.Get("server_group_id").Value(),
					"aps_server_id":              servers.Get("server_id").Value(),
					"app_group_id":               servers.Get("app_group_id").Value(),
					"status":                     servers.Get("status").Value(),
					"authorize_accounts": schemas.SliceToList(servers.Get("authorize_accounts"),
						func(authorizeAccounts gjson.Result) any {
							return map[string]any{
								"account": authorizeAccounts.Get("account").Value(),
								"type":    authorizeAccounts.Get("account_type").Value(),
								"domain":  authorizeAccounts.Get("domain").Value(),
							}
						},
					),
					"enterprise_project_id": servers.Get("enterprise_project_id").Value(),
					"created_at":            w.setItemsCreateTime(servers),
					"updated_at":            w.setItemsUpdateTime(servers),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AppImageServersDSWrapper) setItemsCreateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("create_time").String())/1000, false)
}

func (*AppImageServersDSWrapper) setItemsUpdateTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("update_time").String())/1000, false)
}
