// Generated by PMS #385
package workspace

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/chnsz/golangsdk"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/common"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func ResourceWorkspaceAppGroup() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceWorkspaceAppGroupCreate,
		ReadContext:   resourceWorkspaceAppGroupRead,
		UpdateContext: resourceWorkspaceAppGroupUpdate,
		DeleteContext: resourceWorkspaceAppGroupDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				ForceNew:    true,
				Optional:    true,
				Computed:    true,
				Description: `The region in which to create the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the name of the application group.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Computed:    true,
				Description: `Specifies the type of the application group.`,
			},
			"server_group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the server group ID associated with the application group.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the description of the application group.`,
			},
			"created_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The creation time of the application group, in RFC3339 format.`,
			},
		},
	}
}

type AppGroupRSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAppGroupRSWrapper(d *schema.ResourceData, meta interface{}) *AppGroupRSWrapper {
	return &AppGroupRSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func resourceWorkspaceAppGroupCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAppGroupRSWrapper(d, meta)
	rst, err := wrapper.CreateAppGroup()
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(rst.Get("id").String())

	return resourceWorkspaceAppGroupRead(ctx, d, meta)
}

func resourceWorkspaceAppGroupRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAppGroupRSWrapper(d, meta)
	listAppGroupRst, err := wrapper.ListAppGroup()
	if err != nil {
		return common.CheckDeletedDiag(d, err, "error retrieving Workspace APP group")
	}

	if len(listAppGroupRst.Get("items").Array()) == 0 {
		return common.CheckDeletedDiag(d, golangsdk.ErrDefault404{}, "error retrieving Workspace APP group")
	}

	err = wrapper.listAppGroupToSchema(listAppGroupRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func resourceWorkspaceAppGroupUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAppGroupRSWrapper(d, meta)

	if d.HasChanges("server_group_id", "description", "name") {
		_, err := wrapper.UpdateAppGroup()
		if err != nil {
			return diag.FromErr(err)
		}
	}

	return resourceWorkspaceAppGroupRead(ctx, d, meta)
}

func resourceWorkspaceAppGroupDelete(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAppGroupRSWrapper(d, meta)
	// The status code for each execution is `200`.
	_, err := wrapper.BatchDeleteAppGroup()
	if err != nil {
		return common.CheckDeletedDiag(d, err, "error deleting Workspace APP group")
	}

	resp, err := wrapper.ListAppGroup()
	if err != nil {
		return common.CheckDeletedDiag(d, err, "unable to get Workspace APP group")
	}

	if len(resp.Get("items").Array()) == 0 {
		return common.CheckDeletedDiag(d, golangsdk.ErrDefault404{}, "error deleting Workspace APP group")
	}

	return diag.Errorf("error deleting Workspace APP group: the app group (%s) still exists", d.Id())
}

// @API WORKSPACEAPP POST /v1/{project_id}/app-groups/batch-delete
func (w *AppGroupRSWrapper) BatchDeleteAppGroup() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "appstream")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/app-groups/batch-delete"
	params := map[string]any{
		"ids": []string{w.Id()},
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("POST").
		URI(uri).
		Body(params).
		Send()
}

// @API WORKSPACEAPP POST /v1/{project_id}/app-groups
func (w *AppGroupRSWrapper) CreateAppGroup() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "appstream")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/app-groups"
	params := map[string]any{
		"app_server_group_id": w.Get("server_group_id", true),
		"description":         w.Get("description", true),
		"name":                w.Get("name"),
		"app_type":            w.Get("type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("POST").
		URI(uri).
		Body(params).
		Request().
		Result()
}

// @API WORKSPACEAPP GET /v1/{project_id}/app-groups
func (w *AppGroupRSWrapper) ListAppGroup() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "appstream")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/app-groups"
	params := map[string]any{
		"app_group_id": w.Id(),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

// @API WORKSPACEAPP PATCH /v1/{project_id}/app-groups/{app_group_id}
func (w *AppGroupRSWrapper) UpdateAppGroup() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "appstream")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/app-groups/{app_group_id}"
	uri = strings.ReplaceAll(uri, "{app_group_id}", w.Id())
	params := map[string]any{
		"app_server_group_id": w.Get("server_group_id", true),
		"description":         w.Get("description", true),
		"name":                w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("PATCH").
		URI(uri).
		Body(params).
		Request().
		Result()
}

func (w *AppGroupRSWrapper) listAppGroupToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("name", body.Get("items.0.name").Value()),
		d.Set("server_group_id", body.Get("items.0.app_server_group_id").Value()),
		d.Set("description", body.Get("items.0.description").Value()),
		d.Set("type", body.Get("items.0.app_type").Value()),
		d.Set("created_at", w.setItemsCreateAt(*body)),
	)
	return mErr.ErrorOrNil()
}

func (*AppGroupRSWrapper) setItemsCreateAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("items.0.create_at").String())/1000, false)
}
