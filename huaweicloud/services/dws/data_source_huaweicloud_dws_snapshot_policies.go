// Generated by PMS #296
package dws

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDwsSnapshotPolicies() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDwsSnapshotPoliciesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the DWS cluster ID to which the snapshot policies belong.`,
			},
			"keep_day": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The number of days to retain the generated automated snapshot.`,
			},
			"device_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The device on which the snapshots are stored.`,
			},
			"server_ips": {
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `The shared IP addresses of the NFS corresponding to the snapshots.`,
			},
			"policies": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All automated snapshot policies that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the snapshot policy.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the snapshot policy.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the snapshot policy.`,
						},
						"strategy": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The execution strategy of the snapshot.`,
						},
						"backup_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The backup level of the snapshot.`,
						},
						"next_fire_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The start time for doing next snapshot, in RFC3339 format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the snapshot policy, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type SnapshotPoliciesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSnapshotPoliciesDSWrapper(d *schema.ResourceData, meta interface{}) *SnapshotPoliciesDSWrapper {
	return &SnapshotPoliciesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDwsSnapshotPoliciesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSnapshotPoliciesDSWrapper(d, meta)
	lisSnaPolRst, err := wrapper.ListSnapshotPolicy()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSnapshotPolicyToSchema(lisSnaPolRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DWS GET /v2/{project_id}/clusters/{cluster_id}/snapshot-policies
func (w *SnapshotPoliciesDSWrapper) ListSnapshotPolicy() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dws")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/clusters/{cluster_id}/snapshot-policies"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SnapshotPoliciesDSWrapper) listSnapshotPolicyToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("keep_day", body.Get("keep_day").Value()),
		d.Set("device_name", body.Get("device_name").Value()),
		d.Set("server_ips", body.Get("server_ips").Value()),
		d.Set("policies", schemas.SliceToList(body.Get("backup_strategies"),
			func(policies gjson.Result) any {
				return map[string]any{
					"id":             policies.Get("policy_id").Value(),
					"name":           policies.Get("policy_name").Value(),
					"type":           policies.Get("backup_type").Value(),
					"strategy":       policies.Get("backup_strategy").Value(),
					"backup_level":   policies.Get("backup_level").Value(),
					"next_fire_time": w.setBacStrNexFirTime(policies),
					"updated_at":     w.setBacStrUpdTime(policies),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*SnapshotPoliciesDSWrapper) setBacStrNexFirTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("next_fire_time").Int()/1000, false)
}

func (*SnapshotPoliciesDSWrapper) setBacStrUpdTime(data gjson.Result) string {
	timeStamp := utils.ConvertTimeStrToNanoTimestamp(data.Get("update_time").String(), "2006-01-02T15:04:05") / 1000
	return utils.FormatTimeStampRFC3339(timeStamp, false)
}
