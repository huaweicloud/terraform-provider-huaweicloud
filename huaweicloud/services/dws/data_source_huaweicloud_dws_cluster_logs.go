// Generated by PMS #300
package dws

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDwsClusterLogs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDwsClusterLogsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the DWS cluster ID to which the logs belong.`,
			},
			"status": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Whether the LTS log function is enabled.`,
			},
			"logs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All LTS logs that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the log.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the log.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the log.`,
						},
						"access_url": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The URL to access the LTS log.`,
						},
					},
				},
			},
		},
	}
}

type ClusterLogsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newClusterLogsDSWrapper(d *schema.ResourceData, meta interface{}) *ClusterLogsDSWrapper {
	return &ClusterLogsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDwsClusterLogsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newClusterLogsDSWrapper(d, meta)
	listLtsLogsRst, err := wrapper.ListLtsLogs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listLtsLogsToSchema(listLtsLogsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DWS GET /v1/{project_id}/clusters/{cluster_id}/lts-logs
func (w *ClusterLogsDSWrapper) ListLtsLogs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dws")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/clusters/{cluster_id}/lts-logs"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("lts_access_list", "offset", "limit", 100).
		Request().
		Result()
}

func (w *ClusterLogsDSWrapper) listLtsLogsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("status", body.Get("access_status").Value()),
		d.Set("logs", schemas.SliceToList(body.Get("lts_access_list"),
			func(logs gjson.Result) any {
				return map[string]any{
					"id":          logs.Get("id").Value(),
					"type":        logs.Get("log_type").Value(),
					"description": logs.Get("log_desc").Value(),
					"access_url":  logs.Get("access_url").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
