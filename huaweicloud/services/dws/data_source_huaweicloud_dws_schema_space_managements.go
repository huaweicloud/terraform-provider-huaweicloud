// Generated by PMS #336
package dws

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDwsSchemaSpaceManagements() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDwsSchemaSpaceManagementsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the DWS cluster ID.`,
			},
			"database_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the database name to which the schema space management belongs.`,
			},
			"schema_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the schema. Fuzzy search is supported.`,
			},
			"schemas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All schemas that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"database_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The database name corresponding to the schema.`,
						},
						"schema_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the schema.`,
						},
						"used": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of schema spaces used, in bytes.`,
						},
						"space_limit": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of available spaces, in bytes.`,
						},
						"skew_percent": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The skew rate of the schema.`,
						},
						"min_value": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of used spaces by the DN with the minimum usage, in bytes.`,
						},
						"max_value": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of used spaces by the DN with the maximum usage, in bytes.`,
						},
						"dn_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of DNs.`,
						},
						"min_dn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The DN that uses the least space.`,
						},
						"max_dn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The DN that uses the most space.`,
						},
					},
				},
			},
		},
	}
}

type SchemaSpaceManagementsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSchemaSpaceManagementsDSWrapper(d *schema.ResourceData, meta interface{}) *SchemaSpaceManagementsDSWrapper {
	return &SchemaSpaceManagementsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDwsSchemaSpaceManagementsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSchemaSpaceManagementsDSWrapper(d, meta)
	listSchemasRst, err := wrapper.ListSchemas()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSchemasToSchema(listSchemasRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DWS GET /v2/{project_id}/clusters/{cluster_id}/databases/{database_name}/schemas
func (w *SchemaSpaceManagementsDSWrapper) ListSchemas() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dws")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/clusters/{cluster_id}/databases/{database_name}/schemas"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	uri = strings.ReplaceAll(uri, "{database_name}", w.Get("database_name").(string))
	params := map[string]any{
		"keywords": w.Get("schema_name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("schemas", "offset", "limit", 100).
		Request().
		Result()
}

func (w *SchemaSpaceManagementsDSWrapper) listSchemasToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("schemas", schemas.SliceToList(body.Get("schemas"),
			func(schemas gjson.Result) any {
				return map[string]any{
					"database_name": schemas.Get("database_name").Value(),
					"schema_name":   schemas.Get("schema_name").Value(),
					"used":          schemas.Get("total_value").Value(),
					"space_limit":   schemas.Get("perm_space").Value(),
					"skew_percent":  schemas.Get("skew_percent").Value(),
					"min_value":     schemas.Get("min_value").Value(),
					"max_value":     schemas.Get("max_value").Value(),
					"dn_num":        schemas.Get("dn_num").Value(),
					"min_dn":        schemas.Get("min_dn").Value(),
					"max_dn":        schemas.Get("max_dn").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
