// Generated by PMS #247
package dws

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDwsClusters() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDwsClustersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"clusters": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All clusters that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the cluster.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the cluster.`,
						},
						"node_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The flavor of the cluster.`,
						},
						"number_of_node": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of nodes of the cluster.`,
						},
						"user_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Administrator username for logging in to the cluster.`,
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the VPC corresponding to the cluster.`,
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The subnet ID corresponding to the cluster.`,
						},
						"security_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The security group ID corresponding to the cluster.`,
						},
						"availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The availability zone of the cluster.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID.`,
						},
						"port": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The service port of the cluster.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The version of the cluster.`,
						},
						"tags": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The key/value pairs to associate with the cluster.`,
						},
						"public_ip": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The public IP information of the cluster.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"public_bind_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The bind type of public IP.`,
									},
									"eip_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The EIP ID.`,
									},
								},
							},
						},
						"endpoints": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The private network connection information of the cluster.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"connect_info": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The private network connection information.`,
									},
									"jdbc_url": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The JDBC URL on the private network.`,
									},
								},
							},
						},
						"public_endpoints": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The public network connection information of the cluster.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"public_connect_info": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The public network connection information.`,
									},
									"jdbc_url": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The JDBC URL of the public network.`,
									},
								},
							},
						},
						"recent_event": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of recent events of the cluster.`,
						},
						"nodes": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The instance information of the cluster.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of the cluster instance.`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The status of the cluster instance.`,
									},
								},
							},
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current status of the cluster.`,
						},
						"sub_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The sub-status of the available cluster state.`,
						},
						"task_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The management task status of the cluster.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the cluster, in RFC3339 format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the cluster, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type ClustersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newClustersDSWrapper(d *schema.ResourceData, meta interface{}) *ClustersDSWrapper {
	return &ClustersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDwsClustersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newClustersDSWrapper(d, meta)
	listClustersRst, err := wrapper.ListClusters()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listClustersToSchema(listClustersRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DWS GET /v1.0/{project_id}/clusters
func (w *ClustersDSWrapper) ListClusters() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dws")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/clusters"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *ClustersDSWrapper) listClustersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("clusters", schemas.SliceToList(body.Get("clusters"),
			func(clusters gjson.Result) any {
				return map[string]any{
					"id":                    clusters.Get("id").Value(),
					"name":                  clusters.Get("name").Value(),
					"node_type":             clusters.Get("node_type").Value(),
					"number_of_node":        clusters.Get("number_of_node").Value(),
					"user_name":             clusters.Get("user_name").Value(),
					"vpc_id":                clusters.Get("vpc_id").Value(),
					"subnet_id":             clusters.Get("subnet_id").Value(),
					"security_group_id":     clusters.Get("security_group_id").Value(),
					"availability_zone":     clusters.Get("availability_zone").Value(),
					"enterprise_project_id": clusters.Get("enterprise_project_id").Value(),
					"port":                  clusters.Get("port").Value(),
					"version":               clusters.Get("version").Value(),
					"tags":                  w.setClustersTags(clusters),
					"public_ip": schemas.SliceToList(clusters.Get("public_ip"),
						func(publicIp gjson.Result) any {
							return map[string]any{
								"public_bind_type": publicIp.Get("public_bind_type").Value(),
								"eip_id":           publicIp.Get("eip_id").Value(),
							}
						},
					),
					"endpoints": schemas.SliceToList(clusters.Get("endpoints"),
						func(endpoints gjson.Result) any {
							return map[string]any{
								"connect_info": endpoints.Get("connect_info").Value(),
								"jdbc_url":     endpoints.Get("jdbc_url").Value(),
							}
						},
					),
					"public_endpoints": schemas.SliceToList(clusters.Get("public_endpoints"),
						func(publicEndpoints gjson.Result) any {
							return map[string]any{
								"public_connect_info": publicEndpoints.Get("public_connect_info").Value(),
								"jdbc_url":            publicEndpoints.Get("jdbc_url").Value(),
							}
						},
					),
					"recent_event": clusters.Get("recent_event").Value(),
					"nodes": schemas.SliceToList(clusters.Get("nodes"),
						func(nodes gjson.Result) any {
							return map[string]any{
								"id":     nodes.Get("id").Value(),
								"status": nodes.Get("status").Value(),
							}
						},
					),
					"status":      clusters.Get("status").Value(),
					"sub_status":  clusters.Get("sub_status").Value(),
					"task_status": clusters.Get("task_status").Value(),
					"created_at":  w.setClustersCreated(clusters),
					"updated_at":  w.setClustersUpdated(clusters),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*ClustersDSWrapper) setClustersTags(data gjson.Result) map[string]interface{} {
	tags := data.Get("tags").Value()
	return utils.FlattenTagsToMap(tags)
}

func (*ClustersDSWrapper) setClustersCreated(data gjson.Result) string {
	timeStamp := utils.ConvertTimeStrToNanoTimestamp(data.Get("created").String(), "2006-01-02T15:04:05Z") / 1000
	return utils.FormatTimeStampRFC3339(timeStamp, false)
}

func (*ClustersDSWrapper) setClustersUpdated(data gjson.Result) string {
	timeStamp := utils.ConvertTimeStrToNanoTimestamp(data.Get("updated").String(), "2006-01-02T15:04:05Z") / 1000
	return utils.FormatTimeStampRFC3339(timeStamp, false)
}
