// Generated by PMS #246
package dws

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDwsSnapshots() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDwsSnapshotsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"snapshots": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All snapshots that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the snapshot.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the snapshot.`,
						},
						"cluster_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster ID corresponding of the snapshot.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the snapshot.`,
						},
						"size": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The size of the snapshot, in GB.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current status of the snapshot.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the snapshot.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the snapshot, in RFC3339 format.`,
						},
						"finished_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The completion time of the snapshot, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type SnapshotsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSnapshotsDSWrapper(d *schema.ResourceData, meta interface{}) *SnapshotsDSWrapper {
	return &SnapshotsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDwsSnapshotsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSnapshotsDSWrapper(d, meta)
	listSnapshotsRst, err := wrapper.ListSnapshots()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSnapshotsToSchema(listSnapshotsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DWS GET /v1.0/{project_id}/snapshots
func (w *SnapshotsDSWrapper) ListSnapshots() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dws")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/snapshots"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *SnapshotsDSWrapper) listSnapshotsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("snapshots", schemas.SliceToList(body.Get("snapshots"),
			func(snapshots gjson.Result) any {
				return map[string]any{
					"id":          snapshots.Get("id").Value(),
					"name":        snapshots.Get("name").Value(),
					"cluster_id":  snapshots.Get("cluster_id").Value(),
					"type":        snapshots.Get("type").Value(),
					"size":        snapshots.Get("size").Value(),
					"status":      snapshots.Get("status").Value(),
					"description": snapshots.Get("description").Value(),
					"created_at":  w.setSnapshotsStarted(snapshots),
					"finished_at": w.setSnapshotsFinished(snapshots),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*SnapshotsDSWrapper) setSnapshotsStarted(data gjson.Result) string {
	timeStamp := utils.ConvertTimeStrToNanoTimestamp(data.Get("started").String(), "2006-01-02T15:04:05") / 1000
	return utils.FormatTimeStampRFC3339(timeStamp, false)
}

func (*SnapshotsDSWrapper) setSnapshotsFinished(data gjson.Result) string {
	timeStamp := utils.ConvertTimeStrToNanoTimestamp(data.Get("finished").String(), "2006-01-02T15:04:05") / 1000
	return utils.FormatTimeStampRFC3339(timeStamp, false)
}
