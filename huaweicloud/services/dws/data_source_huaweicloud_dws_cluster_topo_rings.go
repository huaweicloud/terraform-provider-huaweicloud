// Generated by PMS #351
package dws

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDwsClusterTopoRings() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDwsClusterTopoRingsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the DWS cluster ID to which the topology rings belong.`,
			},
			"rings": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the topology rings under DWS cluster.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"instances": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of the cluster instances.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of the instance.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the instance.`,
									},
									"eip_address": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The EIP address corresponding to the instance.`,
									},
									"elb_address": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ELB address corresponding to the instance`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The current status of the instance.`,
									},
									"manage_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The management IP address of the instance.`,
									},
									"internal_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The internal communication IP address of the instance.`,
									},
									"internal_mgnt_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The internal management IP address of the instance.`,
									},
									"traffic_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The server IP address of the instance.`,
									},
									"availability_zone": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The availability zone of the instance.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type ClusterTopoRingsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newClusterTopoRingsDSWrapper(d *schema.ResourceData, meta interface{}) *ClusterTopoRingsDSWrapper {
	return &ClusterTopoRingsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDwsClusterTopoRingsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newClusterTopoRingsDSWrapper(d, meta)
	listTopoRingsRst, err := wrapper.ListTopoRings()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listTopoRingsToSchema(listTopoRingsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DWS GET /v2/{project_id}/clusters/{cluster_id}/topo/rings
func (w *ClusterTopoRingsDSWrapper) ListTopoRings() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dws")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/clusters/{cluster_id}/topo/rings"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("cluster_rings", "offset", "limit", 0).
		Request().
		Result()
}

func (w *ClusterTopoRingsDSWrapper) listTopoRingsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("rings", schemas.SliceToList(body.Get("cluster_rings"),
			func(rings gjson.Result) any {
				return map[string]any{
					"instances": schemas.SliceToList(rings.Get("instance_info_lists"),
						func(instances gjson.Result) any {
							return map[string]any{
								"id":                instances.Get("id").Value(),
								"name":              instances.Get("name").Value(),
								"eip_address":       instances.Get("eip").Value(),
								"elb_address":       instances.Get("elb").Value(),
								"status":            instances.Get("status").Value(),
								"manage_ip":         instances.Get("manage_ip").Value(),
								"internal_ip":       instances.Get("internal_ip").Value(),
								"internal_mgnt_ip":  instances.Get("internal_mgnt_ip").Value(),
								"traffic_ip":        instances.Get("traffic_ip").Value(),
								"availability_zone": instances.Get("az_code").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
