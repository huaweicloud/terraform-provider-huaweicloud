// Generated by PMS #297
package dws

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDwsWorkloadPlans() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDwsWorkloadPlansRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the DWS cluster ID to which the workload plans belong.`,
			},
			"logical_cluster_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the logical cluster name to which the workload plans belong.`,
			},
			"plans": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All workload plans that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the workload plan.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the workload plan.`,
						},
						"cluster_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster ID to which the workload plan belongs.`,
						},
						"current_stage_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the current plan stage corresponding to the workload plan.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the workload plan.`,
						},
					},
				},
			},
		},
	}
}

type WorkloadPlansDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newWorkloadPlansDSWrapper(d *schema.ResourceData, meta interface{}) *WorkloadPlansDSWrapper {
	return &WorkloadPlansDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDwsWorkloadPlansRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newWorkloadPlansDSWrapper(d, meta)
	listWorkloadPlansRst, err := wrapper.ListWorkloadPlans()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listWorkloadPlansToSchema(listWorkloadPlansRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DWS GET /v2/{project_id}/clusters/{cluster_id}/workload/plans
func (w *WorkloadPlansDSWrapper) ListWorkloadPlans() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dws")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/clusters/{cluster_id}/workload/plans"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	params := map[string]any{
		"logical_cluster_name": w.Get("logical_cluster_name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("plan_list", "offset", "limit", 100).
		Request().
		Result()
}

func (w *WorkloadPlansDSWrapper) listWorkloadPlansToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("plans", schemas.SliceToList(body.Get("plan_list"),
			func(plans gjson.Result) any {
				return map[string]any{
					"id":                 plans.Get("plan_id").Value(),
					"name":               plans.Get("plan_name").Value(),
					"cluster_id":         plans.Get("cluster_id").Value(),
					"current_stage_name": plans.Get("current_stage").Value(),
					"status":             w.setPlanListStatus(plans),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*WorkloadPlansDSWrapper) setPlanListStatus(data gjson.Result) string {
	return convertWorkLoadPlanStatus(data.Get("status").Float())
}
