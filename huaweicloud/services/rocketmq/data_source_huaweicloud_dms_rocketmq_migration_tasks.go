// Generated by PMS #188
package rocketmq

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceDmsRocketmqMigrationTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDmsRocketmqMigrationTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the RocketMQ instance ID.`,
			},
			"task_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the RocketMQ migration task ID.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the RocketMQ migration task type.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the RocketMQ migration task name.`,
			},
			"tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of metadata migration tasks.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of a metadata migration task.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the metadata migration task type.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of a metadata migration task.`,
						},
						"start_date": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the start time of a metadata migration task.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of a metadata migration task.`,
						},
					},
				},
			},
		},
	}
}

type RocketmqMigrationTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRocketmqMigrationTasksDSWrapper(d *schema.ResourceData, meta interface{}) *RocketmqMigrationTasksDSWrapper {
	return &RocketmqMigrationTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDmsRocketmqMigrationTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRocketmqMigrationTasksDSWrapper(d, meta)
	lisRocMqMigTasRst, err := wrapper.ListRocketMqMigrationTask()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listRocketMqMigrationTaskToSchema(lisRocMqMigTasRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API RocketMQ GET /v2/{project_id}/instances/{instance_id}/metadata
func (w *RocketmqMigrationTasksDSWrapper) ListRocketMqMigrationTask() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dmsv2")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/metadata"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Filter(
			filters.New().From("task").
				Where("id", "=", w.Get("task_id")).
				Where("name", "=", w.Get("name")).
				Where("type", "=", w.Get("type")),
		).
		OkCode(200).
		Request().
		Result()
}

func (w *RocketmqMigrationTasksDSWrapper) listRocketMqMigrationTaskToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("tasks", schemas.SliceToList(body.Get("task"),
			func(tasks gjson.Result) any {
				return map[string]any{
					"id":         tasks.Get("id").Value(),
					"type":       tasks.Get("type").Value(),
					"name":       tasks.Get("name").Value(),
					"start_date": tasks.Get("start_date").Value(),
					"status":     tasks.Get("status").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
