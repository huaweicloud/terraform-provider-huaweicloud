// Generated by PMS #616
package deh

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDehInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDehInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"dedicated_host_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the dedicated host.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the dedicated host.`,
			},
			"host_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the dedicated host.`,
			},
			"host_type_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the dedicated host type.`,
			},
			"flavor": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the flavor ID.`,
			},
			"state": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the dedicated host.`,
			},
			"availability_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the AZ to which the dedicated host belongs.`,
			},
			"tags": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the tags of the dedicated host.`,
			},
			"instance_uuid": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the ECS on the dedicated host.`,
			},
			"dedicated_hosts": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of dedicated hosts.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"dedicated_host_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the dedicated host.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the dedicated host.`,
						},
						"auto_placement": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates whether to allow an ECS to be placed on any available dedicated host`,
						},
						"availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the AZ to which the dedicated host belongs.`,
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the dedicated host.`,
						},
						"available_memory": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the available memory size of the dedicated host.`,
						},
						"instance_total": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the total number of ECSs on the dedicated host.`,
						},
						"instance_uuids": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the UUIDs of the ECSs running on the dedicated host.`,
						},
						"available_vcpus": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of available vCPUs for the dedicated host.`,
						},
						"host_properties": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the properties of the dedicated host.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"host_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the type of the dedicated host.`,
									},
									"host_type_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the name of the dedicated host type.`,
									},
									"vcpus": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of vCPUs on the dedicated host.`,
									},
									"cores": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of physical cores on the dedicated host.`,
									},
									"sockets": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the number of physical sockets on the dedicated host.`,
									},
									"memory": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the size of physical memory on the dedicated host.`,
									},
									"available_instance_capacities": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the flavors of ECSs placed on the dedicated host.`,
										Elem:        dedHosHosProAvaInsCapElem(),
									},
								},
							},
						},
						"tags": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the tags of the dedicated host.`,
						},
						"sys_tags": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the system tags of the dedicated host.`,
						},
						"allocated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the dedicated host is allocated.`,
						},
					},
				},
			},
		},
	}
}

// dedHosHosProAvaInsCapElem
// The Elem of "dedicated_hosts.host_properties.available_instance_capacities"
func dedHosHosProAvaInsCapElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"flavor": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the specifications of ECSs that can be created.`,
			},
		},
	}
}

type InstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *InstancesDSWrapper {
	return &InstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDehInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newInstancesDSWrapper(d, meta)
	lisDedHosRst, err := wrapper.ListDedicatedHosts()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listDedicatedHostsToSchema(lisDedHosRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DEH GET /v1.0/{project_id}/dedicated-hosts
func (w *InstancesDSWrapper) ListDedicatedHosts() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "deh")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/dedicated-hosts"
	params := map[string]any{
		"dedicated_host_id": w.Get("dedicated_host_id"),
		"name":              w.Get("name"),
		"host_type":         w.Get("host_type"),
		"host_type_name":    w.Get("host_type_name"),
		"flavor":            w.Get("flavor"),
		"state":             w.Get("state"),
		"availability_zone": w.Get("availability_zone"),
		"tags":              w.Get("tags"),
		"instance_uuid":     w.Get("instance_uuid"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("dedicated_hosts", "dedicated_hosts|[-1].dedicated_host_id", "marker").
		Request().
		Result()
}

func (w *InstancesDSWrapper) listDedicatedHostsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("dedicated_hosts", schemas.SliceToList(body.Get("dedicated_hosts"),
			func(dedicatedHosts gjson.Result) any {
				return map[string]any{
					"dedicated_host_id": dedicatedHosts.Get("dedicated_host_id").Value(),
					"name":              dedicatedHosts.Get("name").Value(),
					"auto_placement":    dedicatedHosts.Get("auto_placement").Value(),
					"availability_zone": dedicatedHosts.Get("availability_zone").Value(),
					"state":             dedicatedHosts.Get("state").Value(),
					"available_memory":  dedicatedHosts.Get("available_memory").Value(),
					"instance_total":    dedicatedHosts.Get("instance_total").Value(),
					"instance_uuids":    schemas.SliceToStrList(dedicatedHosts.Get("instance_uuids")),
					"available_vcpus":   dedicatedHosts.Get("available_vcpus").Value(),
					"host_properties": schemas.SliceToList(dedicatedHosts.Get("host_properties"),
						func(hostProperties gjson.Result) any {
							return map[string]any{
								"host_type":                     hostProperties.Get("host_type").Value(),
								"host_type_name":                hostProperties.Get("host_type_name").Value(),
								"vcpus":                         hostProperties.Get("vcpus").Value(),
								"cores":                         hostProperties.Get("cores").Value(),
								"sockets":                       hostProperties.Get("sockets").Value(),
								"memory":                        hostProperties.Get("memory").Value(),
								"available_instance_capacities": w.setDhhpaic(hostProperties),
							}
						},
					),
					"tags":         schemas.MapToStrMap(dedicatedHosts.Get("tags")),
					"sys_tags":     schemas.MapToStrMap(dedicatedHosts.Get("sys_tags")),
					"allocated_at": dedicatedHosts.Get("allocated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*InstancesDSWrapper) setDhhpaic(hostProperties gjson.Result) any {
	return schemas.SliceToList(hostProperties.Get("available_instance_capacities"), func(avaInsCap gjson.Result) any {
		return map[string]any{
			"flavor": avaInsCap.Get("flavor").Value(),
		}
	})
}
