// Generated by PMS #587
package elb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceElbAsynchronousTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceElbAsynchronousTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"job_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task ID.`,
			},
			"job_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task type.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task status.`,
			},
			"error_code": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the error code of the task.`,
			},
			"resource_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource ID.`,
			},
			"begin_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the time when the task started, in the format of **yyyy-MM-dd'T'HH:mm:ss**.`,
			},
			"jobs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the task list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"job_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task ID.`,
						},
						"job_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task type.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task status.`,
						},
						"resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates  the resource ID.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the project ID.`,
						},
						"begin_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the task was started.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the task was ended.`,
						},
						"error_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task error code.`,
						},
						"error_msg": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the task error message.`,
						},
						"sub_jobs": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the subtask list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"job_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates  the task ID.`,
									},
									"job_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the task type.`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the task status.`,
									},
									"resource_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the resource ID.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the project ID.`,
									},
									"begin_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the time when the task was started.`,
									},
									"end_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates  the time when the task was ended.`,
									},
									"error_code": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the task error code.`,
									},
									"error_msg": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates  the task error message.`,
									},
									"entities": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the resource to be processed in a subtask.`,
										Elem:        jobsSubJobsEntitiesElem(),
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// jobsSubJobsEntitiesElem
// The Elem of "jobs.sub_jobs.entities"
func jobsSubJobsEntitiesElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"resource_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the ID of the resource associated with a subtask.`,
			},
			"resource_type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the type of the resource associated with a subtask.`,
			},
		},
	}
}

type AsynchronousTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAsynchronousTasksDSWrapper(d *schema.ResourceData, meta interface{}) *AsynchronousTasksDSWrapper {
	return &AsynchronousTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceElbAsynchronousTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAsynchronousTasksDSWrapper(d, meta)
	listJobsRst, err := wrapper.ListJobs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listJobsToSchema(listJobsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ELB GET /v3/{project_id}/elb/jobs
func (w *AsynchronousTasksDSWrapper) ListJobs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "elb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/elb/jobs"
	params := map[string]any{
		"job_id":      w.Get("job_id"),
		"job_type":    w.Get("job_type"),
		"status":      w.Get("status"),
		"error_code":  w.Get("error_code"),
		"resource_id": w.Get("resource_id"),
		"begin_time":  w.Get("begin_time"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *AsynchronousTasksDSWrapper) listJobsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("jobs", schemas.SliceToList(body.Get("jobs"),
			func(jobs gjson.Result) any {
				return map[string]any{
					"job_id":      jobs.Get("job_id").Value(),
					"job_type":    jobs.Get("job_type").Value(),
					"status":      jobs.Get("status").Value(),
					"resource_id": jobs.Get("resource_id").Value(),
					"project_id":  jobs.Get("project_id").Value(),
					"begin_time":  jobs.Get("begin_time").Value(),
					"end_time":    jobs.Get("end_time").Value(),
					"error_code":  jobs.Get("error_code").Value(),
					"error_msg":   jobs.Get("error_msg").Value(),
					"sub_jobs": schemas.SliceToList(jobs.Get("sub_jobs"),
						func(subJobs gjson.Result) any {
							return map[string]any{
								"job_id":      subJobs.Get("job_id").Value(),
								"job_type":    subJobs.Get("job_type").Value(),
								"status":      subJobs.Get("status").Value(),
								"resource_id": subJobs.Get("resource_id").Value(),
								"project_id":  subJobs.Get("project_id").Value(),
								"begin_time":  subJobs.Get("begin_time").Value(),
								"end_time":    subJobs.Get("end_time").Value(),
								"error_code":  subJobs.Get("error_code").Value(),
								"error_msg":   subJobs.Get("error_msg").Value(),
								"entities":    w.setJobsSubJobsEntities(subJobs),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AsynchronousTasksDSWrapper) setJobsSubJobsEntities(subJobs gjson.Result) any {
	return schemas.SliceToList(subJobs.Get("entities"), func(entities gjson.Result) any {
		return map[string]any{
			"resource_id":   entities.Get("resource_id").Value(),
			"resource_type": entities.Get("resource_type").Value(),
		}
	})
}
