// Generated by PMS #565
package elb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceElbFeatureConfigurations() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceElbFeatureConfigurationsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"feature": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the feature name.`,
			},
			"configs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the feature configuration list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the configuration.`,
						},
						"feature": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the feature name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of the feature configuration value.`,
						},
						"value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the feature configuration value.`,
						},
						"switch": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether to enable feature configuration.`,
						},
						"service": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the service. The value is fixed at **ELB**.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the feature configuration description.`,
						},
						"caller": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the configuration creator.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time.`,
						},
					},
				},
			},
		},
	}
}

type FeatureConfigurationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newFeatureConfigurationsDSWrapper(d *schema.ResourceData, meta interface{}) *FeatureConfigurationsDSWrapper {
	return &FeatureConfigurationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceElbFeatureConfigurationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newFeatureConfigurationsDSWrapper(d, meta)
	lisFeaConRst, err := wrapper.ListFeatureConfigs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listFeatureConfigsToSchema(lisFeaConRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ELB GET /v3/{project_id}/elb/feature/configs
func (w *FeatureConfigurationsDSWrapper) ListFeatureConfigs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "elb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/elb/feature/configs"
	params := map[string]any{
		"feature": w.Get("feature"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *FeatureConfigurationsDSWrapper) listFeatureConfigsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("configs", schemas.SliceToList(body.Get("configs"),
			func(configs gjson.Result) any {
				return map[string]any{
					"id":          configs.Get("id").Value(),
					"feature":     configs.Get("feature").Value(),
					"type":        configs.Get("type").Value(),
					"value":       configs.Get("value").Value(),
					"switch":      configs.Get("switch").Value(),
					"service":     configs.Get("service").Value(),
					"description": configs.Get("description").Value(),
					"caller":      configs.Get("caller").Value(),
					"created_at":  configs.Get("created_at").Value(),
					"updated_at":  configs.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
