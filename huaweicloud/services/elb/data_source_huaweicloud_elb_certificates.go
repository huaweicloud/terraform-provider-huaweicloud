// Generated by PMS #602
package elb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceElbCertificates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceElbCertificatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"certificate_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies a certificate ID.`,
			},
			"name": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the certificate name.`,
			},
			"description": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the certificate description.`,
			},
			"domain": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the domain names used by the server certificate.`,
			},
			"type": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the certificate type.`,
			},
			"common_name": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the primary domain name of the certificate.`,
			},
			"fingerprint": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the fingerprint of the certificate.`,
			},
			"scm_certificate_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the SSL certificate ID.`,
			},
			"certificates": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of certificates.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the certificate ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates  the certificate name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the certificate type.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates  the certificate description.`,
						},
						"subject_alternative_names": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates all the domain names of the certificate.`,
						},
						"certificate": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the certificate content.`,
						},
						"fingerprint": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the fingerprint of the certificate.`,
						},
						"domain": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the domain names used by the server certificate.`,
						},
						"private_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the private key of the certificate used by HTTPS listeners.`,
						},
						"common_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the primary domain name of the certificate.`,
						},
						"enc_certificate": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the body of the SM encryption certificate required by HTTPS listeners.`,
						},
						"scm_certificate_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the SSL certificate ID.`,
						},
						"enc_private_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the private key of the SM encryption certificate required by HTTPS listeners.`,
						},
						"expire_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the certificate expires.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the certificate was created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the time when the certificate was updated.`,
						},
					},
				},
			},
		},
	}
}

type CertificatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCertificatesDSWrapper(d *schema.ResourceData, meta interface{}) *CertificatesDSWrapper {
	return &CertificatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceElbCertificatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCertificatesDSWrapper(d, meta)
	listCertificatesRst, err := wrapper.ListCertificates()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCertificatesToSchema(listCertificatesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ELB GET /v3/{project_id}/elb/certificates
func (w *CertificatesDSWrapper) ListCertificates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "elb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/elb/certificates"
	params := map[string]any{
		"id":                 w.ListToArray("certificate_id"),
		"name":               w.ListToArray("name"),
		"description":        w.ListToArray("description"),
		"domain":             w.ListToArray("domain"),
		"type":               w.ListToArray("type"),
		"scm_certificate_id": w.ListToArray("scm_certificate_id"),
		"common_name":        w.ListToArray("common_name"),
		"fingerprint":        w.ListToArray("fingerprint"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("certificates", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *CertificatesDSWrapper) listCertificatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("certificates", schemas.SliceToList(body.Get("certificates"),
			func(certificates gjson.Result) any {
				return map[string]any{
					"id":                        certificates.Get("id").Value(),
					"name":                      certificates.Get("name").Value(),
					"type":                      certificates.Get("type").Value(),
					"description":               certificates.Get("description").Value(),
					"subject_alternative_names": schemas.SliceToStrList(certificates.Get("subject_alternative_names")),
					"certificate":               certificates.Get("certificate").Value(),
					"fingerprint":               certificates.Get("fingerprint").Value(),
					"domain":                    certificates.Get("domain").Value(),
					"private_key":               certificates.Get("private_key").Value(),
					"common_name":               certificates.Get("common_name").Value(),
					"enc_certificate":           certificates.Get("enc_certificate").Value(),
					"scm_certificate_id":        certificates.Get("scm_certificate_id").Value(),
					"enc_private_key":           certificates.Get("enc_private_key").Value(),
					"expire_time":               certificates.Get("expire_time").Value(),
					"created_at":                certificates.Get("created_at").Value(),
					"updated_at":                certificates.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
