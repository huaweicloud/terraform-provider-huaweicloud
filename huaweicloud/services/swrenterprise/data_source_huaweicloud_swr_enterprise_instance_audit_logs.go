// Generated by PMS #983
package swrenterprise

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSwrEnterpriseInstanceAuditLogs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrEnterpriseInstanceAuditLogsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the enterprise instance ID.`,
			},
			"operation": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the operation type.`,
			},
			"audit_logs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the audit logs.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the audit log ID.`,
						},
						"operation": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the operation type.`,
						},
						"resource_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource type.`,
						},
						"resource": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource name.`,
						},
						"username": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the user name.`,
						},
						"op_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the operation time.`,
						},
					},
				},
			},
			"total": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the total count.`,
			},
		},
	}
}

type InstanceAuditLogsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newInstanceAuditLogsDSWrapper(d *schema.ResourceData, meta interface{}) *InstanceAuditLogsDSWrapper {
	return &InstanceAuditLogsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrEnterpriseInstanceAuditLogsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newInstanceAuditLogsDSWrapper(d, meta)
	listAuditLogsRst, err := wrapper.ListAuditLogs()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listAuditLogsToSchema(listAuditLogsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API SWR GET /v2/{project_id}/instances/{instance_id}/audit-logs
func (w *InstanceAuditLogsDSWrapper) ListAuditLogs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/audit-logs"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"operation": w.Get("operation"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("audit_logs", "offset", "limit", 100).
		Request().
		Result()
}

func (w *InstanceAuditLogsDSWrapper) listAuditLogsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("audit_logs", schemas.SliceToList(body.Get("audit_logs"),
			func(auditLogs gjson.Result) any {
				return map[string]any{
					"id":            auditLogs.Get("id").Value(),
					"operation":     auditLogs.Get("operation").Value(),
					"resource_type": auditLogs.Get("resource_type").Value(),
					"resource":      auditLogs.Get("resource").Value(),
					"username":      auditLogs.Get("username").Value(),
					"op_time":       auditLogs.Get("op_time").Value(),
				}
			},
		)),
		d.Set("total", body.Get("total").Value()),
	)
	return mErr.ErrorOrNil()
}
