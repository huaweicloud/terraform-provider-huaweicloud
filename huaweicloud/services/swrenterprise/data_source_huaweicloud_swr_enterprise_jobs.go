// Generated by PMS #954
package swrenterprise

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSwrEnterpriseJobs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrEnterpriseJobsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the job status.`,
			},
			"jobs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the jobs.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the job ID.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource ID.`,
						},
						"resource_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the job type.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the job status.`,
						},
						"reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the failed reason.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the create time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time.`,
						},
					},
				},
			},
		},
	}
}

type JobsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newJobsDSWrapper(d *schema.ResourceData, meta interface{}) *JobsDSWrapper {
	return &JobsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrEnterpriseJobsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newJobsDSWrapper(d, meta)
	listInstanceJobsRst, err := wrapper.ListInstanceJobs()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listInstanceJobsToSchema(listInstanceJobsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API SWR GET /v2/{project_id}/jobs
func (w *JobsDSWrapper) ListInstanceJobs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/jobs"
	params := map[string]any{
		"status": w.Get("status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("jobs", "offset", "limit", 100).
		Request().
		Result()
}

func (w *JobsDSWrapper) listInstanceJobsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("jobs", schemas.SliceToList(body.Get("jobs"),
			func(jobs gjson.Result) any {
				return map[string]any{
					"id":            jobs.Get("id").Value(),
					"instance_id":   jobs.Get("instance_id").Value(),
					"resource_id":   jobs.Get("resource_id").Value(),
					"resource_name": jobs.Get("resource_name").Value(),
					"type":          jobs.Get("type").Value(),
					"status":        jobs.Get("status").Value(),
					"reason":        jobs.Get("reason").Value(),
					"created_at":    jobs.Get("created_at").Value(),
					"updated_at":    jobs.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
