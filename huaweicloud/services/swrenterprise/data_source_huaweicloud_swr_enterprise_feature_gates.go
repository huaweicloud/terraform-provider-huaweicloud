// Generated by PMS #973
package swrenterprise

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSwrEnterpriseFeatureGates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrEnterpriseFeatureGatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"enable_enterprise": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Indicates whether the enterprise project is enabled.`,
			},
			"cer_available": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Indicates whether the SWR enterprise feature is enabled.`,
			},
			"enable_user_def_obs": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Indicates whether the OBS bucket is enabled.`,
			},
		},
	}
}

type FeatureGatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newFeatureGatesDSWrapper(d *schema.ResourceData, meta interface{}) *FeatureGatesDSWrapper {
	return &FeatureGatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrEnterpriseFeatureGatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newFeatureGatesDSWrapper(d, meta)
	lisGloFeaGatRst, err := wrapper.ListGlobalFeatureGates()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listGlobalFeatureGatesToSchema(lisGloFeaGatRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API SWR GET /v2/{project_id}/feature-gates
func (w *FeatureGatesDSWrapper) ListGlobalFeatureGates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/feature-gates"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *FeatureGatesDSWrapper) listGlobalFeatureGatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("enable_enterprise", body.Get("enableEnterprise").Value()),
		d.Set("cer_available", body.Get("cerAvailable").Value()),
		d.Set("enable_user_def_obs", body.Get("enableUserDefObs").Value()),
	)
	return mErr.ErrorOrNil()
}
