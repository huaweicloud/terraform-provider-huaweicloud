// Generated by PMS #970
package swrenterprise

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSwrEnterpriseRetentionPolicyExecutionRecords() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrEnterpriseRetentionPolicyExecutionRecordsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the enterprise instance ID.`,
			},
			"namespace_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the namespace name.`,
			},
			"policy_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the policy ID.`,
			},
			"total": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the total count.`,
			},
			"executions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the execution records.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the execution record ID.`,
						},
						"policy_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the policy ID.`,
						},
						"dry_run": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether to dry run.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status.`,
						},
						"trigger": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the trigger type.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the start time.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the end time.`,
						},
					},
				},
			},
		},
	}
}

type RetentionPolicyExecutionRecordsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRetentionPolicyExecutionRecordsDSWrapper(d *schema.ResourceData, meta interface{}) *RetentionPolicyExecutionRecordsDSWrapper {
	return &RetentionPolicyExecutionRecordsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrEnterpriseRetentionPolicyExecutionRecordsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRetentionPolicyExecutionRecordsDSWrapper(d, meta)
	lisInsRetPolExeRst, err := wrapper.ListInstanceRetentionPolicyExecutions()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listInstanceRetentionPolicyExecutionsToSchema(lisInsRetPolExeRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API SWR GET /v2/{project_id}/instances/{instance_id}/namespaces/{namespace_name}/retention/policies/{policy_id}/executions
func (w *RetentionPolicyExecutionRecordsDSWrapper) ListInstanceRetentionPolicyExecutions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/namespaces/{namespace_name}/retention/policies/{policy_id}/executions"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	uri = strings.ReplaceAll(uri, "{namespace_name}", w.Get("namespace_name").(string))
	uri = strings.ReplaceAll(uri, "{policy_id}", w.Get("policy_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("executions", "offset", "limit", 100).
		Request().
		Result()
}

func (w *RetentionPolicyExecutionRecordsDSWrapper) listInstanceRetentionPolicyExecutionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("total", body.Get("total").Value()),
		d.Set("executions", schemas.SliceToList(body.Get("executions"),
			func(executions gjson.Result) any {
				return map[string]any{
					"id":         executions.Get("id").Value(),
					"policy_id":  executions.Get("policy_id").Value(),
					"dry_run":    executions.Get("dry_run").Value(),
					"status":     executions.Get("status").Value(),
					"trigger":    executions.Get("trigger").Value(),
					"start_time": executions.Get("start_time").Value(),
					"end_time":   executions.Get("end_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
