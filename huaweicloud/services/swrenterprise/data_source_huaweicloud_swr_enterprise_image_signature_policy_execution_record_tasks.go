// Generated by PMS #979
package swrenterprise

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSwrEnterpriseImageSignaturePolicyExecutionRecordTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrEnterpriseImageSignaturePolicyExecutionRecordTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the enterprise instance ID.`,
			},
			"namespace_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the namespace name.`,
			},
			"policy_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the policy ID.`,
			},
			"execution_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the execution record ID.`,
			},
			"tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the execution records.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the execution task ID.`,
						},
						"execution_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the execution record ID.`,
						},
						"job_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the job ID.`,
						},
						"namespace": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the namespace.`,
						},
						"repository": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the repository name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status.`,
						},
						"status_text": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status detail.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the create time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time.`,
						},
					},
				},
			},
		},
	}
}

type ImageSignaturePolicyExecutionRecordTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newImageSignaturePolicyExecutionRecordTasksDSWrapper(d *schema.ResourceData,
	meta interface{}) *ImageSignaturePolicyExecutionRecordTasksDSWrapper {
	return &ImageSignaturePolicyExecutionRecordTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrEnterpriseImageSignaturePolicyExecutionRecordTasksRead(_ context.Context, d *schema.ResourceData,
	meta interface{}) diag.Diagnostics {
	wrapper := newImageSignaturePolicyExecutionRecordTasksDSWrapper(d, meta)
	lispetr, err := wrapper.ListInstanceSignPolicyExecTasks()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listInstanceSignPolicyExecTasksToSchema(lispetr)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API SWR GET /v2/{project_id}/instances/{instance_id}/namespaces/{namespace_name}/signature/policies/{policy_id}/executions/{execution_id}/tasks
func (w *ImageSignaturePolicyExecutionRecordTasksDSWrapper) ListInstanceSignPolicyExecTasks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/namespaces/{namespace_name}/signature/policies/{policy_id}/executions/{execution_id}/tasks"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	uri = strings.ReplaceAll(uri, "{namespace_name}", w.Get("namespace_name").(string))
	uri = strings.ReplaceAll(uri, "{policy_id}", w.Get("policy_id").(string))
	uri = strings.ReplaceAll(uri, "{execution_id}", w.Get("execution_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("tasks", "offset", "limit", 100).
		Request().
		Result()
}

func (w *ImageSignaturePolicyExecutionRecordTasksDSWrapper) listInstanceSignPolicyExecTasksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("tasks", schemas.SliceToList(body.Get("tasks"),
			func(tasks gjson.Result) any {
				return map[string]any{
					"id":           tasks.Get("id").Value(),
					"execution_id": tasks.Get("execution_id").Value(),
					"job_id":       tasks.Get("job_id").Value(),
					"namespace":    tasks.Get("namespace").Value(),
					"repository":   tasks.Get("repository").Value(),
					"status":       tasks.Get("status").Value(),
					"status_text":  tasks.Get("status_text").Value(),
					"created_at":   tasks.Get("created_at").Value(),
					"updated_at":   tasks.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
