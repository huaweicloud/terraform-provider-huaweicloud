// Generated by PMS #947
package swrenterprise

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceSwrEnterprisePrivateNetworkAccessControls() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrEnterprisePrivateNetworkAccessControlsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the enterprise instance ID.`,
			},
			"internal_endpoints": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the private network access control list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the private network access rule ID.`,
						},
						"vpcep_endpoint_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the VPCEP endpoint ID.`,
						},
						"endpoint_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the endpoint IP.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the project ID to which the VPC belongs.`,
						},
						"project_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the project name to which the VPC belongs.`,
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the VPC ID.`,
						},
						"vpc_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the VPC name.`,
						},
						"vpc_cidr": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the VPC CIDR block.`,
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the subnet ID.`,
						},
						"subnet_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the subnet name.`,
						},
						"subnet_cidr": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the subnet CIDR block.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the access control rule status.`,
						},
						"status_text": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the access control rule status text.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates description of the access control rule.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates creation time of the access control rule.`,
						},
					},
				},
			},
		},
	}
}

type PrivateNetworkAccessControlsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPrivateNetworkAccessControlsDSWrapper(d *schema.ResourceData, meta interface{}) *PrivateNetworkAccessControlsDSWrapper {
	return &PrivateNetworkAccessControlsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrEnterprisePrivateNetworkAccessControlsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPrivateNetworkAccessControlsDSWrapper(d, meta)
	lisInsIntEndRst, err := wrapper.ListInstanceInternalEndpoints()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listInstanceInternalEndpointsToSchema(lisInsIntEndRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API SWR GET /v2/{project_id}/instances/{instance_id}/internal-endpoints
func (w *PrivateNetworkAccessControlsDSWrapper) ListInstanceInternalEndpoints() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/internal-endpoints"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("internal_endpoints", "offset", "limit", 100).
		Request().
		Result()
}

func (w *PrivateNetworkAccessControlsDSWrapper) listInstanceInternalEndpointsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("internal_endpoints", schemas.SliceToList(body.Get("internal_endpoints"),
			func(intEnd gjson.Result) any {
				return map[string]any{
					"id":                intEnd.Get("id").Value(),
					"vpcep_endpoint_id": intEnd.Get("vpcep_endpoint_id").Value(),
					"endpoint_ip":       intEnd.Get("endpoint_ip").Value(),
					"project_id":        intEnd.Get("project_id").Value(),
					"project_name":      intEnd.Get("project_name").Value(),
					"vpc_id":            intEnd.Get("vpc_id").Value(),
					"vpc_name":          intEnd.Get("vpc_name").Value(),
					"vpc_cidr":          intEnd.Get("vpc_cidr").Value(),
					"subnet_id":         intEnd.Get("subnet_id").Value(),
					"subnet_name":       intEnd.Get("subnet_name").Value(),
					"subnet_cidr":       intEnd.Get("subnet_cidr").Value(),
					"status":            intEnd.Get("status").Value(),
					"status_text":       intEnd.Get("status_text").Value(),
					"description":       intEnd.Get("description").Value(),
					"created_at":        intEnd.Get("created_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
