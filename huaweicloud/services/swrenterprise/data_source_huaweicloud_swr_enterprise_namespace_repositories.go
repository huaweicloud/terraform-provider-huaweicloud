// Generated by PMS #982
package swrenterprise

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSwrEnterpriseNamespaceRepositories() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrEnterpriseNamespaceRepositoriesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the enterprise instance ID.`,
			},
			"namespace_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the namespace name.`,
			},
			"order_column": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the order column.`,
			},
			"order_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the order type. Values can be **desc** or **asc**.`,
			},
			"repositories": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the repositories.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the repository ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the repository name.`,
						},
						"namespace_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the namespace ID.`,
						},
						"namespace_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the namespace name.`,
						},
						"tag_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the count of tags.`,
						},
						"pull_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the count of pull.`,
						},
						"artifact_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the count of artifact.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the create time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time.`,
						},
					},
				},
			},
			"total": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the total count.`,
			},
		},
	}
}

type NamespaceRepositoriesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newNamespaceRepositoriesDSWrapper(d *schema.ResourceData, meta interface{}) *NamespaceRepositoriesDSWrapper {
	return &NamespaceRepositoriesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrEnterpriseNamespaceRepositoriesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newNamespaceRepositoriesDSWrapper(d, meta)
	lisNamRepRst, err := wrapper.ListNamespaceRepositories()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listNamespaceRepositoriesToSchema(lisNamRepRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API SWR GET /v2/{project_id}/instances/{instance_id}/namespaces/{namespace_name}/repositories
func (w *NamespaceRepositoriesDSWrapper) ListNamespaceRepositories() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/namespaces/{namespace_name}/repositories"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	uri = strings.ReplaceAll(uri, "{namespace_name}", w.Get("namespace_name").(string))
	params := map[string]any{
		"order_column": w.Get("order_column"),
		"order_type":   w.Get("order_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("repositories", "offset", "limit", 100).
		Request().
		Result()
}

func (w *NamespaceRepositoriesDSWrapper) listNamespaceRepositoriesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("repositories", schemas.SliceToList(body.Get("repositories"),
			func(repositories gjson.Result) any {
				return map[string]any{
					"id":             repositories.Get("id").Value(),
					"name":           repositories.Get("name").Value(),
					"namespace_id":   repositories.Get("namespace_id").Value(),
					"namespace_name": repositories.Get("namespace_name").Value(),
					"tag_count":      repositories.Get("tag_count").Value(),
					"pull_count":     repositories.Get("pull_count").Value(),
					"artifact_count": repositories.Get("artifact_count").Value(),
					"description":    repositories.Get("description").Value(),
					"created_at":     repositories.Get("created_at").Value(),
					"updated_at":     repositories.Get("updated_at").Value(),
				}
			},
		)),
		d.Set("total", body.Get("total").Value()),
	)
	return mErr.ErrorOrNil()
}
