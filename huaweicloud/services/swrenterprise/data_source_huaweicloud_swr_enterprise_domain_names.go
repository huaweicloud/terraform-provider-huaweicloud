// Generated by PMS #975
package swrenterprise

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceSwrEnterpriseDomainNames() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceSwrEnterpriseDomainNamesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the enterprise instance ID.`,
			},
			"uid": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the domain name ID.`,
			},
			"domain_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the domain name.`,
			},
			"domain_name_infos": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the domain name infos.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"uid": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the domain name ID.`,
						},
						"domain_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the domain name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the domain name type.`,
						},
						"certificate_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the SCM certificate ID.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the create time of the domain name.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time of the domain name.`,
						},
					},
				},
			},
		},
	}
}

type DomainNamesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDomainNamesDSWrapper(d *schema.ResourceData, meta interface{}) *DomainNamesDSWrapper {
	return &DomainNamesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceSwrEnterpriseDomainNamesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDomainNamesDSWrapper(d, meta)
	listDomainNamesRst, err := wrapper.ListDomainNames()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listDomainNamesToSchema(listDomainNamesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API SWR GET /v2/{project_id}/instances/{instance_id}/domainname
func (w *DomainNamesDSWrapper) ListDomainNames() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "swr")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/domainname"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"uid":         w.Get("uid"),
		"domain_name": w.Get("domain_name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *DomainNamesDSWrapper) listDomainNamesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("domain_name_infos", schemas.SliceToList(body.Get("domain_name_infos"),
			func(domainNameInfos gjson.Result) any {
				return map[string]any{
					"uid":            domainNameInfos.Get("uid").Value(),
					"domain_name":    domainNameInfos.Get("domain_name").Value(),
					"type":           domainNameInfos.Get("type").Value(),
					"certificate_id": domainNameInfos.Get("certificate_id").Value(),
					"created_at":     domainNameInfos.Get("created_at").Value(),
					"updated_at":     domainNameInfos.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
