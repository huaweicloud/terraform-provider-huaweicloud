// Generated by PMS #178
package rabbitmq

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDmsRabbitmqExtendFlavors() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDmsRabbitmqExtendFlavorsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the DMS RabbitMQ instance ID.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies flavor type. The valid values are **single** and **cluster**.`,
			},
			"charging_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the flavor billing mode.`,
			},
			"arch_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of CPU architecture, e.g. **X86**.`,
			},
			"storage_spec_code": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the disk IO encoding, e.g. **dms.physical.storage.high.v2**.`,
			},
			"versions": {
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Indicates the supported flavor versions.`,
			},
			"flavors": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of flavor details.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the flavor ID.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the flavor type.`,
						},
						"charging_modes": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the list of supported billing modes.`,
						},
						"vm_specification": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the underlying VM specification.`,
						},
						"arch_types": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the list of supported CPU architectures.`,
						},
						"ios": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of supported disk IO types.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the disk type.`,
									},
									"storage_spec_code": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the disk IO encoding.`,
									},
									"available_zones": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the list of availability zones with available resources.`,
									},
									"unavailable_zones": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the list of unavailability zones with available resources.`,
									},
								},
							},
						},
						"properties": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the properties of the current specification.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"min_broker": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the minimum number of brokers.`,
									},
									"max_broker": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum number of brokers.`,
									},
									"min_storage_per_node": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the minimum storage per node. The unit is GB.`,
									},
									"max_storage_per_node": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum storage per node. The unit is GB.`,
									},
									"max_queue_per_broker": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum number of queues.`,
									},
									"max_connection_per_broker": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the maximum number of connections.`,
									},
									"step_length": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the step length.`,
									},
									"flavor_alias": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the alias of **flavor_id**.`,
									},
								},
							},
						},
						"support_features": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of features supported by the current specification.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the feature name.`,
									},
									"properties": {
										Type:        schema.TypeMap,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `Indicates the property details.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type RabbitmqExtendFlavorsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRabbitmqExtendFlavorsDSWrapper(d *schema.ResourceData, meta interface{}) *RabbitmqExtendFlavorsDSWrapper {
	return &RabbitmqExtendFlavorsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDmsRabbitmqExtendFlavorsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRabbitmqExtendFlavorsDSWrapper(d, meta)
	seiepir, err := wrapper.ShowEngineInstanceExtendProductInfo()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showEngineInstanceExtendProductInfoToSchema(seiepir)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API RabbitMQ GET /v2/{engine}/{project_id}/instances/{instance_id}/extend
func (w *RabbitmqExtendFlavorsDSWrapper) ShowEngineInstanceExtendProductInfo() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dmsv2")
	if err != nil {
		return nil, err
	}

	uri := "/v2/rabbitmq/{project_id}/instances/{instance_id}/extend"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Filter(
			filters.New().From("products").
				Where("type", "=", w.Get("type")).
				Where("ios.io_spec", "=", w.Get("storage_spec_code")).
				Where("arch_types", "has", w.Get("arch_type")).
				Where("charging_mode", "has", parseChargingModeToTime(w.Get("charging_mode"))),
		).
		OkCode(200).
		Request().
		Result()
}

func (w *RabbitmqExtendFlavorsDSWrapper) showEngineInstanceExtendProductInfoToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("versions", body.Get("versions").Value()),
		d.Set("flavors", schemas.SliceToList(body.Get("products"),
			func(flavors gjson.Result) any {
				return map[string]any{
					"id":               flavors.Get("product_id").Value(),
					"type":             flavors.Get("type").Value(),
					"charging_modes":   parseChargingModesResp(utils.ExpandToStringList(flavors.Get("charging_mode").Value().([]interface{}))),
					"vm_specification": flavors.Get("ecs_flavor_id").Value(),
					"arch_types":       schemas.SliceToStrList(flavors.Get("arch_types")),
					"ios": schemas.SliceToList(flavors.Get("ios"),
						func(ios gjson.Result) any {
							return map[string]any{
								"type":              ios.Get("type").Value(),
								"storage_spec_code": ios.Get("io_spec").Value(),
								"available_zones":   schemas.SliceToStrList(ios.Get("available_zones")),
								"unavailable_zones": schemas.SliceToStrList(ios.Get("unavailable_zones")),
							}
						},
					),
					"properties": schemas.SliceToList(flavors.Get("properties"),
						func(properties gjson.Result) any {
							return map[string]any{
								"min_broker":                properties.Get("min_broker").Value(),
								"max_broker":                properties.Get("max_broker").Value(),
								"min_storage_per_node":      properties.Get("min_storage_per_node").Value(),
								"max_storage_per_node":      properties.Get("max_storage_per_node").Value(),
								"max_queue_per_broker":      properties.Get("max_queue_per_broker").Value(),
								"max_connection_per_broker": properties.Get("max_connection_per_broker").Value(),
								"step_length":               properties.Get("step_length").Value(),
								"flavor_alias":              properties.Get("product_alias").Value(),
							}
						},
					),
					"support_features": schemas.SliceToList(flavors.Get("support_features"),
						func(supportFeatures gjson.Result) any {
							return map[string]any{
								"name":       supportFeatures.Get("name").Value(),
								"properties": schemas.MapToStrMap(supportFeatures.Get("properties")),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func parseChargingModeToTime(chargingMode interface{}) interface{} {
	if chargingMode == nil {
		return nil
	}
	v := "monthly"
	if chargingMode == string(ChargingModePostPaid) {
		v = "hourly"
	}
	return v
}

func parseChargingModesResp(chargingModes []string) []interface{} {
	result := make([]interface{}, len(chargingModes))
	for i, val := range chargingModes {
		if cm, ok := ChargingModesMap[val]; ok {
			result[i] = cm
		} else {
			result[i] = val
		}
	}
	return result
}
