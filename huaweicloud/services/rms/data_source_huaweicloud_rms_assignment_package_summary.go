// Generated by PMS #878
package rms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRmsAssignmentPackageSummary() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsAssignmentPackageSummaryRead,

		Schema: map[string]*schema.Schema{
			"conformance_pack_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the conformance package name.`,
			},
			"value": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the summary of the compliance results of conformance packages.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of a conformance package.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the conformance package name.`,
						},
						"compliance": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the compliance result of a conformance package.`,
						},
					},
				},
			},
		},
	}
}

type AssignmentPackageSummaryDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAssignmentPackageSummaryDSWrapper(d *schema.ResourceData, meta interface{}) *AssignmentPackageSummaryDSWrapper {
	return &AssignmentPackageSummaryDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsAssignmentPackageSummaryRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAssignmentPackageSummaryDSWrapper(d, meta)
	colConPacComSumRst, err := wrapper.CollectConformancePackComplianceSummary()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.collectConformancePackComplianceSummaryToSchema(colConPacComSumRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/conformance-packs/compliance/summary
func (w *AssignmentPackageSummaryDSWrapper) CollectConformancePackComplianceSummary() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/conformance-packs/compliance/summary"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"conformance_pack_name": w.Get("conformance_pack_name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("value", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *AssignmentPackageSummaryDSWrapper) collectConformancePackComplianceSummaryToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("value", schemas.SliceToList(body.Get("value"),
			func(value gjson.Result) any {
				return map[string]any{
					"id":         value.Get("id").Value(),
					"name":       value.Get("name").Value(),
					"compliance": value.Get("compliance").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
