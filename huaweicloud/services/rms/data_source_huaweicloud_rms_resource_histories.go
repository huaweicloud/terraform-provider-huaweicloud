// Generated by PMS #433
package rms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRmsHistories() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsHistoriesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"resource_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the resource ID.`,
			},
			"earlier_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the start time of the query.`,
			},
			"later_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the end time of the query.`,
			},
			"items": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The resource history list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The user ID.`,
						},
						"resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource ID.`,
						},
						"resource_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource type.`,
						},
						"capture_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the resource is captured by Config.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource status.`,
						},
						"relations": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of resource relationships.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"relation_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The relationship type.`,
									},
									"from_resource_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The type of the source resource.`,
									},
									"to_resource_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The type of the destination resource.`,
									},
									"from_resource_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The source resource ID.`,
									},
									"to_resource_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The destination resource ID.`,
									},
								},
							},
						},
						"resource": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The resource information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource name.`,
									},
									"ep_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The enterprise project ID.`,
									},
									"ep_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The enterprise project name.`,
									},
									"checksum": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource checksum.`,
									},
									"provider": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The provider name.`,
									},
									"created": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The time when the resource is created.`,
									},
									"updated": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The time when the resource is updated.`,
									},
									"provisioning_state": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The status of the operation that causes the resource change.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource type.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The project ID.`,
									},
									"region_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The region ID.`,
									},
									"project_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The project name.`,
									},
									"tags": {
										Type:        schema.TypeMap,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The resource tag.`,
									},
									"properties": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource properties.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type HistoriesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newHistoriesDSWrapper(d *schema.ResourceData, meta interface{}) *HistoriesDSWrapper {
	return &HistoriesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsHistoriesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newHistoriesDSWrapper(d, meta)
	shoResHisRst, err := wrapper.ShowResourceHistory()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showResourceHistoryToSchema(shoResHisRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/resources/{resource_id}/history
func (w *HistoriesDSWrapper) ShowResourceHistory() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/resources/{resource_id}/history?limit=1"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	uri = strings.ReplaceAll(uri, "{resource_id}", w.Get("resource_id").(string))
	params := map[string]any{}

	if begTime, ok := w.GetOk("earlier_time"); ok {
		earlierTime, err := utils.FormatUTCTimeStamp(begTime.(string))
		if err != nil {
			return nil, err
		}
		params["earlier_time"] = earlierTime * 1000
	}

	if endTime, ok := w.GetOk("later_time"); ok {
		laterTime, err := utils.FormatUTCTimeStamp(endTime.(string))
		if err != nil {
			return nil, err
		}
		params["later_time"] = laterTime * 1000
	}

	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("items", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *HistoriesDSWrapper) showResourceHistoryToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("items", schemas.SliceToList(body.Get("items"),
			func(items gjson.Result) any {
				return map[string]any{
					"domain_id":     items.Get("domain_id").Value(),
					"resource_id":   items.Get("resource_id").Value(),
					"resource_type": items.Get("resource_type").Value(),
					"capture_time":  items.Get("capture_time").Value(),
					"status":        items.Get("status").Value(),
					"relations": schemas.SliceToList(items.Get("relations"),
						func(relations gjson.Result) any {
							return map[string]any{
								"relation_type":      relations.Get("relation_type").Value(),
								"from_resource_type": relations.Get("from_resource_type").Value(),
								"to_resource_type":   relations.Get("to_resource_type").Value(),
								"from_resource_id":   relations.Get("from_resource_id").Value(),
								"to_resource_id":     relations.Get("to_resource_id").Value(),
							}
						},
					),
					"resource": schemas.SliceToList(items.Get("resource"),
						func(resource gjson.Result) any {
							return map[string]any{
								"id":                 resource.Get("id").Value(),
								"name":               resource.Get("name").Value(),
								"ep_id":              resource.Get("ep_id").Value(),
								"ep_name":            resource.Get("ep_name").Value(),
								"checksum":           resource.Get("checksum").Value(),
								"provider":           resource.Get("provider").Value(),
								"created":            resource.Get("created").Value(),
								"updated":            resource.Get("updated").Value(),
								"provisioning_state": resource.Get("provisioning_state").Value(),
								"type":               resource.Get("type").Value(),
								"project_id":         resource.Get("project_id").Value(),
								"region_id":          resource.Get("region_id").Value(),
								"project_name":       resource.Get("project_name").Value(),
								"tags":               resource.Get("tags").Value(),
								"properties":         utils.JsonToString(resource.Get("properties").Value()),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
