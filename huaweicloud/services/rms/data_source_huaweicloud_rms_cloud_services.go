// Generated by PMS #850
package rms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRmsCloudServices() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsCloudServicesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"track": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"resource_providers": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"provider": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"display_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"category_display_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"resource_types": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"display_name": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"global": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"regions": {
										Type:     schema.TypeList,
										Computed: true,
										Elem:     &schema.Schema{Type: schema.TypeString},
									},
									"console_endpoint_id": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"console_list_url": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"console_detail_url": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"track": {
										Type:     schema.TypeString,
										Computed: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type CloudServicesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCloudServicesDSWrapper(d *schema.ResourceData, meta interface{}) *CloudServicesDSWrapper {
	return &CloudServicesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsCloudServicesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCloudServicesDSWrapper(d, meta)
	listProvidersRst, err := wrapper.ListProviders()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listProvidersToSchema(listProvidersRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API RMS GET /v1/resource-manager/domains/{domain_id}/providers
func (w *CloudServicesDSWrapper) ListProviders() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/providers"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"track": w.Get("track"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("resource_providers", "offset", "limit", 0).
		Request().
		Result()
}

func (w *CloudServicesDSWrapper) listProvidersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("resource_providers", schemas.SliceToList(body.Get("resource_providers"),
			func(resPro gjson.Result) any {
				return map[string]any{
					"provider":              resPro.Get("provider").Value(),
					"display_name":          resPro.Get("display_name").Value(),
					"category_display_name": resPro.Get("category_display_name").Value(),
					"resource_types": schemas.SliceToList(resPro.Get("resource_types"),
						func(resourceTypes gjson.Result) any {
							return map[string]any{
								"name":                resourceTypes.Get("name").Value(),
								"display_name":        resourceTypes.Get("display_name").Value(),
								"global":              resourceTypes.Get("global").Value(),
								"regions":             schemas.SliceToStrList(resourceTypes.Get("regions")),
								"console_endpoint_id": resourceTypes.Get("console_endpoint_id").Value(),
								"console_list_url":    resourceTypes.Get("console_list_url").Value(),
								"console_detail_url":  resourceTypes.Get("console_detail_url").Value(),
								"track":               resourceTypes.Get("track").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
