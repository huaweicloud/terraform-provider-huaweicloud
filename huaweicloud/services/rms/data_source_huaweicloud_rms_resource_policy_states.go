// Generated by PMS #869
package rms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRmsPolicyStates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsPolicyStatesRead,

		Schema: map[string]*schema.Schema{
			"resource_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"compliance_state": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"value": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"domain_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"region_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"resource_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"resource_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"resource_provider": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"resource_type": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"trigger_type": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"compliance_state": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"policy_assignment_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"policy_assignment_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"policy_definition_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"evaluation_time": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
		},
	}
}

type PolicyStatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPolicyStatesDSWrapper(d *schema.ResourceData, meta interface{}) *PolicyStatesDSWrapper {
	return &PolicyStatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsPolicyStatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPolicyStatesDSWrapper(d, meta)
	lisPolStaByResIdRst, err := wrapper.ListPolicyStatesByResourceId()

	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPolicyStatesByResourceIdToSchema(lisPolStaByResIdRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/resources/{resource_id}/policy-states
func (w *PolicyStatesDSWrapper) ListPolicyStatesByResourceId() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/resources/{resource_id}/policy-states"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	uri = strings.ReplaceAll(uri, "{resource_id}", w.Get("resource_id").(string))
	params := map[string]any{
		"compliance_state": w.Get("compliance_state"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("value", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *PolicyStatesDSWrapper) listPolicyStatesByResourceIdToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("value", schemas.SliceToList(body.Get("value"),
			func(value gjson.Result) any {
				return map[string]any{
					"compliance_state":       value.Get("compliance_state").Value(),
					"domain_id":              value.Get("domain_id").Value(),
					"evaluation_time":        value.Get("evaluation_time").Value(),
					"policy_assignment_id":   value.Get("policy_assignment_id").Value(),
					"policy_assignment_name": value.Get("policy_assignment_name").Value(),
					"policy_definition_id":   value.Get("policy_definition_id").Value(),
					"region_id":              value.Get("region_id").Value(),
					"resource_id":            value.Get("resource_id").Value(),
					"resource_name":          value.Get("resource_name").Value(),
					"resource_provider":      value.Get("resource_provider").Value(),
					"resource_type":          value.Get("resource_type").Value(),
					"trigger_type":           value.Get("trigger_type").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
