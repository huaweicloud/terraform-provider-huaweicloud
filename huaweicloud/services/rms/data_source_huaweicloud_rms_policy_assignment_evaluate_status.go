// Generated by PMS #861
package rms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceRmsPolicyAssignmentEvaluateStatus() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsPolicyAssignmentEvaluateStatusRead,

		Schema: map[string]*schema.Schema{
			"policy_assignment_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The policy assignment ID.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The start time of the evaluation task.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The end time of the evaluation task.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The execution status of the evaluation task.`,
			},
			"error_message": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The failure information of the evaluation task.`,
			},
		},
	}
}

type PolicyAssignmentEvaluateStatusDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPolicyAssignmentEvaluateStatusDSWrapper(d *schema.ResourceData, meta interface{}) *PolicyAssignmentEvaluateStatusDSWrapper {
	return &PolicyAssignmentEvaluateStatusDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsPolicyAssignmentEvaluateStatusRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPolicyAssignmentEvaluateStatusDSWrapper(d, meta)
	shoEvaStaByAssIdRst, err := wrapper.ShowEvaluationStateByAssignmentId()

	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showEvaluationStateByAssignmentIdToSchema(shoEvaStaByAssIdRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/policy-assignments/{policy_assignment_id}/policy-states/evaluation-state
func (w *PolicyAssignmentEvaluateStatusDSWrapper) ShowEvaluationStateByAssignmentId() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/policy-assignments/{policy_assignment_id}/policy-states/evaluation-state"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	uri = strings.ReplaceAll(uri, "{policy_assignment_id}", w.Get("policy_assignment_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *PolicyAssignmentEvaluateStatusDSWrapper) showEvaluationStateByAssignmentIdToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("start_time", body.Get("start_time").Value()),
		d.Set("end_time", body.Get("end_time").Value()),
		d.Set("state", body.Get("state").Value()),
		d.Set("error_message", body.Get("error_message").Value()),
	)
	return mErr.ErrorOrNil()
}
