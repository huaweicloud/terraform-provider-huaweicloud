// Generated by PMS #125
package cfw

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCfwFlowLogs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCfwFlowLogsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"fw_instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the firewall instance ID.`,
			},
			"direction": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the direction. The values can be **out2in** and **in2out**.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the start time. The time is in UTC.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the end time. The time is in UTC.`,
			},
			"src_ip": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the source IP address.`,
			},
			"src_port": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the source port.`,
			},
			"dst_ip": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the destination IP address.`,
			},
			"dst_port": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the destination port.`,
			},
			"app": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the application protocol.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project id.`,
			},
			"src_region_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the source region name.`,
			},
			"dst_region_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the destination region name.`,
			},
			"src_province_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the source province name.`,
			},
			"dst_province_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the destination province name.`,
			},
			"src_city_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the source city name.`,
			},
			"dst_city_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the destination city name.`,
			},
			"records": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The flow log records.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"direction": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The direction, which can be inbound or outbound.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The end time.`,
						},
						"src_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source IP address.`,
						},
						"dst_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The destination IP address.`,
						},
						"bytes": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The flow log bytes.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The start time.`,
						},
						"log_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The document ID.`,
						},
						"src_port": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The source port.`,
						},
						"app": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The application protocol.`,
						},
						"dst_port": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The destination port.`,
						},
						"protocol": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The protocol type.`,
						},
						"packets": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of packets.`,
						},
						"dst_host": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The destination host.`,
						},
						"src_region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source region id.`,
						},
						"src_region_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source region name.`,
						},
						"dst_region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The destination region id.`,
						},
						"dst_region_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The destination region name.`,
						},
						"src_province_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source province ID.`,
						},
						"src_province_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source province name.`,
						},
						"src_city_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source city ID.`,
						},
						"src_city_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source city name.`,
						},
						"dst_province_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The distination province ID.`,
						},
						"dst_province_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The distination province name.`,
						},
						"dst_city_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The distination city ID.`,
						},
						"dst_city_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The distination city name.`,
						},
					},
				},
			},
		},
	}
}

type FlowLogsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newFlowLogsDSWrapper(d *schema.ResourceData, meta interface{}) *FlowLogsDSWrapper {
	return &FlowLogsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCfwFlowLogsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newFlowLogsDSWrapper(d, meta)
	listFlowLogsRst, err := wrapper.ListFlowLogs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listFlowLogsToSchema(listFlowLogsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CFW GET /v1/{project_id}/cfw/logs/flow
func (w *FlowLogsDSWrapper) ListFlowLogs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cfw")
	if err != nil {
		return nil, err
	}
	startTime, err := utils.FormatUTCTimeStamp(w.Get("start_time").(string))
	if err != nil {
		return nil, err
	}
	endTime, err := utils.FormatUTCTimeStamp(w.Get("end_time").(string))
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/cfw/logs/flow"
	params := map[string]any{
		"fw_instance_id":        w.Get("fw_instance_id"),
		"direction":             w.Get("direction"),
		"start_time":            startTime * 1000,
		"end_time":              endTime * 1000,
		"src_ip":                w.Get("src_ip"),
		"src_port":              w.Get("src_port"),
		"dst_ip":                w.Get("dst_ip"),
		"dst_port":              w.Get("dst_port"),
		"app":                   w.Get("app"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"src_region_name":       w.Get("src_region_name"),
		"dst_region_name":       w.Get("dst_region_name"),
		"src_province_name":     w.Get("src_province_name"),
		"dst_province_name":     w.Get("dst_province_name"),
		"src_city_name":         w.Get("src_city_name"),
		"dst_city_name":         w.Get("dst_city_name"),
		"limit":                 1000,
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *FlowLogsDSWrapper) listFlowLogsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("records", schemas.SliceToList(body.Get("data.records"),
			func(record gjson.Result) any {
				return map[string]any{
					"direction":         record.Get("direction").Value(),
					"end_time":          w.setDataRecEndTim(&record),
					"src_ip":            record.Get("src_ip").Value(),
					"dst_ip":            record.Get("dst_ip").Value(),
					"bytes":             record.Get("bytes").Value(),
					"start_time":        w.setDataRecStaTim(&record),
					"log_id":            record.Get("log_id").Value(),
					"src_port":          record.Get("src_port").Value(),
					"app":               record.Get("app").Value(),
					"dst_port":          record.Get("dst_port").Value(),
					"protocol":          record.Get("protocol").Value(),
					"packets":           record.Get("packets").Value(),
					"dst_host":          record.Get("dst_host").Value(),
					"dst_region_name":   record.Get("dst_region_name").Value(),
					"src_region_id":     record.Get("src_region_id").Value(),
					"dst_region_id":     record.Get("dst_region_id").Value(),
					"src_region_name":   record.Get("src_region_name").Value(),
					"src_province_id":   record.Get("src_province_id").Value(),
					"src_province_name": record.Get("src_province_name").Value(),
					"src_city_id":       record.Get("src_city_id").Value(),
					"src_city_name":     record.Get("src_city_name").Value(),
					"dst_province_id":   record.Get("dst_province_id").Value(),
					"dst_province_name": record.Get("dst_province_name").Value(),
					"dst_city_id":       record.Get("dst_city_id").Value(),
					"dst_city_name":     record.Get("dst_city_name").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*FlowLogsDSWrapper) setDataRecEndTim(data *gjson.Result) string {
	endTime := int64(data.Get("end_time").Float() / 1000)
	return utils.FormatTimeStampUTC(endTime)
}

func (*FlowLogsDSWrapper) setDataRecStaTim(data *gjson.Result) string {
	startTime := int64(data.Get("start_time").Float() / 1000)
	return utils.FormatTimeStampUTC(startTime)
}
