// Generated by PMS #270
package cfw

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCfwCaptureTaskResults() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCfwCaptureTaskResultsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"fw_instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the firewall instance.`,
			},
			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the capture task ID.`,
			},
			"type": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies whether to set a public IP address for downloading.`,
			},
			"ip": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the public IP address ranges.`,
			},
			"captcha": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The captcha.`,
			},
			"expires": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The expiration time of the download link.`,
			},
			"file_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The capture file list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"file_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The file name.`,
						},
						"url": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The download link.`,
						},
						"file_path": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The file path.`,
						},
					},
				},
			},
			"request_header": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The request header.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The host header information.`,
						},
					},
				},
			},
			"url": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The download link.`,
			},
		},
	}
}

type CaptureTaskResultsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCaptureTaskResultsDSWrapper(d *schema.ResourceData, meta interface{}) *CaptureTaskResultsDSWrapper {
	return &CaptureTaskResultsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCfwCaptureTaskResultsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCaptureTaskResultsDSWrapper(d, meta)
	listCaptureResultRst, err := wrapper.ListCaptureResult()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCaptureResultToSchema(listCaptureResultRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CFW GET /v1/{project_id}/capture-task/capture-result
func (w *CaptureTaskResultsDSWrapper) ListCaptureResult() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cfw")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/capture-task/capture-result"
	params := map[string]any{
		"fw_instance_id": w.Get("fw_instance_id"),
		"task_id":        w.Get("task_id"),
		"type":           w.Get("type"),
		"ip":             w.ListToArray("ip"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *CaptureTaskResultsDSWrapper) listCaptureResultToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("captcha", body.Get("data.captcha").Value()),
		d.Set("expires", body.Get("data.expires").Value()),
		d.Set("file_list", schemas.SliceToList(body.Get("data.file_list"),
			func(fileList gjson.Result) any {
				return map[string]any{
					"file_name": fileList.Get("file_name").Value(),
					"url":       fileList.Get("url").Value(),
					"file_path": fileList.Get("file_path").Value(),
				}
			},
		)),
		d.Set("request_header", schemas.ObjectToList(body.Get("data.request_header"),
			func(requestHeader gjson.Result) any {
				return map[string]any{
					"host": requestHeader.Get("Host").Value(),
				}
			},
		)),
		d.Set("url", body.Get("data.url").Value()),
	)
	return mErr.ErrorOrNil()
}
