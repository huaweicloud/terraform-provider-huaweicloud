// Generated by PMS #552
package cfw

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCfwDomainNameParseIpList() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCfwDomainNameParseIpListRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"domain_name": {
				Type:          schema.TypeString,
				Optional:      true,
				Description:   `Specifies the domain name.`,
				ConflictsWith: []string{"group_id", "domain_address_id"},
				ExactlyOneOf:  []string{"domain_name", "domain_address_id"},
			},
			"fw_instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the firewall ID.`,
			},
			"group_id": {
				Type:          schema.TypeString,
				Optional:      true,
				Description:   `Specifies the domain name group ID.`,
				ConflictsWith: []string{"domain_name"},
				RequiredWith:  []string{"fw_instance_id", "domain_address_id"},
			},
			"domain_address_id": {
				Type:          schema.TypeString,
				Optional:      true,
				Description:   `Specifies the domain name ID.`,
				ConflictsWith: []string{"domain_name"},
				RequiredWith:  []string{"fw_instance_id", "group_id"},
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"address_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the address type.`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `The IP address list for domain name resolution.`,
			},
		},
	}
}

type DomainNameParseIpListDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newDomainNameParseIpListDSWrapper(d *schema.ResourceData, meta interface{}) *DomainNameParseIpListDSWrapper {
	return &DomainNameParseIpListDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCfwDomainNameParseIpListRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newDomainNameParseIpListDSWrapper(d, meta)
	_, domainNameOk := d.GetOk("domain_name")
	if domainNameOk {
		lisDomParDetRst, err := wrapper.ListDomainParseDetail()
		if err != nil {
			return diag.FromErr(err)
		}

		err = wrapper.listDomainParseDetailToSchema(lisDomParDetRst)
		if err != nil {
			return diag.FromErr(err)
		}
	}

	_, domainAddressIdOk := d.GetOk("domain_address_id")
	if domainAddressIdOk {
		listDomainParseIpRst, err := wrapper.ListDomainParseIp()
		if err != nil {
			return diag.FromErr(err)
		}

		err = wrapper.listDomainParseIpToSchema(listDomainParseIpRst)
		if err != nil {
			return diag.FromErr(err)
		}
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	return nil
}

// @API CFW GET /v1/{project_id}/domain/parse/{domain_name}
func (w *DomainNameParseIpListDSWrapper) ListDomainParseDetail() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cfw")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/domain/parse/{domain_name}"
	uri = strings.ReplaceAll(uri, "{domain_name}", w.Get("domain_name").(string))
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"fw_instance_id":        w.Get("fw_instance_id"),
		"address_type":          w.Get("address_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

// @API CFW GET /v1/{project_id}/domain/parse-ip-list/{domain_address_id}
func (w *DomainNameParseIpListDSWrapper) ListDomainParseIp() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cfw")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/domain/parse-ip-list/{domain_address_id}"
	uri = strings.ReplaceAll(uri, "{domain_address_id}", w.Get("domain_address_id").(string))
	params := map[string]any{
		"address_type":          w.Get("address_type"),
		"domain_set_id":         w.Get("group_id"),
		"fw_instance_id":        w.Get("fw_instance_id"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *DomainNameParseIpListDSWrapper) listDomainParseDetailToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("data", body.Get("data").Value()),
	)
	return mErr.ErrorOrNil()
}

func (w *DomainNameParseIpListDSWrapper) listDomainParseIpToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("data", body.Get("data").Value()),
	)
	return mErr.ErrorOrNil()
}
