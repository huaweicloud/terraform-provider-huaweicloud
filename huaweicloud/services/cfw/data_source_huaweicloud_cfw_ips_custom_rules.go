// Generated by PMS #527
package cfw

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCfwIpsCustomRules() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCfwIpsCustomRulesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"fw_instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the firewall ID.`,
			},
			"object_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the protected object ID.`,
			},
			"action_type": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the action type.`,
			},
			"affected_os": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the affected OS.`,
			},
			"attack_type": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the attack type.`,
			},
			"ips_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the IPS custom rule name.`,
			},
			"protocol": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the protocol.`,
			},
			"severity": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the severity.`,
			},
			"software": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the affected software.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"records": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The customize IPS rule records.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"severity": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The severity.`,
						},
						"software": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The affected software.`,
						},
						"src_ports": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source port.`,
						},
						"dst_port_type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The destination port type.`,
						},
						"content": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The content storage in JSON format.`,
						},
						"dst_ports": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The destination port.`,
						},
						"attack_type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The attack type.`,
						},
						"src_port_type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The source port type.`,
						},
						"protocol": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The protocol.`,
						},
						"affected_os": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The affected OS.`,
						},
						"config_status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The rule status.`,
						},
						"group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The firewall cluster ID.`,
						},
						"ips_cfw_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a custom IPS rule in CFW.`,
						},
						"ips_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a rule in Hillstone.`,
						},
						"ips_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The IPS rule name.`,
						},
						"action": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The action.`,
						},
					},
				},
			},
		},
	}
}

type IpsCustomRulesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newIpsCustomRulesDSWrapper(d *schema.ResourceData, meta interface{}) *IpsCustomRulesDSWrapper {
	return &IpsCustomRulesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCfwIpsCustomRulesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newIpsCustomRulesDSWrapper(d, meta)
	listCustomerIpsRst, err := wrapper.ListCustomerIps()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCustomerIpsToSchema(listCustomerIpsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CFW GET /v1/{project_id}/ips/custom-rule
func (w *IpsCustomRulesDSWrapper) ListCustomerIps() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cfw")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/ips/custom-rule"
	params := map[string]any{
		"action_type":           w.Get("action_type"),
		"affected_os":           w.Get("affected_os"),
		"attack_type":           w.Get("attack_type"),
		"fw_instance_id":        w.Get("fw_instance_id"),
		"ips_name":              w.Get("ips_name"),
		"object_id":             w.Get("object_id"),
		"protocol":              w.Get("protocol"),
		"severity":              w.Get("severity"),
		"software":              w.Get("software"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data.records", "offset", "limit", 1000).
		Request().
		Result()
}

func (w *IpsCustomRulesDSWrapper) listCustomerIpsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("records", schemas.SliceToList(body.Get("data.records"),
			func(records gjson.Result) any {
				return map[string]any{
					"severity":      records.Get("severity").Value(),
					"software":      records.Get("software").Value(),
					"src_ports":     records.Get("src_ports").Value(),
					"dst_port_type": records.Get("dst_port_type").Value(),
					"content":       records.Get("content").Value(),
					"dst_ports":     records.Get("dst_ports").Value(),
					"attack_type":   records.Get("attack_type").Value(),
					"src_port_type": records.Get("src_port_type").Value(),
					"protocol":      records.Get("protocol").Value(),
					"affected_os":   records.Get("affected_os").Value(),
					"config_status": records.Get("config_status").Value(),
					"group_id":      records.Get("group_id").Value(),
					"ips_cfw_id":    records.Get("ips_cfw_id").Value(),
					"ips_id":        records.Get("ips_id").Value(),
					"ips_name":      records.Get("ips_name").Value(),
					"action":        records.Get("action").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
