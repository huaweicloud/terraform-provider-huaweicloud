// Generated by PMS #266
package cfw

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCfwCaptureTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCfwCaptureTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"fw_instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the firewall instance.`,
			},
			"records": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `List of capture task information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"task_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The capture task ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The capture task name.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The capture task status.`,
						},
						"source_address_type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The source address type.`,
						},
						"source_address": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source address.`,
						},
						"dest_address_type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The destination address type.`,
						},
						"dest_address": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The destination address.`,
						},
						"protocol": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The protocol type.`,
						},
						"source_port": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source port.`,
						},
						"dest_port": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The destination port.`,
						},
						"duration": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The capture task duration.`,
						},
						"remaining_days": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The remaining days.`,
						},
						"is_deleted": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Whether is deleted.`,
						},
						"max_packets": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The max packets.`,
						},
						"capture_size": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The capture task size.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the capture task.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time of the capture task.`,
						},
					},
				},
			},
		},
	}
}

type CaptureTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCaptureTasksDSWrapper(d *schema.ResourceData, meta interface{}) *CaptureTasksDSWrapper {
	return &CaptureTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCfwCaptureTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCaptureTasksDSWrapper(d, meta)
	listCaptureTaskRst, err := wrapper.ListCaptureTask()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCaptureTaskToSchema(listCaptureTaskRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CFW GET /v1/{project_id}/capture-task
func (w *CaptureTasksDSWrapper) ListCaptureTask() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cfw")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/capture-task"
	params := map[string]any{
		"fw_instance_id": w.Get("fw_instance_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data.records", "offset", "limit", 1024).
		Request().
		Result()
}

func (w *CaptureTasksDSWrapper) listCaptureTaskToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("records", schemas.SliceToList(body.Get("data.records"),
			func(records gjson.Result) any {
				return map[string]any{
					"task_id":             records.Get("task_id").Value(),
					"name":                records.Get("name").Value(),
					"status":              records.Get("status").Value(),
					"source_address_type": records.Get("source_address_type").Value(),
					"source_address":      records.Get("source_address").Value(),
					"dest_address_type":   records.Get("dest_address_type").Value(),
					"dest_address":        records.Get("dest_address").Value(),
					"protocol":            records.Get("protocol").Value(),
					"source_port":         records.Get("source_port").Value(),
					"dest_port":           records.Get("dest_port").Value(),
					"duration":            records.Get("duration").Value(),
					"remaining_days":      records.Get("remaining_days").Value(),
					"is_deleted":          records.Get("is_deleted").Value(),
					"max_packets":         records.Get("max_packets").Value(),
					"capture_size":        records.Get("capture_size").Value(),
					"created_at": schemas.DateFormat(
						records.Get("created_date"),
						"2006/01/02 15:04:05",
						"2006-01-02T15:04:05Z07:00",
					),
					"updated_at": schemas.DateFormat(
						records.Get("modified_date"),
						"2006/01/02 15:04:05",
						"2006-01-02T15:04:05Z07:00",
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
