// Generated by PMS #965
package hss

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceHssAppEvents() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceHssAppEventsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"begin_time": {
				Type:     schema.TypeInt,
				Required: true,
			},
			"end_time": {
				Type:     schema.TypeInt,
				Required: true,
			},
			"enterprise_project_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"last_days": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"host_name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"host_ip": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"handle_status": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"data_list": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     buildDataAppEventsDataListSchema(),
			},
		},
	}
}

func buildDataAppEventsDataListSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"event_type": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"public_ip": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"operate_accept_list": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
			"event_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"severity": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"handle_status": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"handle_method": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"operate_detail_list": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     buildDataListOperateDetailListSchema(),
			},
			"os_type": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"occur_time": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"host_status": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"protect_status": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"host_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"private_ip": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"attack_phase": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"recommendation": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"process_info": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     buildDataListProcessInfoSchema(),
			},
			"event_class_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"resource_info": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     buildDataListResourceInfoSchema(),
			},
			"policy_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"agent_status": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"event_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"attack_tag": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"handle_time": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"host_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"policy_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"asset_value": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func buildDataListResourceInfoSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"region_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"service": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"os_bit": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"host_ip": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"cluster_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"agent_version": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"project_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"enterprise_project_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"vm_uuid": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"host_attr": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"sys_arch": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"pod_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"cluster_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"os_type": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"public_ip": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"container_status": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"domain_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"cloud_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"image_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"host_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"vpc_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"micro_service": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"os_version": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"namespace": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"container_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"host_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"vm_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"image_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"os_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"pod_uid": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"asset_value": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func buildDataListProcessInfoSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"child_process_gid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"escape_mode": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"ancestor_process_path": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"child_process_filename": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"process_filename": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"parent_process_uid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"parent_process_filename": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"child_process_path": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"process_cmdline": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"process_username": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"parent_process_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"parent_process_gid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"parent_process_egid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"parent_process_euid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"ancestor_process_cmdline": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"process_uid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"virt_cmd": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"process_hash": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"child_process_egid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"process_gid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"parent_process_start_time": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"child_process_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"child_process_pid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"child_process_cmdline": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"virt_process_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"score": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"process_pid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"parent_process_pid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"parent_process_cmdline": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"child_process_start_time": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"mode": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"rule": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"ancestor_process_pid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"process_start_time": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"escape_cmd": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"operate_type": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"session_id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"process_path": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"process_egid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"process_euid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"parent_process_path": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"child_process_uid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"child_process_euid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"process_file_hash": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"parent_process_file_hash": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"process_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func buildDataListOperateDetailListSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"private_ip": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"login_ip": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"login_user_name": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"agent_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"process_pid": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"file_hash": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"file_path": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"file_attr": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

type AppEventsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAppEventsDSWrapper(d *schema.ResourceData, meta interface{}) *AppEventsDSWrapper {
	return &AppEventsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceHssAppEventsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAppEventsDSWrapper(d, meta)
	lisAppWhiEveRst, err := wrapper.ListAppWhitelistEvent()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAppWhitelistEventToSchema(lisAppWhiEveRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API HSS GET /v5/{project_id}/app/event
func (w *AppEventsDSWrapper) ListAppWhitelistEvent() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "hss")
	if err != nil {
		return nil, err
	}

	uri := "/v5/{project_id}/app/event"
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"last_days":             w.Get("last_days"),
		"begin_time":            w.Get("begin_time"),
		"end_time":              w.Get("end_time"),
		"host_name":             w.Get("host_name"),
		"host_ip":               w.Get("host_ip"),
		"handle_status":         w.Get("handle_status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data_list", "offset", "limit", 200).
		Request().
		Result()
}

func (w *AppEventsDSWrapper) listAppWhitelistEventToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("data_list", schemas.SliceToList(body.Get("data_list"),
			func(dataList gjson.Result) any {
				return map[string]any{
					"event_type":          dataList.Get("event_type").Value(),
					"public_ip":           dataList.Get("public_ip").Value(),
					"operate_accept_list": schemas.SliceToStrList(dataList.Get("operate_accept_list")),
					"event_id":            dataList.Get("event_id").Value(),
					"severity":            dataList.Get("severity").Value(),
					"handle_status":       dataList.Get("handle_status").Value(),
					"handle_method":       dataList.Get("handle_method").Value(),
					"operate_detail_list": schemas.SliceToList(dataList.Get("operate_detail_list"),
						func(operateDetailList gjson.Result) any {
							return map[string]any{
								"private_ip":      operateDetailList.Get("private_ip").Value(),
								"login_ip":        operateDetailList.Get("login_ip").Value(),
								"login_user_name": operateDetailList.Get("login_user_name").Value(),
								"agent_id":        operateDetailList.Get("agent_id").Value(),
								"process_pid":     operateDetailList.Get("process_pid").Value(),
								"file_hash":       operateDetailList.Get("file_hash").Value(),
								"file_path":       operateDetailList.Get("file_path").Value(),
								"file_attr":       operateDetailList.Get("file_attr").Value(),
							}
						},
					),
					"os_type":        dataList.Get("os_type").Value(),
					"occur_time":     dataList.Get("occur_time").Value(),
					"host_status":    dataList.Get("host_status").Value(),
					"protect_status": dataList.Get("protect_status").Value(),
					"host_id":        dataList.Get("host_id").Value(),
					"private_ip":     dataList.Get("private_ip").Value(),
					"attack_phase":   dataList.Get("attack_phase").Value(),
					"recommendation": dataList.Get("recommendation").Value(),
					"process_info": schemas.SliceToList(dataList.Get("process_info"),
						func(processInfo gjson.Result) any {
							return map[string]any{
								"child_process_gid":         processInfo.Get("child_process_gid").Value(),
								"escape_mode":               processInfo.Get("escape_mode").Value(),
								"ancestor_process_path":     processInfo.Get("ancestor_process_path").Value(),
								"child_process_filename":    processInfo.Get("child_process_filename").Value(),
								"process_filename":          processInfo.Get("process_filename").Value(),
								"parent_process_uid":        processInfo.Get("parent_process_uid").Value(),
								"parent_process_filename":   processInfo.Get("parent_process_filename").Value(),
								"child_process_path":        processInfo.Get("child_process_path").Value(),
								"process_cmdline":           processInfo.Get("process_cmdline").Value(),
								"process_username":          processInfo.Get("process_username").Value(),
								"parent_process_name":       processInfo.Get("parent_process_name").Value(),
								"parent_process_gid":        processInfo.Get("parent_process_gid").Value(),
								"parent_process_egid":       processInfo.Get("parent_process_egid").Value(),
								"parent_process_euid":       processInfo.Get("parent_process_euid").Value(),
								"ancestor_process_cmdline":  processInfo.Get("ancestor_process_cmdline").Value(),
								"process_uid":               processInfo.Get("process_uid").Value(),
								"virt_cmd":                  processInfo.Get("virt_cmd").Value(),
								"process_hash":              processInfo.Get("process_hash").Value(),
								"child_process_egid":        processInfo.Get("child_process_egid").Value(),
								"process_gid":               processInfo.Get("process_gid").Value(),
								"parent_process_start_time": processInfo.Get("parent_process_start_time").Value(),
								"child_process_name":        processInfo.Get("child_process_name").Value(),
								"child_process_pid":         processInfo.Get("child_process_pid").Value(),
								"child_process_cmdline":     processInfo.Get("child_process_cmdline").Value(),
								"virt_process_name":         processInfo.Get("virt_process_name").Value(),
								"score":                     processInfo.Get("score").Value(),
								"process_pid":               processInfo.Get("process_pid").Value(),
								"parent_process_pid":        processInfo.Get("parent_process_pid").Value(),
								"parent_process_cmdline":    processInfo.Get("parent_process_cmdline").Value(),
								"child_process_start_time":  processInfo.Get("child_process_start_time").Value(),
								"mode":                      processInfo.Get("mode").Value(),
								"rule":                      processInfo.Get("rule").Value(),
								"ancestor_process_pid":      processInfo.Get("ancestor_process_pid").Value(),
								"process_start_time":        processInfo.Get("process_start_time").Value(),
								"escape_cmd":                processInfo.Get("escape_cmd").Value(),
								"operate_type":              processInfo.Get("operate_type").Value(),
								"session_id":                processInfo.Get("session_id").Value(),
								"process_path":              processInfo.Get("process_path").Value(),
								"process_egid":              processInfo.Get("process_egid").Value(),
								"process_euid":              processInfo.Get("process_euid").Value(),
								"parent_process_path":       processInfo.Get("parent_process_path").Value(),
								"child_process_uid":         processInfo.Get("child_process_uid").Value(),
								"child_process_euid":        processInfo.Get("child_process_euid").Value(),
								"process_file_hash":         processInfo.Get("process_file_hash").Value(),
								"parent_process_file_hash":  processInfo.Get("parent_process_file_hash").Value(),
								"process_name":              processInfo.Get("process_name").Value(),
							}
						},
					),
					"event_class_id": dataList.Get("event_class_id").Value(),
					"resource_info": schemas.SliceToList(dataList.Get("resource_info"),
						func(resourceInfo gjson.Result) any {
							return map[string]any{
								"region_name":           resourceInfo.Get("region_name").Value(),
								"service":               resourceInfo.Get("service").Value(),
								"os_bit":                resourceInfo.Get("os_bit").Value(),
								"host_ip":               resourceInfo.Get("host_ip").Value(),
								"cluster_name":          resourceInfo.Get("cluster_name").Value(),
								"agent_version":         resourceInfo.Get("agent_version").Value(),
								"project_id":            resourceInfo.Get("project_id").Value(),
								"enterprise_project_id": resourceInfo.Get("enterprise_project_id").Value(),
								"vm_uuid":               resourceInfo.Get("vm_uuid").Value(),
								"host_attr":             resourceInfo.Get("host_attr").Value(),
								"sys_arch":              resourceInfo.Get("sys_arch").Value(),
								"pod_name":              resourceInfo.Get("pod_name").Value(),
								"cluster_id":            resourceInfo.Get("cluster_id").Value(),
								"os_type":               resourceInfo.Get("os_type").Value(),
								"public_ip":             resourceInfo.Get("public_ip").Value(),
								"container_status":      resourceInfo.Get("container_status").Value(),
								"domain_id":             resourceInfo.Get("domain_id").Value(),
								"cloud_id":              resourceInfo.Get("cloud_id").Value(),
								"image_id":              resourceInfo.Get("image_id").Value(),
								"host_id":               resourceInfo.Get("host_id").Value(),
								"vpc_id":                resourceInfo.Get("vpc_id").Value(),
								"micro_service":         resourceInfo.Get("micro_service").Value(),
								"os_version":            resourceInfo.Get("os_version").Value(),
								"namespace":             resourceInfo.Get("namespace").Value(),
								"container_id":          resourceInfo.Get("container_id").Value(),
								"host_name":             resourceInfo.Get("host_name").Value(),
								"vm_name":               resourceInfo.Get("vm_name").Value(),
								"image_name":            resourceInfo.Get("image_name").Value(),
								"os_name":               resourceInfo.Get("os_name").Value(),
								"pod_uid":               resourceInfo.Get("pod_uid").Value(),
								"asset_value":           resourceInfo.Get("asset_value").Value(),
							}
						},
					),
					"policy_name":  dataList.Get("policy_name").Value(),
					"agent_status": dataList.Get("agent_status").Value(),
					"event_name":   dataList.Get("event_name").Value(),
					"attack_tag":   dataList.Get("attack_tag").Value(),
					"handle_time":  dataList.Get("handle_time").Value(),
					"host_name":    dataList.Get("host_name").Value(),
					"policy_id":    dataList.Get("policy_id").Value(),
					"asset_value":  dataList.Get("asset_value").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
