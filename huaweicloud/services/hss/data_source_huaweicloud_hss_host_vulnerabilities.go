// Generated by PMS #675
package hss

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceHssHostVulnerabilities() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceHssHostVulnerabilitiesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"host_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the host ID.`,
			},
			"vul_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the vulnerability name.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the vulnerability type.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the vulnerability status.`,
			},
			"handle_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the handling status.`,
			},
			"repair_priority": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fixing priority.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID to which the hosts belong.`,
			},
			"data_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of host vulnerabilities.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"vul_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The vulnerability ID.`,
						},
						"vul_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The vulnerability name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The vulnerability description.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The vulnerability type.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The vulnerability status.`,
						},
						"repair_necessity": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The repair urgency.`,
						},
						"severity_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The risk level.`,
						},
						"repair_priority": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The fixing priority.`,
						},
						"repair_cmd": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The repair command.`,
						},
						"repair_success_num": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total times that the vulnerability is fixed by HSS on the entire network.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The host quota.`,
						},
						"support_restore": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether data can be rolled back to the backup created when the vulnerability was fixed.`,
						},
						"app_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of softwares affected by the vulnerability on the host.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"app_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The software name.`,
									},
									"app_path": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The path of the application software.`,
									},
									"app_version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The software version.`,
									},
									"upgrade_version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The version that needs to be upgraded to fix vulnerability software.`,
									},
								},
							},
						},
						"solution_detail": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The solution of fixed vulnerability.`,
						},
						"url": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The URL.`,
						},
						"app_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The software name.`,
						},
						"app_path": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The software path.`,
						},
						"app_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The software version.`,
						},
						"is_affect_business": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether services are affected.`,
						},
						"label_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The vulnerability tags list.`,
						},
						"cve_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The CVE list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"cve_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The CVE ID.`,
									},
									"cvss": {
										Type:        schema.TypeFloat,
										Computed:    true,
										Description: `The CVSS score.`,
									},
								},
							},
						},
						"disabled_operate_types": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of operation types of vulnerabilities that cannot be performed.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"operate_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The operation type.`,
									},
									"reason": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The reason why the operation cannot be performed.`,
									},
								},
							},
						},
						"first_scan_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The first scan time.`,
						},
						"scan_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The latest scan time.`,
						},
					},
				},
			},
		},
	}
}

type HostVulnerabilitiesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newHostVulnerabilitiesDSWrapper(d *schema.ResourceData, meta interface{}) *HostVulnerabilitiesDSWrapper {
	return &HostVulnerabilitiesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceHssHostVulnerabilitiesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newHostVulnerabilitiesDSWrapper(d, meta)
	listHostVulsRst, err := wrapper.ListHostVuls()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listHostVulsToSchema(listHostVulsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API HSS GET /v5/{project_id}/vulnerability/host/{host_id}
func (w *HostVulnerabilitiesDSWrapper) ListHostVuls() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "hss")
	if err != nil {
		return nil, err
	}

	uri := "/v5/{project_id}/vulnerability/host/{host_id}"
	uri = strings.ReplaceAll(uri, "{host_id}", w.Get("host_id").(string))
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"type":                  w.Get("type"),
		"vul_name":              w.Get("vul_name"),
		"handle_status":         w.Get("handle_status"),
		"status":                w.Get("status"),
		"repair_priority":       w.Get("repair_priority"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data_list", "offset", "limit", 0).
		Request().
		Result()
}

func (w *HostVulnerabilitiesDSWrapper) listHostVulsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("data_list", schemas.SliceToList(body.Get("data_list"),
			func(dataList gjson.Result) any {
				return map[string]any{
					"vul_id":             dataList.Get("vul_id").Value(),
					"vul_name":           dataList.Get("vul_name").Value(),
					"description":        dataList.Get("description").Value(),
					"type":               dataList.Get("type").Value(),
					"status":             dataList.Get("status").Value(),
					"repair_necessity":   dataList.Get("repair_necessity").Value(),
					"severity_level":     dataList.Get("severity_level").Value(),
					"repair_priority":    dataList.Get("repair_priority").Value(),
					"repair_cmd":         dataList.Get("repair_cmd").Value(),
					"repair_success_num": dataList.Get("repair_success_num").Value(),
					"version":            dataList.Get("version").Value(),
					"support_restore":    dataList.Get("support_restore").Value(),
					"app_list": schemas.SliceToList(dataList.Get("app_list"),
						func(appList gjson.Result) any {
							return map[string]any{
								"app_name":        appList.Get("app_name").Value(),
								"app_path":        appList.Get("app_path").Value(),
								"app_version":     appList.Get("app_version").Value(),
								"upgrade_version": appList.Get("upgrade_version").Value(),
							}
						},
					),
					"solution_detail":    dataList.Get("solution_detail").Value(),
					"url":                dataList.Get("url").Value(),
					"app_name":           dataList.Get("app_name").Value(),
					"app_path":           dataList.Get("app_path").Value(),
					"app_version":        dataList.Get("app_version").Value(),
					"is_affect_business": dataList.Get("is_affect_business").Value(),
					"label_list":         schemas.SliceToStrList(dataList.Get("label_list")),
					"cve_list": schemas.SliceToList(dataList.Get("cve_list"),
						func(cveList gjson.Result) any {
							return map[string]any{
								"cve_id": cveList.Get("cve_id").Value(),
								"cvss":   cveList.Get("cvss").Value(),
							}
						},
					),
					"disabled_operate_types": schemas.SliceToList(dataList.Get("disabled_operate_types"),
						func(disabledOperateTypes gjson.Result) any {
							return map[string]any{
								"operate_type": disabledOperateTypes.Get("operate_type").Value(),
								"reason":       disabledOperateTypes.Get("reason").Value(),
							}
						},
					),
					"first_scan_time": dataList.Get("first_scan_time").Value(),
					"scan_time":       dataList.Get("scan_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
