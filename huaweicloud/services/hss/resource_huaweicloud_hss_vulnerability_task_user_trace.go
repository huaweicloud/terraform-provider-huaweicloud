package hss

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/chnsz/golangsdk"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

var vulnerabilityTaskUserTraceNonUpdatableParams = []string{
	"task_type",
	"enterprise_project_id",
}

// @API HSS POST /v5/{project_id}/vulnerability/task/user/trace
func ResourceVulnerabilityTaskUserTrace() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceVulnerabilityTaskUserTraceCreate,
		ReadContext:   resourceVulnerabilityTaskUserTraceRead,
		UpdateContext: resourceVulnerabilityTaskUserTraceUpdate,
		DeleteContext: resourceVulnerabilityTaskUserTraceDelete,

		CustomizeDiff: config.FlexibleForceNew(vulnerabilityTaskUserTraceNonUpdatableParams),

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"task_type": {
				Type:     schema.TypeString,
				Required: true,
			},
			"enterprise_project_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"enable_force_new": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: validation.StringInSlice([]string{"true", "false"}, false),
				Description:  utils.SchemaDesc("", utils.SchemaDescInput{Internal: true}),
			},
		},
	}
}

func buildVulnerabilityTaskUserTraceQueryParams(epsID string) string {
	if epsID != "" {
		return fmt.Sprintf("?enterprise_project_id=%s", epsID)
	}
	return ""
}

func buildVulnerabilityTaskUserTraceBodyParams(d *schema.ResourceData) map[string]interface{} {
	bodyParams := map[string]interface{}{
		"task_type": d.Get("task_type").(string),
	}
	return bodyParams
}

func resourceVulnerabilityTaskUserTraceCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	var (
		cfg     = meta.(*config.Config)
		region  = cfg.GetRegion(d)
		httpUrl = "v5/{project_id}/vulnerability/task/user/trace"
	)

	client, err := cfg.NewServiceClient("hss", region)
	if err != nil {
		return diag.Errorf("error creating HSS client: %s", err)
	}

	epsID := cfg.GetEnterpriseProjectID(d)
	requestPath := client.Endpoint + httpUrl
	requestPath = strings.ReplaceAll(requestPath, "{project_id}", client.ProjectID)
	requestPath += buildVulnerabilityTaskUserTraceQueryParams(epsID)
	requestOpt := golangsdk.RequestOpts{
		KeepResponseBody: true,
		MoreHeaders:      map[string]string{"Content-Type": "application/json"},
		JSONBody:         buildVulnerabilityTaskUserTraceBodyParams(d),
	}

	_, err = client.Request("POST", requestPath, &requestOpt)
	if err != nil {
		return diag.Errorf("error recording vulnerability task user trace: %s", err)
	}

	randomUUID, err := uuid.GenerateUUID()
	if err != nil {
		return diag.Errorf("unable to generate ID: %s", err)
	}

	d.SetId(randomUUID)

	return resourceVulnerabilityTaskUserTraceRead(ctx, d, meta)
}

func resourceVulnerabilityTaskUserTraceRead(_ context.Context, _ *schema.ResourceData, _ interface{}) diag.Diagnostics {
	// This is a one-time action resource, no need to implement read
	return nil
}

func resourceVulnerabilityTaskUserTraceUpdate(_ context.Context, _ *schema.ResourceData, _ interface{}) diag.Diagnostics {
	// This is a one-time action resource, no updates are allowed
	return nil
}

func resourceVulnerabilityTaskUserTraceDelete(_ context.Context, _ *schema.ResourceData, _ interface{}) diag.Diagnostics {
	errorMsg := `This resource is a one-time action resource used to record the last time a user viewed vulnerability tasks.
	Deleting this resource will not clear the corresponding request record, but will only remove the resource
	information from the Terraform state file.`

	return diag.Diagnostics{
		diag.Diagnostic{
			Severity: diag.Warning,
			Summary:  errorMsg,
		},
	}
}
