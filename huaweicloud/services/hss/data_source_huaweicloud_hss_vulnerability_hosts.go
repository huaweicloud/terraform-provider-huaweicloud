package hss

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/chnsz/golangsdk"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

// @API HSS GET /v5/{project_id}/vulnerability/hosts
func DataSourceVulnerabilityHosts() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVulnerabilityHostsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"vul_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"type": {
				Type:     schema.TypeString,
				Required: true,
			},
			"host_name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"host_ip": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"status": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"asset_value": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"group_name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"handle_status": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"severity_level": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"repair_priority": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"is_affect_business": {
				Type:     schema.TypeBool,
				Optional: true,
			},
			"enterprise_project_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"data_list": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"host_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"host_ip": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"severity_level": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"agent_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"version": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"cve_num": {
							Type:     schema.TypeInt,
							Computed: true,
						},
						"cve_id_list": {
							Type:     schema.TypeList,
							Computed: true,
							Elem:     &schema.Schema{Type: schema.TypeString},
						},
						"status": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"repair_cmd": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"app_path": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"region_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"public_ip": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"private_ip": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"group_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"group_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"os_type": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"asset_value": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"is_affect_business": {
							Type:     schema.TypeBool,
							Computed: true,
						},
						"first_scan_time": {
							Type:     schema.TypeInt,
							Computed: true,
						},
						"scan_time": {
							Type:     schema.TypeInt,
							Computed: true,
						},
						"support_restore": {
							Type:     schema.TypeBool,
							Computed: true,
						},
						"disabled_operate_types": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"operate_type": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"reason": {
										Type:     schema.TypeString,
										Computed: true,
									},
								},
							},
						},
						"repair_priority": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
		},
	}
}

func buildVulnerabilityHostsQueryParams(d *schema.ResourceData, epsId string) string {
	queryParams := fmt.Sprintf("?vul_id=%v&type=%v", d.Get("vul_id"), d.Get("type"))

	if v, ok := d.GetOk("host_name"); ok {
		queryParams = fmt.Sprintf("%s&host_name=%v", queryParams, v)
	}
	if v, ok := d.GetOk("host_ip"); ok {
		queryParams = fmt.Sprintf("%s&host_ip=%v", queryParams, v)
	}
	if v, ok := d.GetOk("status"); ok {
		queryParams = fmt.Sprintf("%s&status=%v", queryParams, v)
	}
	if v, ok := d.GetOk("asset_value"); ok {
		queryParams = fmt.Sprintf("%s&asset_value=%v", queryParams, v)
	}
	if v, ok := d.GetOk("group_name"); ok {
		queryParams = fmt.Sprintf("%s&group_name=%v", queryParams, v)
	}
	if v, ok := d.GetOk("handle_status"); ok {
		queryParams = fmt.Sprintf("%s&handle_status=%v", queryParams, v)
	}
	if v, ok := d.GetOk("severity_level"); ok {
		queryParams = fmt.Sprintf("%s&severity_level=%v", queryParams, v)
	}
	if v, ok := d.GetOk("repair_priority"); ok {
		queryParams = fmt.Sprintf("%s&repair_priority=%v", queryParams, v)
	}
	if d.Get("is_affect_business").(bool) {
		queryParams = fmt.Sprintf("%s&is_affect_business=true", queryParams)
	}
	if epsId != "" {
		queryParams = fmt.Sprintf("%s&enterprise_project_id=%v", queryParams, epsId)
	}

	return queryParams
}

func dataSourceVulnerabilityHostsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	var (
		cfg     = meta.(*config.Config)
		region  = cfg.GetRegion(d)
		epsId   = cfg.GetEnterpriseProjectID(d)
		httpUrl = "v5/{project_id}/vulnerability/hosts"
	)

	client, err := cfg.NewServiceClient("hss", region)
	if err != nil {
		return diag.Errorf("error creating HSS client: %s", err)
	}

	getPath := client.Endpoint + httpUrl
	getPath = strings.ReplaceAll(getPath, "{project_id}", client.ProjectID)
	getPath += buildVulnerabilityHostsQueryParams(d, epsId)

	getOpt := golangsdk.RequestOpts{
		KeepResponseBody: true,
	}

	getResp, err := client.Request("GET", getPath, &getOpt)
	if err != nil {
		return diag.Errorf("error retrieving hosts: %s", err)
	}

	getRespBody, err := utils.FlattenResponse(getResp)
	if err != nil {
		return diag.FromErr(err)
	}

	hosts := utils.PathSearch("data_list", getRespBody, make([]interface{}, 0)).([]interface{})

	generateUUID, err := uuid.GenerateUUID()
	if err != nil {
		return diag.Errorf("unable to generate ID: %s", err)
	}

	d.SetId(generateUUID)

	mErr := multierror.Append(nil,
		d.Set("region", region),
		d.Set("data_list", flattenVulnerabilityHosts(hosts)),
	)

	return diag.FromErr(mErr.ErrorOrNil())
}

func flattenVulnerabilityHosts(hostsResp []interface{}) []interface{} {
	rst := make([]interface{}, 0, len(hostsResp))
	for _, v := range hostsResp {
		rst = append(rst, map[string]interface{}{
			"host_id":            utils.PathSearch("host_id", v, nil),
			"host_name":          utils.PathSearch("host_name", v, nil),
			"host_ip":            utils.PathSearch("host_ip", v, nil),
			"severity_level":     utils.PathSearch("severity_level", v, nil),
			"agent_id":           utils.PathSearch("agent_id", v, nil),
			"version":            utils.PathSearch("version", v, nil),
			"cve_num":            utils.PathSearch("cve_num", v, nil),
			"cve_id_list":        utils.PathSearch("cve_id_list", v, nil),
			"status":             utils.PathSearch("status", v, nil),
			"repair_cmd":         utils.PathSearch("repair_cmd", v, nil),
			"app_path":           utils.PathSearch("app_path", v, nil),
			"region_name":        utils.PathSearch("region_name", v, nil),
			"public_ip":          utils.PathSearch("public_ip", v, nil),
			"private_ip":         utils.PathSearch("private_ip", v, nil),
			"group_id":           utils.PathSearch("group_id", v, nil),
			"group_name":         utils.PathSearch("group_name", v, nil),
			"os_type":            utils.PathSearch("os_type", v, nil),
			"asset_value":        utils.PathSearch("asset_value", v, nil),
			"is_affect_business": utils.PathSearch("is_affect_business", v, nil),
			"first_scan_time":    utils.PathSearch("first_scan_time", v, nil),
			"scan_time":          utils.PathSearch("scan_time", v, nil),
			"support_restore":    utils.PathSearch("support_restore", v, nil),
			"disabled_operate_types": flattenDisabledOperateTypes(
				utils.PathSearch("disabled_operate_types", v, make([]interface{}, 0)).([]interface{})),
			"repair_priority": utils.PathSearch("repair_priority", v, nil),
		})
	}

	return rst
}

func flattenDisabledOperateTypes(disabledOperateTypes []interface{}) []interface{} {
	rst := make([]interface{}, 0, len(disabledOperateTypes))
	for _, v := range disabledOperateTypes {
		rst = append(rst, map[string]interface{}{
			"operate_type": utils.PathSearch("operate_type", v, nil),
			"reason":       utils.PathSearch("reason", v, nil),
		})
	}

	return rst
}
