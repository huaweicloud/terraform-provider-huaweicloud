package hss

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/chnsz/golangsdk"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

// @API HSS GET /v5/{project_id}/vulnerability/handle-history
func DataSourceVulnerabilityHandleHistory() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVulnerabilityHandleHistoryRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"vul_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"vul_type": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"status": {
				Type:     schema.TypeList,
				Optional: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
			"asset_value": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"group_name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"host_name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"host_ip": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"cluster_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"public_ip": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"private_ip": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"enterprise_project_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"sort_key": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"sort_dir": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"data_list": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"user_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"type": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"host_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"host_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"public_ip": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"private_ip": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"handle_time": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"status": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"failed_reason": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"description": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"vul_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"vul_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"asset_value": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"cve_list": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"cve_id": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"cvss": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"vul_id": {
										Type:     schema.TypeString,
										Computed: true,
									},
								},
							},
						},
						"app_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"app_path": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"app_version": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"handle_type": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"cluster_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"container_name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"container_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
		},
	}
}

func buildVulnerabilityHandleHistoryQueryParams(d *schema.ResourceData, epsId string) string {
	queryParams := "?limit=200"
	vulStatus := d.Get("status").([]interface{})

	if v, ok := d.GetOk("vul_id"); ok {
		queryParams = fmt.Sprintf("%s&vul_id=%v", queryParams, v)
	}
	if v, ok := d.GetOk("vul_type"); ok {
		queryParams = fmt.Sprintf("%s&vul_type=%v", queryParams, v)
	}
	if len(vulStatus) > 0 {
		for _, v := range vulStatus {
			queryParams = fmt.Sprintf("%s&status=%v", queryParams, v)
		}
	}
	if v, ok := d.GetOk("asset_value"); ok {
		queryParams = fmt.Sprintf("%s&asset_value=%v", queryParams, v)
	}
	if v, ok := d.GetOk("group_name"); ok {
		queryParams = fmt.Sprintf("%s&group_name=%v", queryParams, v)
	}
	if v, ok := d.GetOk("host_name"); ok {
		queryParams = fmt.Sprintf("%s&host_name=%v", queryParams, v)
	}
	if v, ok := d.GetOk("host_ip"); ok {
		queryParams = fmt.Sprintf("%s&host_ip=%v", queryParams, v)
	}
	if v, ok := d.GetOk("cluster_id"); ok {
		queryParams = fmt.Sprintf("%s&cluster_id=%v", queryParams, v)
	}
	if v, ok := d.GetOk("public_ip"); ok {
		queryParams = fmt.Sprintf("%s&public_ip=%v", queryParams, v)
	}
	if v, ok := d.GetOk("private_ip"); ok {
		queryParams = fmt.Sprintf("%s&private_ip=%v", queryParams, v)
	}
	if epsId != "" {
		queryParams = fmt.Sprintf("%s&enterprise_project_id=%v", queryParams, epsId)
	}
	if v, ok := d.GetOk("sort_key"); ok {
		queryParams = fmt.Sprintf("%s&sort_key=%v", queryParams, v)
	}
	if v, ok := d.GetOk("sort_dir"); ok {
		queryParams = fmt.Sprintf("%s&sort_dir=%v", queryParams, v)
	}

	return queryParams
}

func dataSourceVulnerabilityHandleHistoryRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	var (
		cfg     = meta.(*config.Config)
		region  = cfg.GetRegion(d)
		epsId   = cfg.GetEnterpriseProjectID(d)
		httpUrl = "v5/{project_id}/vulnerability/handle-history"
	)

	client, err := cfg.NewServiceClient("hss", region)
	if err != nil {
		return diag.Errorf("error creating HSS client: %s", err)
	}

	getPath := client.Endpoint + httpUrl
	getPath = strings.ReplaceAll(getPath, "{project_id}", client.ProjectID)
	getPath += buildVulnerabilityHandleHistoryQueryParams(d, epsId)

	getOpt := golangsdk.RequestOpts{
		KeepResponseBody: true,
	}

	getResp, err := client.Request("GET", getPath, &getOpt)
	if err != nil {
		return diag.Errorf("error retrieving handle history: %s", err)
	}

	getRespBody, err := utils.FlattenResponse(getResp)
	if err != nil {
		return diag.FromErr(err)
	}

	vulnerabilities := utils.PathSearch("data_list", getRespBody, make([]interface{}, 0)).([]interface{})

	generateUUID, err := uuid.GenerateUUID()
	if err != nil {
		return diag.Errorf("unable to generate ID: %s", err)
	}

	d.SetId(generateUUID)

	mErr := multierror.Append(nil,
		d.Set("region", region),
		d.Set("data_list", flattenVulnerabilityHandleHistory(vulnerabilities)),
	)

	return diag.FromErr(mErr.ErrorOrNil())
}

func flattenVulnerabilityHandleHistory(vulnerabilitiesResp []interface{}) []interface{} {
	rst := make([]interface{}, 0, len(vulnerabilitiesResp))
	for _, v := range vulnerabilitiesResp {
		rst = append(rst, map[string]interface{}{
			"id":             utils.PathSearch("id", v, nil),
			"user_name":      utils.PathSearch("user_name", v, nil),
			"type":           utils.PathSearch("type", v, nil),
			"host_id":        utils.PathSearch("host_id", v, nil),
			"host_name":      utils.PathSearch("host_name", v, nil),
			"public_ip":      utils.PathSearch("public_ip", v, nil),
			"private_ip":     utils.PathSearch("private_ip", v, nil),
			"handle_time":    utils.PathSearch("handle_time", v, nil),
			"status":         utils.PathSearch("status", v, nil),
			"failed_reason":  utils.PathSearch("failed_reason", v, nil),
			"description":    utils.PathSearch("description", v, nil),
			"vul_id":         utils.PathSearch("vul_id", v, nil),
			"vul_name":       utils.PathSearch("vul_name", v, nil),
			"asset_value":    utils.PathSearch("asset_value", v, nil),
			"cve_list":       flattenCveInfo(utils.PathSearch("cve_list", v, make([]interface{}, 0)).([]interface{})),
			"app_name":       utils.PathSearch("app_name", v, nil),
			"app_path":       utils.PathSearch("app_path", v, nil),
			"app_version":    utils.PathSearch("app_version", v, nil),
			"handle_type":    utils.PathSearch("handle_type", v, nil),
			"cluster_id":     utils.PathSearch("cluster_id", v, nil),
			"container_name": utils.PathSearch("container_name", v, nil),
			"container_id":   utils.PathSearch("container_id", v, nil),
		})
	}

	return rst
}

func flattenCveInfo(cveInfo []interface{}) []interface{} {
	rst := make([]interface{}, 0, len(cveInfo))
	for _, v := range cveInfo {
		rst = append(rst, map[string]interface{}{
			"cve_id": utils.PathSearch("cve_id", v, nil),
			"cvss":   utils.PathSearch("cvss", v, nil),
			"vul_id": utils.PathSearch("vul_id", v, nil),
		})
	}

	return rst
}
