// Generated by PMS #511
package gaussdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceGaussdbOpengaussSslCertDownloadLink() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussSslCertDownloadLinkRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the GaussDB OpenGauss instance.`,
			},
			"download_link": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the download address of the SSL certificate.`,
			},
		},
	}
}

type OpengaussSslCertDownloadLinkDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussSslCertDownloadLinkDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussSslCertDownloadLinkDSWrapper {
	return &OpengaussSslCertDownloadLinkDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussSslCertDownloadLinkRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussSslCertDownloadLinkDSWrapper(d, meta)
	shoSslCerDowLinRst, err := wrapper.ShowSslCertDownloadLink()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.showSslCertDownloadLinkToSchema(shoSslCerDowLinRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API GaussDB GET /v3/{project_id}/instances/{instance_id}/ssl-cert/download-link
func (w *OpengaussSslCertDownloadLinkDSWrapper) ShowSslCertDownloadLink() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/ssl-cert/download-link"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *OpengaussSslCertDownloadLinkDSWrapper) showSslCertDownloadLinkToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("download_link", body.Get("download_link").Value()),
	)
	return mErr.ErrorOrNil()
}
