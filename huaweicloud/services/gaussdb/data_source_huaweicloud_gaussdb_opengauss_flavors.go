// Generated by PMS #469
package gaussdb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbOpengaussFlavors() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussFlavorsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"version": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the version of the GaussDB OpenGauss.`,
			},
			"spec_code": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the specification code.`,
			},
			"ha_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the instance type.`,
			},
			"flavors": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of the flavors.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the DB engine.`,
						},
						"spec_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the specification code.`,
						},
						"version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the DB engine version supported by the specifications.`,
						},
						"group_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Performance specifications.`,
						},
						"vcpus": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the number of vCPUs.`,
						},
						"ram": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the memory size in GB.`,
						},
						"availability_zone": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the AZ supported by the specifications.`,
						},
						"az_status": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the key/value pairs of the availability zone status.`,
						},
					},
				},
			},
		},
	}
}

type OpengaussFlavorsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussFlavorsDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussFlavorsDSWrapper {
	return &OpengaussFlavorsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussFlavorsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussFlavorsDSWrapper(d, meta)
	listDbFlavorsRst, err := wrapper.ListDbFlavors()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listDbFlavorsToSchema(listDbFlavorsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3.1/{project_id}/flavors
func (w *OpengaussFlavorsDSWrapper) ListDbFlavors() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3.1/{project_id}/flavors"
	params := map[string]any{
		"version":   w.Get("version"),
		"spec_code": w.Get("spec_code"),
		"ha_mode":   w.Get("ha_mode"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("flavors", "offset", "limit", 0).
		Request().
		Result()
}

func (w *OpengaussFlavorsDSWrapper) listDbFlavorsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("flavors", schemas.SliceToList(body.Get("flavors"),
			func(flavors gjson.Result) any {
				return map[string]any{
					"name":              flavors.Get("name").Value(),
					"spec_code":         flavors.Get("spec_code").Value(),
					"version":           flavors.Get("version").Value(),
					"group_type":        flavors.Get("group_type").Value(),
					"vcpus":             flavors.Get("vcpus").Value(),
					"ram":               flavors.Get("ram").Value(),
					"availability_zone": schemas.SliceToStrList(flavors.Get("availability_zone")),
					"az_status":         schemas.MapToStrMap(flavors.Get("az_status")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
