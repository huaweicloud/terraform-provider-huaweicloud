// Generated by PMS #473
package gaussdb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceGaussdbOpengaussDatastores() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussDatastoresRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"datastores": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Specifies the  DB engines.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"supported_versions": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Specifies the engine versions supported by the deployment model.`,
						},
						"instance_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the deployment model.`,
						},
					},
				},
			},
		},
	}
}

type OpengaussDatastoresDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussDatastoresDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussDatastoresDSWrapper {
	return &OpengaussDatastoresDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussDatastoresRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussDatastoresDSWrapper(d, meta)
	lisGauDbDatRst, err := wrapper.ListGaussDbDatastores()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listGaussDbDatastoresToSchema(lisGauDbDatRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3/{project_id}/datastores
func (w *OpengaussDatastoresDSWrapper) ListGaussDbDatastores() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/datastores"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *OpengaussDatastoresDSWrapper) listGaussDbDatastoresToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("datastores", schemas.SliceToList(body.Get("datastores"),
			func(datastores gjson.Result) any {
				return map[string]any{
					"supported_versions": schemas.SliceToStrList(datastores.Get("supported_versions")),
					"instance_mode":      datastores.Get("instance_mode").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
