// Generated by PMS #537
package gaussdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbOpengaussErrorLogs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussErrorLogsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the GaussDB OpenGauss instance.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
			},
			"log_files": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the log files.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"file_link": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the link for downloading the log file.`,
						},
						"file_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the log file name.`,
						},
						"file_size": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the log file size in KB.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the log collection status.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the log start time.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the log end time.`,
						},
					},
				},
			},
		},
	}
}

type OpengaussErrorLogsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussErrorLogsDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussErrorLogsDSWrapper {
	return &OpengaussErrorLogsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussErrorLogsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussErrorLogsDSWrapper(d, meta)
	lisInsErrLogRst, err := wrapper.ListInstanceErrorLogs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listInstanceErrorLogsToSchema(lisInsErrLogRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3/{project_id}/instances/{instance_id}/error-log
func (w *OpengaussErrorLogsDSWrapper) ListInstanceErrorLogs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/error-log"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"start_time": w.Get("start_time"),
		"end_time":   w.Get("end_time"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("", "", "", 0).
		Request().
		Result()
}

func (w *OpengaussErrorLogsDSWrapper) listInstanceErrorLogsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("log_files", schemas.SliceToList(body.Get("log_files"),
			func(logFiles gjson.Result) any {
				return map[string]any{
					"file_link":  logFiles.Get("file_link").Value(),
					"file_name":  logFiles.Get("file_name").Value(),
					"file_size":  logFiles.Get("file_size").Value(),
					"status":     logFiles.Get("status").Value(),
					"start_time": logFiles.Get("start_time").Value(),
					"end_time":   logFiles.Get("end_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
