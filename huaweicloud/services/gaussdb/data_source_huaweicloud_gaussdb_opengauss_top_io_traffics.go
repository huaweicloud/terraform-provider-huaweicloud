// Generated by PMS #520
package gaussdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbOpengaussTopIoTraffics() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussTopIoTrafficsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the GaussDB OpenGauss instance ID.`,
			},
			"node_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the node ID.`,
			},
			"component_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the component ID.`,
			},
			"top_io_num": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the number of top I/O threads to be queried in the database process.`,
			},
			"sort_condition": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the top I/O sorting condition.`,
			},
			"top_io_infos": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the I/O information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"thread_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the thread ID.`,
						},
						"thread_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the thread type.`,
						},
						"disk_read_rate": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the rate of reading data from disks, in KB/s.`,
						},
						"disk_write_rate": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the rate of writing data to the disk, in KB/s.`,
						},
						"session_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the session ID.`,
						},
						"unique_sql_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the SQL ID.`,
						},
						"database_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the database name.`,
						},
						"client_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the IP address of the client.`,
						},
						"user_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the username.`,
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status.`,
						},
						"sql_start": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the start time of the statement.`,
						},
					},
				},
			},
		},
	}
}

type OpengaussTopIoTrafficsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussTopIoTrafficsDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussTopIoTrafficsDSWrapper {
	return &OpengaussTopIoTrafficsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussTopIoTrafficsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussTopIoTrafficsDSWrapper(d, meta)
	listTopIoTrafficsRst, err := wrapper.ListTopIoTraffics()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listTopIoTrafficsToSchema(listTopIoTrafficsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3/{project_id}/instances/{instance_id}/top-io-traffics
func (w *OpengaussTopIoTrafficsDSWrapper) ListTopIoTraffics() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/top-io-traffics"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"node_id":        w.Get("node_id"),
		"component_id":   w.Get("component_id"),
		"top_io_num":     w.Get("top_io_num"),
		"sort_condition": w.Get("sort_condition"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *OpengaussTopIoTrafficsDSWrapper) listTopIoTrafficsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("top_io_infos", schemas.SliceToList(body.Get("top_io_infos"),
			func(topIoInfos gjson.Result) any {
				return map[string]any{
					"thread_id":       topIoInfos.Get("thread_id").Value(),
					"thread_type":     topIoInfos.Get("thread_type").Value(),
					"disk_read_rate":  topIoInfos.Get("disk_read_rate").Value(),
					"disk_write_rate": topIoInfos.Get("disk_write_rate").Value(),
					"session_id":      topIoInfos.Get("session_id").Value(),
					"unique_sql_id":   topIoInfos.Get("unique_sql_id").Value(),
					"database_name":   topIoInfos.Get("database_name").Value(),
					"client_ip":       topIoInfos.Get("client_ip").Value(),
					"user_name":       topIoInfos.Get("user_name").Value(),
					"state":           topIoInfos.Get("state").Value(),
					"sql_start":       topIoInfos.Get("sql_start").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
