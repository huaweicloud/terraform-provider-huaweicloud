// Generated by PMS #355
package gaussdb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceGaussdbMysqlRecyclingInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbMysqlRecyclingInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instances": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the instances in the recycle bin.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance name.`,
						},
						"ha_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance type.`,
						},
						"engine_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the engine name.`,
						},
						"engine_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the engine version.`,
						},
						"pay_model": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the billing mode.`,
						},
						"create_at": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the creation time.`,
						},
						"deleted_at": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the deletion time.`,
						},
						"volume_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the storage type.`,
						},
						"volume_size": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the storage space.`,
						},
						"data_vip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the virtual IP address of the data plane.`,
						},
						"data_vip_ipv6": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the IPv6 address of the data plane.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
						"enterprise_project_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project name.`,
						},
						"backup_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup level.`,
						},
						"recycle_backup_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup ID.`,
						},
						"recycle_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the recycling status.`,
						},
					},
				},
			},
		},
	}
}

type MysqlRecyclingInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMysqlRecyclingInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *MysqlRecyclingInstancesDSWrapper {
	return &MysqlRecyclingInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbMysqlRecyclingInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMysqlRecyclingInstancesDSWrapper(d, meta)
	lisRecInsRst, err := wrapper.ListRecycleInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listRecycleInstancesToSchema(lisRecInsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDBforMySQL GET /v3/{project_id}/instances/recycle-info
func (w *MysqlRecyclingInstancesDSWrapper) ListRecycleInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "gaussdb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/recycle-info"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("instances", "offset", "limit", 0).
		Request().
		Result()
}

func (w *MysqlRecyclingInstancesDSWrapper) listRecycleInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("instances", schemas.SliceToList(body.Get("instances"),
			func(instances gjson.Result) any {
				return map[string]any{
					"id":                      instances.Get("id").Value(),
					"name":                    instances.Get("name").Value(),
					"ha_mode":                 instances.Get("ha_mode").Value(),
					"engine_name":             instances.Get("engine_name").Value(),
					"engine_version":          instances.Get("engine_version").Value(),
					"pay_model":               instances.Get("pay_model").Value(),
					"create_at":               instances.Get("create_at").Value(),
					"deleted_at":              instances.Get("deleted_at").Value(),
					"volume_type":             instances.Get("volume_type").Value(),
					"volume_size":             instances.Get("volume_size").Value(),
					"data_vip":                instances.Get("data_vip").Value(),
					"data_vip_ipv6":           instances.Get("data_vip_ipv6").Value(),
					"enterprise_project_id":   instances.Get("enterprise_project_id").Value(),
					"enterprise_project_name": instances.Get("enterprise_project_name").Value(),
					"backup_level":            instances.Get("backup_level").Value(),
					"recycle_backup_id":       instances.Get("recycle_backup_id").Value(),
					"recycle_status":          instances.Get("recycle_status").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
