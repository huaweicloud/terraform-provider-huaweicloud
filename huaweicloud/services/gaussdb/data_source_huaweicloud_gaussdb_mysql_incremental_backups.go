// Generated by PMS #357
package gaussdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbMysqlIncrementalBackups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbMysqlIncrementalBackupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"begin_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the query start time.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the query end time.`,
			},
			"backups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of incremental backups.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup name.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"begin_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
						},
						"size": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Indicates the backup size, in KB.`,
						},
					},
				},
			},
		},
	}
}

type MysqlIncrementalBackupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMysqlIncrementalBackupsDSWrapper(d *schema.ResourceData, meta interface{}) *MysqlIncrementalBackupsDSWrapper {
	return &MysqlIncrementalBackupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbMysqlIncrementalBackupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMysqlIncrementalBackupsDSWrapper(d, meta)
	sgmsiblr, err := wrapper.ShowGaussMySqlIncrementalBackupList()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showGaussMySqlIncrementalBackupListToSchema(sgmsiblr)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDBforMySQL GET /v3/{project_id}/instances/{instance_id}/incremental-backups
func (w *MysqlIncrementalBackupsDSWrapper) ShowGaussMySqlIncrementalBackupList() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "gaussdb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/incremental-backups"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"begin_time": w.Get("begin_time"),
		"end_time":   w.Get("end_time"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("backups", "offset", "limit", 0).
		Request().
		Result()
}

func (w *MysqlIncrementalBackupsDSWrapper) showGaussMySqlIncrementalBackupListToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("backups", schemas.SliceToList(body.Get("backups"),
			func(backups gjson.Result) any {
				return map[string]any{
					"id":          backups.Get("id").Value(),
					"name":        backups.Get("name").Value(),
					"instance_id": backups.Get("instance_id").Value(),
					"begin_time":  backups.Get("begin_time").Value(),
					"end_time":    backups.Get("end_time").Value(),
					"size":        backups.Get("size").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
