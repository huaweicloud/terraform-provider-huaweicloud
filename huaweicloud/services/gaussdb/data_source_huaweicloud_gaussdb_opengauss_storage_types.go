// Generated by PMS #500
package gaussdb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbOpengaussStorageTypes() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussStorageTypesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"version": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the DB version number.`,
			},
			"ha_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the instance type.`,
			},
			"storage_type": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the storage type information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the storage type.`,
						},
						"az_status": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the status details of the AZs to which the specification belongs.`,
						},
						"support_compute_group_type": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the performance specifications.`,
						},
					},
				},
			},
		},
	}
}

type OpengaussStorageTypesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussStorageTypesDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussStorageTypesDSWrapper {
	return &OpengaussStorageTypesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussStorageTypesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussStorageTypesDSWrapper(d, meta)
	listStorageTypesRst, err := wrapper.ListStorageTypes()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listStorageTypesToSchema(listStorageTypesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3/{project_id}/storage-type
func (w *OpengaussStorageTypesDSWrapper) ListStorageTypes() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/storage-type"
	params := map[string]any{
		"version": w.Get("version"),
		"ha_mode": w.Get("ha_mode"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *OpengaussStorageTypesDSWrapper) listStorageTypesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("storage_type", schemas.SliceToList(body.Get("storage_type"),
			func(storageType gjson.Result) any {
				return map[string]any{
					"name":                       storageType.Get("name").Value(),
					"az_status":                  schemas.MapToStrMap(storageType.Get("az_status")),
					"support_compute_group_type": schemas.SliceToStrList(storageType.Get("support_compute_group_type")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
