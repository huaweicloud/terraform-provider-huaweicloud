// Generated by PMS #467
package gaussdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbOpengaussInstanceNodes() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussInstanceNodesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"component_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the component type.`,
			},
			"availability_zone_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the AZ where the primary component is located.`,
			},
			"nodes": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of nodes.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node status.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node description.`,
						},
						"availability_zone_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the code of the AZ where the node is.`,
						},
						"components": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the list of components.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the component ID.`,
									},
									"role": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the node type.`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the component status.`,
									},
									"distributed_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the Group ID, which is used to identify whether DNs are in the same shard.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the node type.`,
									},
									"detail": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the node details.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type OpengaussInstanceNodesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussInstanceNodesDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussInstanceNodesDSWrapper {
	return &OpengaussInstanceNodesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussInstanceNodesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussInstanceNodesDSWrapper(d, meta)
	lisComInfRst, err := wrapper.ListComponentInfos()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listComponentInfosToSchema(lisComInfRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GAUSSDBFOROPENGAUSS GET /v3/{project_id}/instances/{instance_id}/components
func (w *OpengaussInstanceNodesDSWrapper) ListComponentInfos() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/components"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"component_type":       w.Get("component_type"),
		"availability_zone_id": w.Get("availability_zone_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("nodes", "offset", "limit", 0).
		Request().
		Result()
}

func (w *OpengaussInstanceNodesDSWrapper) listComponentInfosToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("nodes", schemas.SliceToList(body.Get("nodes"),
			func(nodes gjson.Result) any {
				return map[string]any{
					"id":                   nodes.Get("id").Value(),
					"name":                 nodes.Get("name").Value(),
					"status":               nodes.Get("status").Value(),
					"description":          nodes.Get("description").Value(),
					"availability_zone_id": nodes.Get("availability_zone_id").Value(),
					"components": schemas.SliceToList(nodes.Get("components"),
						func(components gjson.Result) any {
							return map[string]any{
								"id":             components.Get("id").Value(),
								"role":           components.Get("role").Value(),
								"status":         components.Get("status").Value(),
								"distributed_id": components.Get("distributed_id").Value(),
								"type":           components.Get("type").Value(),
								"detail":         components.Get("detail").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
