// Generated by PMS #529
package gaussdb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbOpengaussQuotas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussQuotasRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"eps_quotas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of enterprise project quota.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
						"enterprise_project_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project name.`,
						},
						"instance_eps_quota": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the instance quantity quota.`,
						},
						"vcpus_eps_quota": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the vCPU quota.`,
						},
						"ram_eps_quota": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the memory quota in GB.`,
						},
						"volume_eps_quota": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the storage quota in GB.`,
						},
						"instance_used": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the used EPS instance quota.`,
						},
						"vcpus_used": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the used EPS compute quota.`,
						},
						"ram_used": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the used EPS memory quota in GB.`,
						},
						"volume_used": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the used EPS storage quota, in GB.`,
						},
					},
				},
			},
		},
	}
}

type OpengaussQuotasDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussQuotasDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussQuotasDSWrapper {
	return &OpengaussQuotasDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussQuotasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussQuotasDSWrapper(d, meta)
	listEpsQuotasRst, err := wrapper.ListEpsQuotas()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listEpsQuotasToSchema(listEpsQuotasRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3/{project_id}/enterprise-projects/quotas
func (w *OpengaussQuotasDSWrapper) ListEpsQuotas() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/enterprise-projects/quotas"
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("eps_quotas", "offset", "limit", 0).
		Request().
		Result()
}

func (w *OpengaussQuotasDSWrapper) listEpsQuotasToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("eps_quotas", schemas.SliceToList(body.Get("eps_quotas"),
			func(epsQuotas gjson.Result) any {
				return map[string]any{
					"enterprise_project_id":   epsQuotas.Get("enterprise_project_id").Value(),
					"enterprise_project_name": epsQuotas.Get("enterprise_project_name").Value(),
					"instance_eps_quota":      epsQuotas.Get("instance_eps_quota").Value(),
					"vcpus_eps_quota":         epsQuotas.Get("vcpus_eps_quota").Value(),
					"ram_eps_quota":           epsQuotas.Get("ram_eps_quota").Value(),
					"volume_eps_quota":        epsQuotas.Get("volume_eps_quota").Value(),
					"instance_used":           epsQuotas.Get("instance_used").Value(),
					"vcpus_used":              epsQuotas.Get("vcpus_used").Value(),
					"ram_used":                epsQuotas.Get("ram_used").Value(),
					"volume_used":             epsQuotas.Get("volume_used").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
