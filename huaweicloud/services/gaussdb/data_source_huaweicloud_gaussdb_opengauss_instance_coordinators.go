// Generated by PMS #499
package gaussdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceGaussdbOpengaussInstanceCoordinators() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussInstanceCoordinatorsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the GaussDB OpenGauss instance.`,
			},
			"max_reduction_num": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the maximum number of nodes that can be deleted at a time.`,
			},
			"nodes": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the node information list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the node status.`,
						},
						"availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the availability zone.`,
						},
						"support_reduce": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the node can be deleted.`,
						},
					},
				},
			},
		},
	}
}

type OpengaussInstanceCoordinatorsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussInstanceCoordinatorsDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussInstanceCoordinatorsDSWrapper {
	return &OpengaussInstanceCoordinatorsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussInstanceCoordinatorsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussInstanceCoordinatorsDSWrapper(d, meta)
	lisCnInfBefRedRst, err := wrapper.ListCnInfosBeforeReduce()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCnInfosBeforeReduceToSchema(lisCnInfBefRedRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3/{project_id}/instances/{instance_id}/coordinators
func (w *OpengaussInstanceCoordinatorsDSWrapper) ListCnInfosBeforeReduce() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/coordinators"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *OpengaussInstanceCoordinatorsDSWrapper) listCnInfosBeforeReduceToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("max_reduction_num", body.Get("max_reduction_num").Value()),
		d.Set("nodes", schemas.SliceToList(body.Get("nodes"),
			func(nodes gjson.Result) any {
				return map[string]any{
					"id":                nodes.Get("id").Value(),
					"name":              nodes.Get("name").Value(),
					"status":            nodes.Get("status").Value(),
					"availability_zone": nodes.Get("availability_zone").Value(),
					"support_reduce":    nodes.Get("support_reduce").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
