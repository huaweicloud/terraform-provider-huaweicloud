// Generated by PMS #358
package gaussdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceGaussdbMysqlAutoScalingRecords() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbMysqlAutoScalingRecordsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"records": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of records for auto scaling.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the record ID.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance name.`,
						},
						"scaling_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the scaling type.`,
						},
						"original_value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the original value.`,
						},
						"target_value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the target value.`,
						},
						"result": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the scaling result.`,
						},
						"create_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the scaling time.`,
						},
					},
				},
			},
		},
	}
}

type MysqlAutoScalingRecordsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMysqlAutoScalingRecordsDSWrapper(d *schema.ResourceData, meta interface{}) *MysqlAutoScalingRecordsDSWrapper {
	return &MysqlAutoScalingRecordsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbMysqlAutoScalingRecordsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMysqlAutoScalingRecordsDSWrapper(d, meta)
	shoAutScaHisRst, err := wrapper.ShowAutoScalingHistory()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showAutoScalingHistoryToSchema(shoAutScaHisRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GAUSSDB GET /v3/{project_id}/instances/{instance_id}/auto-scaling/history
func (w *MysqlAutoScalingRecordsDSWrapper) ShowAutoScalingHistory() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "gaussdb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/auto-scaling/history"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("records", "offset", "limit", 0).
		Request().
		Result()
}

func (w *MysqlAutoScalingRecordsDSWrapper) showAutoScalingHistoryToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("records", schemas.SliceToList(body.Get("records"),
			func(records gjson.Result) any {
				return map[string]any{
					"id":             records.Get("id").Value(),
					"instance_id":    records.Get("instance_id").Value(),
					"instance_name":  records.Get("instance_name").Value(),
					"scaling_type":   records.Get("scaling_type").Value(),
					"original_value": records.Get("original_value").Value(),
					"target_value":   records.Get("target_value").Value(),
					"result":         records.Get("result").Value(),
					"create_at":      records.Get("create_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
