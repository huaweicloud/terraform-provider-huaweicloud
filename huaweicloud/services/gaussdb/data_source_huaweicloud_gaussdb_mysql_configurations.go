// Generated by PMS #326
package gaussdb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceGaussdbMysqlConfigurations() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbMysqlConfigurationsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"configurations": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of parameter templates.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the parameter template.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the  name of the parameter template.`,
						},
						"user_defined": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the parameter template is a custom template.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description of parameter template.`,
						},
						"datastore_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the engine name.`,
						},
						"datastore_version_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the engine version.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time in the **yyyy-MM-ddTHH:mm:ssZ** format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time in the **yyyy-MM-ddTHH:mm:ssZ** format.`,
						},
					},
				},
			},
		},
	}
}

type MysqlConfigurationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMysqlConfigurationsDSWrapper(d *schema.ResourceData, meta interface{}) *MysqlConfigurationsDSWrapper {
	return &MysqlConfigurationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbMysqlConfigurationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMysqlConfigurationsDSWrapper(d, meta)
	lisGauMySqlConRst, err := wrapper.ListGaussMySqlConfigurations()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listGaussMySqlConfigurationsToSchema(lisGauMySqlConRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDBforMySQL GET /v3/{project_id}/configurations
func (w *MysqlConfigurationsDSWrapper) ListGaussMySqlConfigurations() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "gaussdb")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/configurations"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("configurations", "offset", "limit", 0).
		Request().
		Result()
}

func (w *MysqlConfigurationsDSWrapper) listGaussMySqlConfigurationsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("configurations", schemas.SliceToList(body.Get("configurations"),
			func(configurations gjson.Result) any {
				return map[string]any{
					"id":                     configurations.Get("id").Value(),
					"name":                   configurations.Get("name").Value(),
					"user_defined":           configurations.Get("user_defined").Value(),
					"description":            configurations.Get("description").Value(),
					"datastore_name":         configurations.Get("datastore_name").Value(),
					"datastore_version_name": configurations.Get("datastore_version_name").Value(),
					"created_at":             configurations.Get("created").Value(),
					"updated_at":             configurations.Get("updated").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
