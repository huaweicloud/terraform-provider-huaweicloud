// Generated by PMS #546
package gaussdb

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbOpengaussSqlThrottlingTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussSqlThrottlingTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the GaussDB OpenGauss instance.`,
			},
			"task_scope": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the throttling task scope.`,
			},
			"limit_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the throttling type.`,
			},
			"limit_type_value": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the throttling type value. Fuzzy match is supported.`,
			},
			"task_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the throttling task name. Fuzzy match is supported.`,
			},
			"sql_model": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the SQL template. Fuzzy match is supported.`,
			},
			"rule_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the rule name.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the start time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the end time of the throttling task in the format of **yyy-mm-ddThh:mm:ss+0000**.`,
			},
			"limit_task_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of throttling tasks.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"task_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the throttling task ID.`,
						},
						"task_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the throttling task name.`,
						},
						"task_scope": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the throttling task scope.`,
						},
						"limit_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the throttling task type.`,
						},
						"limit_type_value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the throttling task type value.`,
						},
						"sql_model": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the SQL template.`,
						},
						"key_words": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the keyword.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the throttling task status.`,
						},
						"rule_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the rule name.`,
						},
						"parallel_size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the maximum concurrency.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the start time of the throttling task in the format of **yyyy-mm-ddThh:mm:ssZ**.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the end time of the throttling task in the format of **yyyy-mm-ddThh:mm:ssZ**.`,
						},
						"cpu_utilization": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the CPU usage.`,
						},
						"memory_utilization": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the memory usage.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time in the format of **yyyy-mm-ddThh:mm:ssZ**.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time in the format of **yyyy-mm-ddThh:mm:ssZ**.`,
						},
						"creator": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creator.`,
						},
						"modifier": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the modifier.`,
						},
						"databases": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the databases of the instance.`,
						},
						"node_infos": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the CN information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"node_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the node ID.`,
									},
									"sql_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the SQL statement executed on the node.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type OpengaussSqlThrottlingTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussSqlThrottlingTasksDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussSqlThrottlingTasksDSWrapper {
	return &OpengaussSqlThrottlingTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussSqlThrottlingTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussSqlThrottlingTasksDSWrapper(d, meta)
	listLimitTaskRst, err := wrapper.ListLimitTask()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listLimitTaskToSchema(listLimitTaskRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3/{project_id}/instances/{instance_id}/limit-task-list
func (w *OpengaussSqlThrottlingTasksDSWrapper) ListLimitTask() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instances/{instance_id}/limit-task-list"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"task_scope":       w.Get("task_scope"),
		"limit_type":       w.Get("limit_type"),
		"limit_type_value": w.Get("limit_type_value"),
		"task_name":        w.Get("task_name"),
		"sql_model":        w.Get("sql_model"),
		"rule_name":        w.Get("rule_name"),
		"start_time":       w.Get("start_time"),
		"end_time":         w.Get("end_time"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("limit_task_list", "offset", "limit", 0).
		Request().
		Result()
}

func (w *OpengaussSqlThrottlingTasksDSWrapper) listLimitTaskToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("limit_task_list", schemas.SliceToList(body.Get("limit_task_list"),
			func(limitTaskList gjson.Result) any {
				return map[string]any{
					"instance_id":        limitTaskList.Get("instance_id").Value(),
					"task_id":            limitTaskList.Get("task_id").Value(),
					"task_name":          limitTaskList.Get("task_name").Value(),
					"task_scope":         limitTaskList.Get("task_scope").Value(),
					"limit_type":         limitTaskList.Get("limit_type").Value(),
					"limit_type_value":   limitTaskList.Get("limit_type_value").Value(),
					"sql_model":          limitTaskList.Get("sql_model").Value(),
					"key_words":          limitTaskList.Get("key_words").Value(),
					"status":             limitTaskList.Get("status").Value(),
					"rule_name":          limitTaskList.Get("rule_name").Value(),
					"parallel_size":      limitTaskList.Get("parallel_size").Value(),
					"start_time":         limitTaskList.Get("start_time").Value(),
					"end_time":           limitTaskList.Get("end_time").Value(),
					"cpu_utilization":    limitTaskList.Get("cpu_utilization").Value(),
					"memory_utilization": limitTaskList.Get("memory_utilization").Value(),
					"created_at":         limitTaskList.Get("created").Value(),
					"updated_at":         limitTaskList.Get("updated").Value(),
					"creator":            limitTaskList.Get("creator").Value(),
					"modifier":           limitTaskList.Get("modifier").Value(),
					"databases":          limitTaskList.Get("databases").Value(),
					"node_infos": schemas.SliceToList(limitTaskList.Get("node_infos"),
						func(nodeInfos gjson.Result) any {
							return map[string]any{
								"node_id": nodeInfos.Get("node_id").Value(),
								"sql_id":  nodeInfos.Get("sql_id").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
