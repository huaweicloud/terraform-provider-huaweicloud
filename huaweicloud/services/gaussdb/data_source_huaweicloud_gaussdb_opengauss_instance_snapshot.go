// Generated by PMS #544
package gaussdb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceGaussdbOpengaussInstanceSnapshot() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussInstanceSnapshotRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the original instance ID.`,
			},
			"restore_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the instance information at a time point.`,
			},
			"backup_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the backup ID.`,
			},
			"cluster_mode": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the instance deployment model.`,
			},
			"instance_mode": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the instance model.`,
			},
			"data_volume_size": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the storage space, in GB`,
			},
			"solution": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the solution template type.`,
			},
			"node_num": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of nodes.`,
			},
			"coordinator_num": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of CNs.`,
			},
			"sharding_num": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of shards.`,
			},
			"replica_num": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the number of replicas.`,
			},
			"engine_version": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the engine version.`,
			},
		},
	}
}

type OpengaussInstanceSnapshotDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussInstanceSnapshotDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussInstanceSnapshotDSWrapper {
	return &OpengaussInstanceSnapshotDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussInstanceSnapshotRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussInstanceSnapshotDSWrapper(d, meta)
	shoInsSnaRst, err := wrapper.ShowInstanceSnapshot()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showInstanceSnapshotToSchema(shoInsSnaRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3/{project_id}/instance-snapshot
func (w *OpengaussInstanceSnapshotDSWrapper) ShowInstanceSnapshot() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/instance-snapshot"
	params := map[string]any{
		"instance_id":  w.Get("instance_id"),
		"restore_time": w.Get("restore_time"),
		"backup_id":    w.Get("backup_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *OpengaussInstanceSnapshotDSWrapper) showInstanceSnapshotToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("cluster_mode", body.Get("cluster_mode").Value()),
		d.Set("instance_mode", body.Get("instance_mode").Value()),
		d.Set("data_volume_size", body.Get("data_volume_size").Value()),
		d.Set("solution", body.Get("solution").Value()),
		d.Set("node_num", body.Get("node_num").Value()),
		d.Set("coordinator_num", body.Get("coordinator_num").Value()),
		d.Set("sharding_num", body.Get("sharding_num").Value()),
		d.Set("replica_num", body.Get("replica_num").Value()),
		d.Set("engine_version", body.Get("engine_version").Value()),
	)
	return mErr.ErrorOrNil()
}
