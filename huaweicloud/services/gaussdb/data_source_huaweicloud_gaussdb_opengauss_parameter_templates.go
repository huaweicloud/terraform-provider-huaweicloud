// Generated by PMS #477
package gaussdb

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceGaussdbOpengaussParameterTemplates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaussdbOpengaussParameterTemplatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"configurations": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the parameter template information`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the parameter template ID, which is the unique ID of a parameter template.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the parameter template name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the parameter template description.`,
						},
						"datastore_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the engine version.`,
						},
						"datastore_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the engine name.`,
						},
						"ha_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance type.`,
						},
						"user_defined": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the parameter template is a custom template.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time in the **yyyy-MM-dd HH:mm:ss** format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time in the **yyyy-MM-dd HH:mm:ss** format.`,
						},
					},
				},
			},
		},
	}
}

type OpengaussParameterTemplatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOpengaussParameterTemplatesDSWrapper(d *schema.ResourceData, meta interface{}) *OpengaussParameterTemplatesDSWrapper {
	return &OpengaussParameterTemplatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaussdbOpengaussParameterTemplatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOpengaussParameterTemplatesDSWrapper(d, meta)
	lisParGroTemRst, err := wrapper.ListParamGroupTemplates()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listParamGroupTemplatesToSchema(lisParGroTemRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GaussDB GET /v3.1/{project_id}/configurations
func (w *OpengaussParameterTemplatesDSWrapper) ListParamGroupTemplates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "opengauss")
	if err != nil {
		return nil, err
	}

	uri := "/v3.1/{project_id}/configurations"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("configurations", "offset", "limit", 0).
		Request().
		Result()
}

func (w *OpengaussParameterTemplatesDSWrapper) listParamGroupTemplatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("configurations", schemas.SliceToList(body.Get("configurations"),
			func(configurations gjson.Result) any {
				return map[string]any{
					"id":                configurations.Get("id").Value(),
					"name":              configurations.Get("name").Value(),
					"description":       configurations.Get("description").Value(),
					"datastore_version": configurations.Get("datastore_version").Value(),
					"datastore_name":    configurations.Get("datastore_name").Value(),
					"ha_mode":           configurations.Get("ha_mode").Value(),
					"user_defined":      configurations.Get("user_defined").Value(),
					"created_at":        configurations.Get("created").Value(),
					"updated_at":        configurations.Get("updated").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
