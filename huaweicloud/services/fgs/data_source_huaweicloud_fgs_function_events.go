// Generated by PMS #238
package fgs

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceFunctionEvents() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceFunctionEventsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `The region in which to query the resource.`,
			},
			"function_urn": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The function URN to which the events belong.`,
			},
			"events": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All events that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The event ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The event name.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the function event, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type FunctionEventsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newFunctionEventsDSWrapper(d *schema.ResourceData, meta interface{}) *FunctionEventsDSWrapper {
	return &FunctionEventsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceFunctionEventsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newFunctionEventsDSWrapper(d, meta)
	listEventsRst, err := wrapper.ListEvents()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listEventsToSchema(listEventsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API FUNCTIONGRAPH GET /v2/{project_id}/fgs/functions/{function_urn}/events
func (w *FunctionEventsDSWrapper) ListEvents() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "fgs")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/fgs/functions/{function_urn}/events"
	uri = strings.ReplaceAll(uri, "{function_urn}", w.Get("function_urn").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *FunctionEventsDSWrapper) listEventsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("events", schemas.SliceToList(body.Get("events"),
			func(events gjson.Result) any {
				return map[string]any{
					"id":         events.Get("id").Value(),
					"name":       events.Get("name").Value(),
					"updated_at": w.setEventsLastModified(events),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*FunctionEventsDSWrapper) setEventsLastModified(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(int64(data.Get("last_modified").Float()), false)
}
