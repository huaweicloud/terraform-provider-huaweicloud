// Generated by PMS #597
package eip

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEipVpcv3Eips() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEipVpcv3EipsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"type": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the type of the EIP.`,
			},
			"alias": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the alias of the EIP.`,
			},
			"alias_like": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fuzzy search based on alias.`,
			},
			"ip_version": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeInt},
				Description: `Specifies the IP version of the EIP.`,
			},
			"status": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the status of the EIP.`,
			},
			"description": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the description of the EIP.`,
			},
			"public_ip_address": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the public IP address of the EIP.`,
			},
			"public_ip_address_like": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fuzzy search based on public IP address.`,
			},
			"public_ipv6_address": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the public IP v6 address  of the EIP.`,
			},
			"public_ipv6_address_like": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fuzzy search based on public IP v6 address.`,
			},
			"publicip_pool_name": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the public IP pool name of the EIP.`,
			},
			"fields": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the display fields.`,
			},
			"sort_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sort key.`,
			},
			"sort_dir": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the sort direction.`,
			},
			"vnic_private_ip_address": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the private IP address of the EIP.`,
			},
			"vnic_private_ip_address_like": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fuzzy search based on private IP address`,
			},
			"vnic_device_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the device ID of vnic.`,
			},
			"vnic_device_owner": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the device owner of vnic.`,
			},
			"vnic_vpc_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the vpc ID of vnic.`,
			},
			"vnic_port_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the port ID of vnic.`,
			},
			"vnic_device_owner_prefixlike": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fuzzy search based on device owner prefixlike.`,
			},
			"vnic_instance_type": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the instance type of vnic.`,
			},
			"vnic_instance_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the instance ID of vnic.`,
			},
			"bandwidth_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the ID of bandwidth.`,
			},
			"bandwidth_name": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the name of bandwidth.`,
			},
			"bandwidth_name_like": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the fuzzy search based on bandwidth name.`,
			},
			"bandwidth_size": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeInt},
				Description: `Specifies the size of bandwidth.`,
			},
			"bandwidth_share_type": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the share type of the EIP.`,
			},
			"bandwidth_charge_mode": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the charge mode of the EIP.`,
			},
			"billing_info": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the billing info of the EIP.`,
			},
			"billing_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the billing mode of the EIP.`,
			},
			"associate_instance_type": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the associate instance type of the EIP.`,
			},
			"associate_instance_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the associate instance ID of the EIP.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the enterprise project ID of the EIP.`,
			},
			"public_border_group": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the public border group of the EIP.`,
			},
			"allow_share_bandwidth_type_any": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the shared bandwidth type of the EIP.`,
			},
			"publicips": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of EIPs.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the EIP.`,
						},
						"alias": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the EIP.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the EIP.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of the EIP.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID of the EIP.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description of the EIP.`,
						},
						"ip_version": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the IP version of the EIP.`,
						},
						"publicip_pool_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the public pool name of the EIP.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the project ID of the EIP.`,
						},
						"billing_info": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the order information of the EIP.`,
						},
						"vnic": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the port information when a public IP address is bound to a port instance.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"mac": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the port MAC address of the port instance.`,
									},
									"instance_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the type.`,
									},
									"vpc_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the VPC ID.`,
									},
									"port_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the port ID.`,
									},
									"device_owner": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the device owner.`,
									},
									"port_profile": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the port profile information.`,
									},
									"vtep": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the VTEP IP address.`,
									},
									"vni": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the VXLAN ID.`,
									},
									"instance_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the instance to which the port belongs.`,
									},
									"private_ip_address": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the private IP address.`,
									},
									"device_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the ID of the device to which the port belongs.`,
									},
								},
							},
						},
						"bandwidth": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the bandwidth bound to the public IP address.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the bandwidth size.`,
									},
									"share_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth share type.`,
									},
									"charge_mode": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the charging mode.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth name.`,
									},
									"billing_info": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bill information.`,
									},
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth ID.`,
									},
								},
							},
						},
						"publicip_pool_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the network to which the public IP address belongs.`,
						},
						"public_border_group": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resources at the central site or edge site.`,
						},
						"associate_instance_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of the instance bound to the public IP address.`,
						},
						"associate_instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the instance bound to the public IP address.`,
						},
						"lock_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the frozen status of the EIP.`,
						},
						"public_ip_address": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the EIP or IPv6 port address.`,
						},
						"public_ipv6_address": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the public IP v6 address of the EIP.`,
						},
						"tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the tags of the EIP.`,
						},
						"allow_share_bandwidth_types": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the list of shared bandwidth types that the public IP address can be added to.`,
						},
						"cascade_delete_by_instance": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the EIP can be deleted synchronously with the instance.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time.`,
						},
					},
				},
			},
		},
	}
}

type Vpcv3EipsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newVpcv3EipsDSWrapper(d *schema.ResourceData, meta interface{}) *Vpcv3EipsDSWrapper {
	return &Vpcv3EipsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEipVpcv3EipsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newVpcv3EipsDSWrapper(d, meta)
	listPublicipsRst, err := wrapper.ListPublicips()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPublicipsToSchema(listPublicipsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API EIP GET /v3/{project_id}/eip/publicips
func (w *Vpcv3EipsDSWrapper) ListPublicips() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/eip/publicips"
	params := map[string]any{
		"fields":                         w.ListToArray("fields"),
		"sort_key":                       w.Get("sort_key"),
		"sort_dir":                       w.Get("sort_dir"),
		"id":                             []string{w.Id()},
		"ip_version":                     w.ListToArray("ip_version"),
		"public_ip_address":              w.ListToArray("public_ip_address"),
		"public_ip_address_like":         w.Get("public_ip_address_like"),
		"public_ipv6_address":            w.ListToArray("public_ipv6_address"),
		"public_ipv6_address_like":       w.Get("public_ipv6_address_like"),
		"type":                           w.ListToArray("type"),
		"publicip_pool_name":             w.ListToArray("publicip_pool_name"),
		"status":                         w.ListToArray("status"),
		"alias_like":                     w.Get("alias_like"),
		"alias":                          w.ListToArray("alias"),
		"description":                    w.ListToArray("description"),
		"vnic.private_ip_address":        w.ListToArray("vnic_private_ip_address"),
		"vnic.private_ip_address_like":   w.Get("vnic_private_ip_address_like"),
		"vnic.device_id":                 w.ListToArray("vnic_device_id"),
		"vnic.device_owner":              w.ListToArray("vnic_device_owner"),
		"vnic.vpc_id":                    w.ListToArray("vnic_vpc_id"),
		"vnic.port_id":                   w.ListToArray("vnic_port_id"),
		"vnic.device_owner_prefixlike":   w.Get("vnic_device_owner_prefixlike"),
		"vnic.instance_type":             w.ListToArray("vnic_instance_type"),
		"vnic.instance_id":               w.ListToArray("vnic_instance_id"),
		"bandwidth.id":                   w.ListToArray("bandwidth_id"),
		"bandwidth.name":                 w.ListToArray("bandwidth_name"),
		"bandwidth.name_like":            w.ListToArray("bandwidth_name_like"),
		"bandwidth.size":                 w.ListToArray("bandwidth_size"),
		"bandwidth.share_type":           w.ListToArray("bandwidth_share_type"),
		"bandwidth.charge_mode":          w.ListToArray("bandwidth_charge_mode"),
		"billing_info":                   w.ListToArray("billing_info"),
		"billing_mode":                   w.Get("billing_mode"),
		"associate_instance_type":        w.ListToArray("associate_instance_type"),
		"associate_instance_id":          w.ListToArray("associate_instance_id"),
		"enterprise_project_id":          w.ListToArray("enterprise_project_id"),
		"public_border_group":            w.ListToArray("public_border_group"),
		"allow_share_bandwidth_type_any": w.ListToArray("allow_share_bandwidth_type_any"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("publicips", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *Vpcv3EipsDSWrapper) listPublicipsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("publicips", schemas.SliceToList(body.Get("publicips"),
			func(publicips gjson.Result) any {
				return map[string]any{
					"id":                    publicips.Get("id").Value(),
					"alias":                 publicips.Get("alias").Value(),
					"status":                publicips.Get("status").Value(),
					"type":                  publicips.Get("type").Value(),
					"enterprise_project_id": publicips.Get("enterprise_project_id").Value(),
					"description":           publicips.Get("description").Value(),
					"ip_version":            publicips.Get("ip_version").Value(),
					"publicip_pool_name":    publicips.Get("publicip_pool_name").Value(),
					"project_id":            publicips.Get("project_id").Value(),
					"billing_info":          publicips.Get("billing_info").Value(),
					"vnic": schemas.SliceToList(publicips.Get("vnic"),
						func(vnic gjson.Result) any {
							return map[string]any{
								"mac":                vnic.Get("mac").Value(),
								"instance_type":      vnic.Get("instance_type").Value(),
								"vpc_id":             vnic.Get("vpc_id").Value(),
								"port_id":            vnic.Get("port_id").Value(),
								"device_owner":       vnic.Get("device_owner").Value(),
								"port_profile":       vnic.Get("port_profile").Value(),
								"vtep":               vnic.Get("vtep").Value(),
								"vni":                vnic.Get("vni").Value(),
								"instance_id":        vnic.Get("instance_id").Value(),
								"private_ip_address": vnic.Get("private_ip_address").Value(),
								"device_id":          vnic.Get("device_id").Value(),
							}
						},
					),
					"bandwidth": schemas.SliceToList(publicips.Get("bandwidth"),
						func(bandwidth gjson.Result) any {
							return map[string]any{
								"size":         bandwidth.Get("size").Value(),
								"share_type":   bandwidth.Get("share_type").Value(),
								"charge_mode":  bandwidth.Get("charge_mode").Value(),
								"name":         bandwidth.Get("name").Value(),
								"billing_info": bandwidth.Get("billing_info").Value(),
								"id":           bandwidth.Get("id").Value(),
							}
						},
					),
					"publicip_pool_id":            publicips.Get("publicip_pool_id").Value(),
					"public_border_group":         publicips.Get("public_border_group").Value(),
					"associate_instance_type":     publicips.Get("associate_instance_type").Value(),
					"associate_instance_id":       publicips.Get("associate_instance_id").Value(),
					"lock_status":                 publicips.Get("lock_status").Value(),
					"public_ip_address":           publicips.Get("public_ip_address").Value(),
					"public_ipv6_address":         publicips.Get("public_ipv6_address").Value(),
					"tags":                        schemas.SliceToStrList(publicips.Get("tags")),
					"allow_share_bandwidth_types": schemas.SliceToStrList(publicips.Get("allow_share_bandwidth_types")),
					"cascade_delete_by_instance":  publicips.Get("cascade_delete_by_instance").Value(),
					"created_at":                  publicips.Get("created_at").Value(),
					"updated_at":                  publicips.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
