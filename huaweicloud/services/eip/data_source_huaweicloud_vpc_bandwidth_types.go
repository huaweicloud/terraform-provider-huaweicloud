// Generated by PMS #573
package eip

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceBandwidthTypes() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceBandwidthTypesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"bandwidth_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the bandwidth type.`,
			},
			"name_en": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the English description of the bandwidth type.`,
			},
			"name_zh": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the Chinese description of the bandwidth type.`,
			},
			"public_border_group": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the location of the bandwidth type.`,
			},
			"share_bandwidth_types": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the shared bandwidth types.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the supported bandwidth type.`,
						},
						"bandwidth_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the bandwidth type.`,
						},
						"name_en": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the English description of the bandwidth type.`,
						},
						"name_zh": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the Chinese description of the bandwidth type.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the description of the bandwidth type.`,
						},
						"public_border_group": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates whether the bandwidth type is at central site or edge site.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the create time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time.`,
						},
					},
				},
			},
		},
	}
}

type VpcBandwidthTypesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newVpcBandwidthTypesDSWrapper(d *schema.ResourceData, meta interface{}) *VpcBandwidthTypesDSWrapper {
	return &VpcBandwidthTypesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceBandwidthTypesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newVpcBandwidthTypesDSWrapper(d, meta)
	lisShaBanTypRst, err := wrapper.ListShareBandwidthTypes()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listShareBandwidthTypesToSchema(lisShaBanTypRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API EIP GET /v3/{project_id}/eip/share-bandwidth-types
func (w *VpcBandwidthTypesDSWrapper) ListShareBandwidthTypes() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpcv3")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/eip/share-bandwidth-types"
	params := map[string]any{
		"id":                  w.Id(),
		"bandwidth_type":      w.Get("bandwidth_type"),
		"name_en":             w.Get("name_en"),
		"name_zh":             w.Get("name_zh"),
		"public_border_group": w.Get("public_border_group"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("share_bandwidth_types", "offset", "limit", 0).
		Request().
		Result()
}

func (w *VpcBandwidthTypesDSWrapper) listShareBandwidthTypesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("share_bandwidth_types", schemas.SliceToList(body.Get("share_bandwidth_types"),
			func(shaBanTypes gjson.Result) any {
				return map[string]any{
					"id":                  shaBanTypes.Get("id").Value(),
					"bandwidth_type":      shaBanTypes.Get("bandwidth_type").Value(),
					"name_en":             shaBanTypes.Get("name_en").Value(),
					"name_zh":             shaBanTypes.Get("name_zh").Value(),
					"description":         shaBanTypes.Get("description").Value(),
					"public_border_group": shaBanTypes.Get("public_border_group").Value(),
					"created_at":          shaBanTypes.Get("created_at").Value(),
					"updated_at":          shaBanTypes.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
