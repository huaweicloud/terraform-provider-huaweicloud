// Generated by PMS #564
package eip

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceBandwidthAddonPackages() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceBandwidthAddonPackagesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"bandwidth_pkgs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the bandwidth packages list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the refueling package ID.`,
						},
						"resource_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the refueling package name.`,
						},
						"bandwidth_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the  ID of the original bandwidth bound to the add-on package.`,
						},
						"pkg_size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the size of the add-on packet.`,
						},
						"billing_info": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the information about an add-on package order.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource status of an add-on package.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the start time when an add-on package takes effect.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the end time when an add-on package takes effect.`,
						},
						"processed_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the resource creation time.`,
						},
					},
				},
			},
		},
	}
}

type VpcBandwidthAddonPackagesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newVpcBandwidthAddonPackagesDSWrapper(d *schema.ResourceData, meta interface{}) *VpcBandwidthAddonPackagesDSWrapper {
	return &VpcBandwidthAddonPackagesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceBandwidthAddonPackagesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newVpcBandwidthAddonPackagesDSWrapper(d, meta)
	listBandwidthPkgRst, err := wrapper.ListBandwidthPkg()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listBandwidthPkgToSchema(listBandwidthPkgRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API EIP GET /v2/{project_id}/bandwidthpkgs
func (w *VpcBandwidthAddonPackagesDSWrapper) ListBandwidthPkg() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpcv3")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/bandwidthpkgs"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("bandwidthpkgs", "offset", "limit", 0).
		Request().
		Result()
}

func (w *VpcBandwidthAddonPackagesDSWrapper) listBandwidthPkgToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("bandwidth_pkgs", schemas.SliceToList(body.Get("bandwidthpkgs"),
			func(bandwidthPkgs gjson.Result) any {
				return map[string]any{
					"resource_id":    bandwidthPkgs.Get("resourceId").Value(),
					"resource_name":  bandwidthPkgs.Get("resourceName").Value(),
					"bandwidth_id":   bandwidthPkgs.Get("bandwidthId").Value(),
					"pkg_size":       bandwidthPkgs.Get("pkgSize").Value(),
					"billing_info":   bandwidthPkgs.Get("billingInfo").Value(),
					"status":         bandwidthPkgs.Get("status").Value(),
					"start_time":     bandwidthPkgs.Get("startTime").Value(),
					"end_time":       bandwidthPkgs.Get("endTime").Value(),
					"processed_time": bandwidthPkgs.Get("processedTime").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
