// Generated by PMS #594
package eip

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEipVpcv3Bandwidths() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEipVpcv3BandwidthsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the bandwidth.`,
			},
			"name_like": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fuzzy query name.`,
			},
			"bandwidth_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the bandwidth.`,
			},
			"ingress_size": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud access size.`,
			},
			"admin_state": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the bandwidth.`,
			},
			"billing_info": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the charging information of the bandwidth.`,
			},
			"tags": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the tag of the bandwidth.`,
			},
			"enable_bandwidth_rules": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether bandwidth groups are enabled.`,
			},
			"rule_quota": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the rule value of the bandwidth.`,
			},
			"public_border_group": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the border group of the bandwidth.`,
			},
			"charge_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the charging of the bandwidth.`,
			},
			"size": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the size of the bandwidth.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the bandwidth.`,
			},
			"fields": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the display fields of the bandwidth.`,
			},
			"eip_bandwidths": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of bandwidths.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the bandwidth.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the bBandwidth name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the bandwidth type.`,
						},
						"size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the bandwidth size.`,
						},
						"publicip_info": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the EIP information corresponding to the bandwidth.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"publicip_address": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the elastic public IPv4 or IPv6 address.`,
									},
									"publicip_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the unique IPv4 or IPv6 address of the elastic public network.`,
									},
									"publicip_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the EIP type.`,
									},
									"publicipv6_address": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the IPv6 address.`,
									},
									"ip_version": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the IP version information.`,
									},
								},
							},
						},
						"billing_info": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the Bill information.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the project to which the user belongs.`,
						},
						"admin_state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the bandwidth status.`,
						},
						"tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Indicates the EIP tags.`,
						},
						"enable_bandwidth_rules": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether bandwidth groups are enabled.`,
						},
						"bandwidth_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the bandwidth type.`,
						},
						"ingress_size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the network access size, in Mbit/s.`,
						},
						"rule_quota": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the rule value.`,
						},
						"ratio_95peak_plus": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the minimum bandwidth guarantee rate of enhanced 95.`,
						},
						"public_border_group": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the bandwidth AZ attribute, which indicates the center and edge.`,
						},
						"bandwidth_rules": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the bandwidth rules.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth rule ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the bandwidth rule name.`,
									},
									"egress_size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the maximum outbound bandwidth, in Mbit/s.`,
									},
									"egress_guarented_size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Indicates the guaranteed outbound bandwidth, in Mbit/s.`,
									},
									"publicip_info": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Indicates the EIP information corresponding to the bandwidth.`,
										Elem:        eipBanBanRulPubInfoElem(),
									},
								},
							},
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time, which is a UTC time in **YYYY-MM-DDTHH:MM:SS** format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the update time, which is a UTC time in **YYYY-MM-DDTHH:MM:SS** format.`,
						},
					},
				},
			},
		},
	}
}

// eipBanBanRulPubInfoElem
// The Elem of "eip_bandwidths.bandwidth_rules.publicip_info"
func eipBanBanRulPubInfoElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"publicip_address": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the elastic public IPv4 or IPv6 address.`,
			},
			"publicip_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the unique IPv4 or IPv6 address of the elastic public network corresponding to the bandwidth.`,
			},
			"publicip_type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the EIP type.`,
			},
			"publicipv6_address": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Indicates the IPv6 address.`,
			},
			"ip_version": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Indicates the IP version information.`,
			},
		},
	}
}

type Vpcv3BandwidthsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newVpcv3BandwidthsDSWrapper(d *schema.ResourceData, meta interface{}) *Vpcv3BandwidthsDSWrapper {
	return &Vpcv3BandwidthsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEipVpcv3BandwidthsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newVpcv3BandwidthsDSWrapper(d, meta)
	listBandwidthRst, err := wrapper.ListBandwidth()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listBandwidthToSchema(listBandwidthRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API EIP GET /v3/{project_id}/eip/bandwidths
func (w *Vpcv3BandwidthsDSWrapper) ListBandwidth() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/eip/bandwidths"
	params := map[string]any{
		"id":                     w.Id(),
		"fields":                 w.ListToArray("fields"),
		"bandwidth_type":         w.Get("bandwidth_type"),
		"name":                   w.Get("name"),
		"name_like":              w.Get("name_like"),
		"ingress_size":           w.Get("ingress_size"),
		"admin_state":            w.Get("admin_state"),
		"billing_info":           w.Get("billing_info"),
		"tags":                   w.Get("tags"),
		"enable_bandwidth_rules": w.Get("enable_bandwidth_rules"),
		"rule_quota":             w.Get("rule_quota"),
		"public_border_group":    w.Get("public_border_group"),
		"charge_mode":            w.Get("charge_mode"),
		"size":                   w.Get("size"),
		"type":                   w.Get("type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("eip_bandwidths", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *Vpcv3BandwidthsDSWrapper) listBandwidthToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("eip_bandwidths", schemas.SliceToList(body.Get("eip_bandwidths"),
			func(eipBandwidths gjson.Result) any {
				return map[string]any{
					"id":   eipBandwidths.Get("id").Value(),
					"name": eipBandwidths.Get("name").Value(),
					"type": eipBandwidths.Get("type").Value(),
					"size": eipBandwidths.Get("size").Value(),
					"publicip_info": schemas.SliceToList(eipBandwidths.Get("publicip_info"),
						func(publicipInfo gjson.Result) any {
							return map[string]any{
								"publicip_address":   publicipInfo.Get("publicip_address").Value(),
								"publicip_id":        publicipInfo.Get("publicip_id").Value(),
								"publicip_type":      publicipInfo.Get("publicip_type").Value(),
								"publicipv6_address": publicipInfo.Get("publicipv6_address").Value(),
								"ip_version":         publicipInfo.Get("ip_version").Value(),
							}
						},
					),
					"billing_info":           w.setEipBanBil(eipBandwidths),
					"project_id":             eipBandwidths.Get("project_id").Value(),
					"admin_state":            eipBandwidths.Get("admin_state").Value(),
					"tags":                   schemas.SliceToStrList(eipBandwidths.Get("tags")),
					"enable_bandwidth_rules": eipBandwidths.Get("enable_bandwidth_rules").Value(),
					"bandwidth_type":         eipBandwidths.Get("bandwidth_type").Value(),
					"ingress_size":           eipBandwidths.Get("ingress_size").Value(),
					"rule_quota":             eipBandwidths.Get("rule_quota").Value(),
					"ratio_95peak_plus":      eipBandwidths.Get("ratio_95peak_plus").Value(),
					"public_border_group":    eipBandwidths.Get("public_border_group").Value(),
					"bandwidth_rules": schemas.SliceToList(eipBandwidths.Get("bandwidth_rules"),
						func(bandwidthRules gjson.Result) any {
							return map[string]any{
								"id":                    bandwidthRules.Get("id").Value(),
								"name":                  bandwidthRules.Get("name").Value(),
								"egress_size":           bandwidthRules.Get("egress_size").Value(),
								"egress_guarented_size": bandwidthRules.Get("egress_guarented_size").Value(),
								"publicip_info":         w.setEipBanBanRulPubInfo(bandwidthRules),
							}
						},
					),
					"created_at": eipBandwidths.Get("created_at").Value(),
					"updated_at": eipBandwidths.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*Vpcv3BandwidthsDSWrapper) setEipBanBil(data gjson.Result) string {
	return data.Get("billing_info").String()
}

func (*Vpcv3BandwidthsDSWrapper) setEipBanBanRulPubInfo(bandwidthRules gjson.Result) any {
	return schemas.SliceToList(bandwidthRules.Get("publicip_info"), func(publicipInfo gjson.Result) any {
		return map[string]any{
			"publicip_address":   publicipInfo.Get("publicip_address").Value(),
			"publicip_id":        publicipInfo.Get("publicip_id").Value(),
			"publicip_type":      publicipInfo.Get("publicip_type").Value(),
			"publicipv6_address": publicipInfo.Get("publicipv6_address").Value(),
			"ip_version":         publicipInfo.Get("ip_version").Value(),
		}
	})
}
