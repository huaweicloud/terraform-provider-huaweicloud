// Generated by PMS #279
package ces

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesMetrics() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesMetricsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"dim_0": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The first metric dimension.`,
			},
			"dim_1": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The second metric dimension.`,
			},
			"dim_2": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The third metric dimension.`,
			},
			"metric_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The metric name.`,
			},
			"namespace": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The metric namespace.`,
			},
			"metrics": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The metric information list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"namespace": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The metric namespace.`,
						},
						"unit": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The metric unit.`,
						},
						"dimensions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The metric dimension list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource dimension name.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource dimension value.`,
									},
								},
							},
						},
						"metric_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The metric name.`,
						},
					},
				},
			},
		},
	}
}

type MetricsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMetricsDSWrapper(d *schema.ResourceData, meta interface{}) *MetricsDSWrapper {
	return &MetricsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesMetricsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMetricsDSWrapper(d, meta)
	listMetricsRst, err := wrapper.ListMetrics()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listMetricsToSchema(listMetricsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /V1.0/{project_id}/metrics
func (w *MetricsDSWrapper) ListMetrics() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/V1.0/{project_id}/metrics"
	params := map[string]any{
		"dim.0":       w.Get("dim_0"),
		"dim.1":       w.Get("dim_1"),
		"dim.2":       w.Get("dim_2"),
		"metric_name": w.Get("metric_name"),
		"namespace":   w.Get("namespace"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("metrics", "meta_data.marker", "start").
		Request().
		Result()
}

func (w *MetricsDSWrapper) listMetricsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("metrics", schemas.SliceToList(body.Get("metrics"),
			func(metrics gjson.Result) any {
				return map[string]any{
					"namespace": metrics.Get("namespace").Value(),
					"unit":      metrics.Get("unit").Value(),
					"dimensions": schemas.SliceToList(metrics.Get("dimensions"),
						func(dimensions gjson.Result) any {
							return map[string]any{
								"name":  dimensions.Get("name").Value(),
								"value": dimensions.Get("value").Value(),
							}
						},
					),
					"metric_name": metrics.Get("metric_name").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
