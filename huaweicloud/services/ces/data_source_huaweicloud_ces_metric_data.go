// Generated by PMS #540
package ces

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesMetricData() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesMetricDataRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"namespace": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the metric namespace.`,
			},
			"metric_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the resource metric name.`,
			},
			"dim_0": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the level-1 dimension of a metric.`,
			},
			"filter": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the data aggregation method.`,
			},
			"period": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: `Specifies how often Cloud Eye aggregates data.`,
			},
			"from": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the start time of the query.`,
			},
			"to": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the end time of the query.`,
			},
			"dim_1": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the level-2 dimension of a metric.`,
			},
			"dim_2": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the level-3 dimension of a metric.`,
			},
			"dim_3": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the level-4 dimension of a metric.`,
			},
			"datapoints": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The metric data list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"max": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The maximum value of metric data within a rollup period.`,
						},
						"min": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The minimum value of metric data within a rollup period.`,
						},
						"average": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The average value of metric data within a rollup period.`,
						},
						"sum": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The sum of metric data within a rollup period.`,
						},
						"variance": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The variance of metric data within a rollup period.`,
						},
						"timestamp": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The time when the metric is collected. The time is a UNIX timestamp and the unit is ms.`,
						},
						"unit": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The metric unit.`,
						},
					},
				},
			},
		},
	}
}

type MetricDataDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newMetricDataDSWrapper(d *schema.ResourceData, meta interface{}) *MetricDataDSWrapper {
	return &MetricDataDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesMetricDataRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newMetricDataDSWrapper(d, meta)
	showMetricDataRst, err := wrapper.ShowMetricData()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showMetricDataToSchema(showMetricDataRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /V1.0/{project_id}/metric-data
func (w *MetricDataDSWrapper) ShowMetricData() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	fromTime, err := utils.FormatUTCTimeStamp(w.Get("from").(string))
	if err != nil {
		return nil, err
	}
	toTime, err := utils.FormatUTCTimeStamp(w.Get("to").(string))
	if err != nil {
		return nil, err
	}

	uri := "/V1.0/{project_id}/metric-data"
	params := map[string]any{
		"namespace":   w.Get("namespace"),
		"metric_name": w.Get("metric_name"),
		"dim.0":       w.Get("dim_0"),
		"dim.1":       w.Get("dim_1"),
		"dim.2":       w.Get("dim_2"),
		"dim.3":       w.Get("dim_3"),
		"filter":      w.Get("filter"),
		"period":      w.Get("period"),
		"from":        fromTime * 1000,
		"to":          toTime * 1000,
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *MetricDataDSWrapper) showMetricDataToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("datapoints", schemas.SliceToList(body.Get("datapoints"),
			func(datapoints gjson.Result) any {
				return map[string]any{
					"max":       datapoints.Get("max").Value(),
					"min":       datapoints.Get("min").Value(),
					"average":   datapoints.Get("average").Value(),
					"sum":       datapoints.Get("sum").Value(),
					"variance":  datapoints.Get("variance").Value(),
					"timestamp": datapoints.Get("timestamp").Value(),
					"unit":      datapoints.Get("unit").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
