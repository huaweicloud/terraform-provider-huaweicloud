// Generated by PMS #316
package ces

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesAlarmTemplates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesAlarmTemplatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of an alarm template.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the alarm template type.`,
			},
			"namespace": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the namespace of a service.`,
			},
			"dimension_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource dimension.`,
			},
			"alarm_templates": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The alarm template list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"template_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alarm template ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alarm template name.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alarm template type.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the alarm template.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alarm template description.`,
						},
					},
				},
			},
		},
	}
}

type AlarmTemplatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAlarmTemplatesDSWrapper(d *schema.ResourceData, meta interface{}) *AlarmTemplatesDSWrapper {
	return &AlarmTemplatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesAlarmTemplatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAlarmTemplatesDSWrapper(d, meta)
	lisAlaTemRst, err := wrapper.ListAlarmTemplates()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAlarmTemplatesToSchema(lisAlaTemRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /v2/{project_id}/alarm-templates
func (w *AlarmTemplatesDSWrapper) ListAlarmTemplates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/alarm-templates"
	params := map[string]any{
		"namespace":     w.Get("namespace"),
		"dim_name":      w.Get("dimension_name"),
		"template_type": w.Get("type"),
		"template_name": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("alarm_templates", "offset", "limit", 100).
		Request().
		Result()
}

func (w *AlarmTemplatesDSWrapper) listAlarmTemplatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("alarm_templates", schemas.SliceToList(body.Get("alarm_templates"),
			func(alarmTemplates gjson.Result) any {
				return map[string]any{
					"template_id": alarmTemplates.Get("template_id").Value(),
					"name":        alarmTemplates.Get("template_name").Value(),
					"type":        alarmTemplates.Get("template_type").Value(),
					"created_at":  alarmTemplates.Get("create_time").Value(),
					"description": alarmTemplates.Get("template_description").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
