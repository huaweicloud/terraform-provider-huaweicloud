// Generated by PMS #283
package ces

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesAgentDimensions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesAgentDimensionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the instance ID.`,
			},
			"dim_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the dimension name.`,
			},
			"dim_value": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the dimension value.`,
			},
			"dimensions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The dimension information list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The dimension name.`,
						},
						"value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The dimension value.`,
						},
						"origin_value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The actual dimension value.`,
						},
					},
				},
			},
		},
	}
}

type AgentDimensionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAgentDimensionsDSWrapper(d *schema.ResourceData, meta interface{}) *AgentDimensionsDSWrapper {
	return &AgentDimensionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesAgentDimensionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAgentDimensionsDSWrapper(d, meta)
	lisAgeDimInfRst, err := wrapper.ListAgentDimensionInfo()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAgentDimensionInfoToSchema(lisAgeDimInfRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /v2/{project_id}/instances/{instance_id}/agent-dimensions
func (w *AgentDimensionsDSWrapper) ListAgentDimensionInfo() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/instances/{instance_id}/agent-dimensions"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"dim_name":  w.Get("dim_name"),
		"dim_value": w.Get("dim_value"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("dimensions", "offset", "limit", 1000).
		Request().
		Result()
}

func (w *AgentDimensionsDSWrapper) listAgentDimensionInfoToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("dimensions", schemas.SliceToList(body.Get("dimensions"),
			func(dimensions gjson.Result) any {
				return map[string]any{
					"name":         dimensions.Get("name").Value(),
					"value":        dimensions.Get("value").Value(),
					"origin_value": dimensions.Get("origin_value").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
