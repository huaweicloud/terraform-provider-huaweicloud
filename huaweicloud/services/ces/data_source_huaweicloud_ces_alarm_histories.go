// Generated by PMS #581
package ces

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesAlarmHistories() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesAlarmHistoriesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"alarm_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies an alarm ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the alarm rule name.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the alarm rule status.`,
			},
			"level": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the alarm severity.`,
			},
			"namespace": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the namespace of a service.`,
			},
			"resource_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of a resource in an alarm rule.`,
			},
			"from": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the start time for querying alarm records.`,
			},
			"to": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the end time for querying alarm records.`,
			},
			"order_by": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the keyword for sorting alarms.`,
			},
			"record_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the alarm record ID.`,
			},
			"alarm_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the alarm type.`,
			},
			"alarm_histories": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The alarm records.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"record_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alarm record ID.`,
						},
						"alarm_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alarm rule ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alarm rule name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of an alarm record.`,
						},
						"level": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The alarm severity of alarm records.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The alarm rule type.`,
						},
						"action_enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to send a notification.`,
						},
						"begin_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `When an alarm record is generated (UTC time).`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `When an alarm record becomes invalid (UTC time).`,
						},
						"first_alarm_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The UTC time when the alarm was generated for the first time.`,
						},
						"last_alarm_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The UTC time when the alarm was generated for the last time.`,
						},
						"alarm_recovery_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The UTC time when the alarm was cleared.`,
						},
						"metric": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The metric information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"namespace": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The namespace of a service.`,
									},
									"metric_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The metric name of a resource.`,
									},
									"dimensions": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The metric dimension.`,
										Elem:        alarmHistoriesMetricDimensionsElem(),
									},
								},
							},
						},
						"condition": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The conditions for triggering an alarm.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"period": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The rollup period of a metric, in seconds.`,
									},
									"filter": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The rollup method.`,
									},
									"comparison_operator": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The threshold symbol.`,
									},
									"value": {
										Type:        schema.TypeFloat,
										Computed:    true,
										Description: `The alarm threshold.`,
									},
									"unit": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The data unit.`,
									},
									"count": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of times that the alarm triggering conditions are met.`,
									},
									"suppress_duration": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The alarm suppression time, in seconds.`,
									},
								},
							},
						},
						"additional_info": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The additional field of an alarm record.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"resource_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource ID corresponding to the alarm record.`,
									},
									"resource_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource name corresponding to the alarm record.`,
									},
									"event_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of the event in the alarm record.`,
									},
								},
							},
						},
						"alarm_actions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The action to be triggered by an alarm.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The notification type.`,
									},
									"notification_list": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The list of objects to be notified if the alarm status changes.`,
									},
								},
							},
						},
						"ok_actions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The action to be triggered after an alarm is cleared.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The notification type.`,
									},
									"notification_list": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The list of objects to be notified if the alarm status changes.`,
									},
								},
							},
						},
						"data_points": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The time when the resource monitoring data is reported and the monitoring data in the alarm record.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The UTC time when the resource monitoring data of the alarm record is reported.`,
									},
									"value": {
										Type:        schema.TypeFloat,
										Computed:    true,
										Description: `The resource monitoring data of the alarm record at the time point.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// alarmHistoriesMetricDimensionsElem
// The Elem of "alarm_histories.metric.dimensions"
func alarmHistoriesMetricDimensionsElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The dimension of a resource.`,
			},
			"value": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The value of a resource dimension.`,
			},
		},
	}
}

type AlarmHistoriesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAlarmHistoriesDSWrapper(d *schema.ResourceData, meta interface{}) *AlarmHistoriesDSWrapper {
	return &AlarmHistoriesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesAlarmHistoriesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAlarmHistoriesDSWrapper(d, meta)
	lisAlaHisRst, err := wrapper.ListAlarmHistories()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAlarmHistoriesToSchema(lisAlaHisRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /v2/{project_id}/alarm-histories
func (w *AlarmHistoriesDSWrapper) ListAlarmHistories() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/alarm-histories"
	params := map[string]any{
		"alarm_id":    w.Get("alarm_id"),
		"record_id":   w.Get("record_id"),
		"name":        w.Get("name"),
		"alarm_type":  w.Get("alarm_type"),
		"status":      w.Get("status"),
		"level":       w.Get("level"),
		"namespace":   w.Get("namespace"),
		"resource_id": w.Get("resource_id"),
		"from":        w.Get("from"),
		"to":          w.Get("to"),
		"order_by":    w.Get("order_by"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("alarm_histories", "offset", "limit", 100).
		Request().
		Result()
}

func (w *AlarmHistoriesDSWrapper) listAlarmHistoriesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("alarm_histories", schemas.SliceToList(body.Get("alarm_histories"),
			func(alarmHistories gjson.Result) any {
				return map[string]any{
					"record_id":           alarmHistories.Get("record_id").Value(),
					"alarm_id":            alarmHistories.Get("alarm_id").Value(),
					"name":                alarmHistories.Get("name").Value(),
					"status":              alarmHistories.Get("status").Value(),
					"level":               alarmHistories.Get("level").Value(),
					"type":                alarmHistories.Get("type").Value(),
					"action_enabled":      alarmHistories.Get("action_enabled").Value(),
					"begin_time":          alarmHistories.Get("begin_time").Value(),
					"end_time":            alarmHistories.Get("end_time").Value(),
					"first_alarm_time":    alarmHistories.Get("first_alarm_time").Value(),
					"last_alarm_time":     alarmHistories.Get("last_alarm_time").Value(),
					"alarm_recovery_time": alarmHistories.Get("alarm_recovery_time").Value(),
					"metric": schemas.SliceToList(alarmHistories.Get("metric"),
						func(metric gjson.Result) any {
							return map[string]any{
								"namespace":   metric.Get("namespace").Value(),
								"metric_name": metric.Get("metric_name").Value(),
								"dimensions":  w.setAlaHisMetDim(metric),
							}
						},
					),
					"condition": schemas.SliceToList(alarmHistories.Get("condition"),
						func(condition gjson.Result) any {
							return map[string]any{
								"period":              condition.Get("period").Value(),
								"filter":              condition.Get("filter").Value(),
								"comparison_operator": condition.Get("comparison_operator").Value(),
								"value":               condition.Get("value").Value(),
								"unit":                condition.Get("unit").Value(),
								"count":               condition.Get("count").Value(),
								"suppress_duration":   condition.Get("suppress_duration").Value(),
							}
						},
					),
					"additional_info": schemas.SliceToList(alarmHistories.Get("additional_info"),
						func(additionalInfo gjson.Result) any {
							return map[string]any{
								"resource_id":   additionalInfo.Get("resource_id").Value(),
								"resource_name": additionalInfo.Get("resource_name").Value(),
								"event_id":      additionalInfo.Get("event_id").Value(),
							}
						},
					),
					"alarm_actions": schemas.SliceToList(alarmHistories.Get("alarm_actions"),
						func(alarmActions gjson.Result) any {
							return map[string]any{
								"type":              alarmActions.Get("type").Value(),
								"notification_list": schemas.SliceToStrList(alarmActions.Get("notification_list")),
							}
						},
					),
					"ok_actions": schemas.SliceToList(alarmHistories.Get("ok_actions"),
						func(okActions gjson.Result) any {
							return map[string]any{
								"type":              okActions.Get("type").Value(),
								"notification_list": schemas.SliceToStrList(okActions.Get("notification_list")),
							}
						},
					),
					"data_points": schemas.SliceToList(alarmHistories.Get("data_points"),
						func(dataPoints gjson.Result) any {
							return map[string]any{
								"time":  dataPoints.Get("time").Value(),
								"value": dataPoints.Get("value").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AlarmHistoriesDSWrapper) setAlaHisMetDim(metric gjson.Result) any {
	return schemas.SliceToList(metric.Get("dimensions"), func(dimensions gjson.Result) any {
		return map[string]any{
			"name":  dimensions.Get("name").Value(),
			"value": dimensions.Get("value").Value(),
		}
	})
}
