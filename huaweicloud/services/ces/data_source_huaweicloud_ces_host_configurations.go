// Generated by PMS #956
package ces

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesHostConfigurations() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesHostConfigurationsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"namespace": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the namespace of the queried service.`,
			},
			"type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the event type. It can contain only letters, underscores (_), and hyphens (-).`,
			},
			"from": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: `Specifies the start time of the query. UTC timestamp in milliseconds.`,
			},
			"to": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: `Specifies the end time of the query. UTC timestamp in milliseconds.`,
			},
			"dim_0": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the first monitoring dimension.`,
			},
			"dim_1": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the second monitoring dimension.`,
			},
			"dim_2": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the third monitoring dimension.`,
			},
			"dim_3": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the fourth monitoring dimension.`,
			},
			"datapoints": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of configuration information.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of event.`,
						},
						"timestamp": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the time the incident was reported.`,
						},
						"value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the host configuration information.`,
						},
					},
				},
			},
		},
	}
}

type HostConfigurationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newHostConfigurationsDSWrapper(d *schema.ResourceData, meta interface{}) *HostConfigurationsDSWrapper {
	return &HostConfigurationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesHostConfigurationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newHostConfigurationsDSWrapper(d, meta)
	showEventDataRst, err := wrapper.ShowEventData()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showEventDataToSchema(showEventDataRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /V1.0/{project_id}/event-data
func (w *HostConfigurationsDSWrapper) ShowEventData() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/V1.0/{project_id}/event-data"
	params := map[string]any{
		"namespace": w.Get("namespace"),
		"dim.0":     w.Get("dim_0"),
		"dim.1":     w.Get("dim_1"),
		"dim.2":     w.Get("dim_2"),
		"dim.3":     w.Get("dim_3"),
		"type":      w.Get("type"),
		"from":      w.Get("from"),
		"to":        w.Get("to"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *HostConfigurationsDSWrapper) showEventDataToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("datapoints", schemas.SliceToList(body.Get("datapoints"),
			func(datapoints gjson.Result) any {
				return map[string]any{
					"type":      datapoints.Get("type").Value(),
					"timestamp": datapoints.Get("timestamp").Value(),
					"value":     datapoints.Get("value").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
