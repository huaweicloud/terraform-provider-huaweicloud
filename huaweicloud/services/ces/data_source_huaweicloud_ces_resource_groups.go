// Generated by PMS #285
package ces

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesGroupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the enterprise project to which the resource group belongs.`,
			},
			"group_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of a resource group.`,
			},
			"group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource group ID.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the method of adding resources to a resource group when you create a resource group.`,
			},
			"resource_groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The resource groups list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The method of adding resources to a resource group.`,
						},
						"group_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of a resource group.`,
						},
						"group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource group ID.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the resource group was created.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the enterprise project to which the resource group belongs.`,
						},
					},
				},
			},
		},
	}
}

type GroupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newGroupsDSWrapper(d *schema.ResourceData, meta interface{}) *GroupsDSWrapper {
	return &GroupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesGroupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newGroupsDSWrapper(d, meta)
	lisResGroRst, err := wrapper.ListResourceGroups()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listResourceGroupsToSchema(lisResGroRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /v2/{project_id}/resource-groups
func (w *GroupsDSWrapper) ListResourceGroups() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/resource-groups"
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"group_name":            w.Get("group_name"),
		"group_id":              w.Get("group_id"),
		"type":                  w.Get("type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("resource_groups", "offset", "limit", 100).
		Request().
		Result()
}

func (w *GroupsDSWrapper) listResourceGroupsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("resource_groups", schemas.SliceToList(body.Get("resource_groups"),
			func(resourceGroups gjson.Result) any {
				return map[string]any{
					"type":                  resourceGroups.Get("type").Value(),
					"group_name":            resourceGroups.Get("group_name").Value(),
					"group_id":              resourceGroups.Get("group_id").Value(),
					"created_at":            resourceGroups.Get("create_time").Value(),
					"enterprise_project_id": resourceGroups.Get("enterprise_project_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
