// Generated by PMS #294
package ces

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesGroupServiceResources() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesGroupServicesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"group_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the resource group ID.`,
			},
			"service": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the service type.`,
			},
			"dim_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the dimension name.`,
			},
			"dim_value": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the dimension value. Fuzzy match is not supported.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the health status.`,
			},
			"resources": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The resources in a resource group.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The health status.`,
						},
						"dimensions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The dimension information about a resource.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The dimension name.`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The dimension value.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type GroupServicesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newGroupServicesDSWrapper(d *schema.ResourceData, meta interface{}) *GroupServicesDSWrapper {
	return &GroupServicesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesGroupServicesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newGroupServicesDSWrapper(d, meta)
	lisResGroSerResRst, err := wrapper.ListResourceGroupsServicesResources()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listResourceGroupsServicesResourcesToSchema(lisResGroSerResRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /v2/{project_id}/resource-groups/{group_id}/services/{service}/resources
func (w *GroupServicesDSWrapper) ListResourceGroupsServicesResources() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/resource-groups/{group_id}/services/{service}/resources"
	uri = strings.ReplaceAll(uri, "{group_id}", w.Get("group_id").(string))
	uri = strings.ReplaceAll(uri, "{service}", w.Get("service").(string))
	params := map[string]any{
		"dim_name":  w.Get("dim_name"),
		"status":    w.Get("status"),
		"dim_value": w.Get("dim_value"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("resources", "offset", "limit", 0).
		Request().
		Result()
}

func (w *GroupServicesDSWrapper) listResourceGroupsServicesResourcesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("resources", schemas.SliceToList(body.Get("resources"),
			func(resources gjson.Result) any {
				return map[string]any{
					"status": resources.Get("status").Value(),
					"dimensions": schemas.SliceToList(resources.Get("dimensions"),
						func(dimensions gjson.Result) any {
							return map[string]any{
								"name":  dimensions.Get("name").Value(),
								"value": dimensions.Get("value").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
