// Generated by PMS #591
package ces

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesAgentMaintenanceTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesAgentMaintenanceTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the server ID.`,
			},
			"instance_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the server type.`,
			},
			"invocation_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task ID.`,
			},
			"invocation_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task type.`,
			},
			"invocation_target": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the task object. Only **telescope** is supported.`,
			},
			"invocations": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The task list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"invocation_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The task status.`,
						},
						"create_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `When the task was created.`,
						},
						"update_time": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `When the task was updated.`,
						},
						"invocation_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The task ID.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The server ID.`,
						},
						"instance_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The server name.`,
						},
						"elastic_ips": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The EIP list.`,
						},
						"invocation_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The task type.`,
						},
						"current_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current version of the agent.`,
						},
						"target_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The target version.`,
						},
						"instance_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The server type.`,
						},
						"intranet_ips": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The private IP address list.`,
						},
						"invocation_target": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The task object.`,
						},
					},
				},
			},
		},
	}
}

type AgentMaintenanceTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAgentMaintenanceTasksDSWrapper(d *schema.ResourceData, meta interface{}) *AgentMaintenanceTasksDSWrapper {
	return &AgentMaintenanceTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesAgentMaintenanceTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAgentMaintenanceTasksDSWrapper(d, meta)
	lisAgeInvRst, err := wrapper.ListAgentInvocations()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAgentInvocationsToSchema(lisAgeInvRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /v3/{project_id}/agent-invocations
func (w *AgentMaintenanceTasksDSWrapper) ListAgentInvocations() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/agent-invocations"
	params := map[string]any{
		"instance_id":       w.Get("instance_id"),
		"instance_type":     w.Get("instance_type"),
		"invocation_id":     w.Get("invocation_id"),
		"invocation_type":   w.Get("invocation_type"),
		"invocation_target": w.Get("invocation_target"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("invocations", "offset", "limit", 100).
		Request().
		Result()
}

func (w *AgentMaintenanceTasksDSWrapper) listAgentInvocationsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("invocations", schemas.SliceToList(body.Get("invocations"),
			func(invocations gjson.Result) any {
				return map[string]any{
					"invocation_status": invocations.Get("invocation_status").Value(),
					"create_time":       invocations.Get("create_time").Value(),
					"update_time":       invocations.Get("update_time").Value(),
					"invocation_id":     invocations.Get("invocation_id").Value(),
					"instance_id":       invocations.Get("instance_id").Value(),
					"instance_name":     invocations.Get("instance_name").Value(),
					"elastic_ips":       schemas.SliceToStrList(invocations.Get("elastic_ips")),
					"invocation_type":   invocations.Get("invocation_type").Value(),
					"current_version":   invocations.Get("current_version").Value(),
					"target_version":    invocations.Get("target_version").Value(),
					"instance_type":     invocations.Get("instance_type").Value(),
					"intranet_ips":      schemas.SliceToStrList(invocations.Get("intranet_ips")),
					"invocation_target": invocations.Get("invocation_target").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
