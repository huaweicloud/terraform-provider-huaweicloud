// Generated by PMS #338
package ces

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCesOneClickAlarms() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesOneClickAlarmsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"one_click_alarms": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The one-click monitoring list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"one_click_alarm_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The one-click monitoring ID for a service.`,
						},
						"namespace": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The metric namespace.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The supplementary information about one-click monitoring.`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable one-click monitoring.`,
						},
					},
				},
			},
		},
	}
}

type OneClickAlarmsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOneClickAlarmsDSWrapper(d *schema.ResourceData, meta interface{}) *OneClickAlarmsDSWrapper {
	return &OneClickAlarmsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesOneClickAlarmsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOneClickAlarmsDSWrapper(d, meta)
	lisOneCliAlaRst, err := wrapper.ListOneClickAlarms()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listOneClickAlarmsToSchema(lisOneCliAlaRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES GET /v2/{project_id}/one-click-alarms
func (w *OneClickAlarmsDSWrapper) ListOneClickAlarms() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/one-click-alarms"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *OneClickAlarmsDSWrapper) listOneClickAlarmsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("one_click_alarms", schemas.SliceToList(body.Get("one_click_alarms"),
			func(oneClickAlarms gjson.Result) any {
				return map[string]any{
					"one_click_alarm_id": oneClickAlarms.Get("one_click_alarm_id").Value(),
					"namespace":          oneClickAlarms.Get("namespace").Value(),
					"description":        oneClickAlarms.Get("description").Value(),
					"enabled":            oneClickAlarms.Get("enabled").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
