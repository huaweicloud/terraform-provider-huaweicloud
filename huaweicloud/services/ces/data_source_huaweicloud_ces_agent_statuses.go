// Generated by PMS #589
package ces

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCesAgentStatuses() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCesAgentStatusesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_ids": {
				Type:        schema.TypeList,
				Required:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the cloud server ID list.`,
			},
			"uniagent_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the uniagent status.`,
			},
			"extension_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the agent name.`,
			},
			"extension_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the agent status.`,
			},
			"agent_status": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The agent statuses.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cloud server ID.`,
						},
						"uniagent_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The uniagent status.`,
						},
						"extensions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The agent extension information list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The agent name.`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The agent status.`,
									},
									"version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The agent version.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type AgentStatusesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAgentStatusesDSWrapper(d *schema.ResourceData, meta interface{}) *AgentStatusesDSWrapper {
	return &AgentStatusesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCesAgentStatusesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAgentStatusesDSWrapper(d, meta)
	listAgentStatusRst, err := wrapper.ListAgentStatus()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAgentStatusToSchema(listAgentStatusRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CES POST /v3/{project_id}/agent-status/batch-query
func (w *AgentStatusesDSWrapper) ListAgentStatus() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ces")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/agent-status/batch-query"
	params := map[string]any{
		"extension_name":   w.Get("extension_name"),
		"extension_status": w.Get("extension_status"),
		"instance_ids":     w.ListToArray("instance_ids"),
		"uniagent_status":  w.Get("uniagent_status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("POST").
		URI(uri).
		Body(params).
		Request().
		Result()
}

func (w *AgentStatusesDSWrapper) listAgentStatusToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("agent_status", schemas.SliceToList(body.Get("agent_status"),
			func(agentStatus gjson.Result) any {
				return map[string]any{
					"instance_id":     agentStatus.Get("instance_id").Value(),
					"uniagent_status": agentStatus.Get("uniagent_status").Value(),
					"extensions": schemas.SliceToList(agentStatus.Get("extensions"),
						func(extensions gjson.Result) any {
							return map[string]any{
								"name":    extensions.Get("name").Value(),
								"status":  extensions.Get("status").Value(),
								"version": extensions.Get("version").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
